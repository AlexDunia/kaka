import{K as g,L as b,r as p,d as S}from"./index-DyY8Ujzr.js";import{u as v}from"./auth-Bl_OKKrm.js";const o=[];for(let e=0;e<256;++e)o.push((e+256).toString(16).slice(1));function q(e,t=0){return(o[e[t+0]]+o[e[t+1]]+o[e[t+2]]+o[e[t+3]]+"-"+o[e[t+4]]+o[e[t+5]]+"-"+o[e[t+6]]+o[e[t+7]]+"-"+o[e[t+8]]+o[e[t+9]]+"-"+o[e[t+10]]+o[e[t+11]]+o[e[t+12]]+o[e[t+13]]+o[e[t+14]]+o[e[t+15]]).toLowerCase()}let I;const A=new Uint8Array(16);function x(){if(!I){if(typeof crypto>"u"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");I=crypto.getRandomValues.bind(crypto)}return I(A)}const T=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),P={randomUUID:T};function k(e,t,s){var r;if(P.randomUUID&&!e)return P.randomUUID();e=e||{};const c=e.random??((r=e.rng)==null?void 0:r.call(e))??x();if(c.length<16)throw new Error("Random bytes length must be >= 16");return c[6]=c[6]&15|64,c[8]=c[8]&63|128,q(c)}const f="purchases",O=()=>{localStorage.getItem(f)||localStorage.setItem(f,JSON.stringify([]))},m=()=>(O(),JSON.parse(localStorage.getItem(f)||"[]")),R=e=>m().filter(s=>s.userId===e),B=async e=>{const{eventId:t,userId:s,quantity:c}=e,r=g.getEventById(t);if(!r)throw new Error("Event not found");if(r.availableTickets<c)throw new Error("Not enough tickets available");const d={id:k(),eventId:t,userId:s,eventTitle:r.title,eventDate:r.date,eventLocation:r.location,quantity:c,pricePerTicket:r.price,totalPrice:r.price*c,purchaseDate:new Date().toISOString(),status:"confirmed"};g.updateEvent(t,{availableTickets:r.availableTickets-c});const a=m();return a.push(d),localStorage.setItem(f,JSON.stringify(a)),d},F=async(e,t)=>{const s=m(),c=s.findIndex(a=>a.id===e&&a.userId===t);if(c===-1)throw new Error("Purchase not found");const r=s[c];if(r.status!=="confirmed")throw new Error("Cannot cancel this purchase");r.status="cancelled",r.cancelDate=new Date().toISOString(),s[c]=r;const d=g.getEventById(r.eventId);return d&&g.updateEvent(r.eventId,{availableTickets:d.availableTickets+r.quantity}),localStorage.setItem(f,JSON.stringify(s)),r},N=()=>{const e=m(),t=g.getAllEvents(),s=e.reduce((a,l)=>l.status==="confirmed"?a+l.totalPrice:a,0),c={};t.forEach(a=>{c[a.category]=0}),e.forEach(a=>{if(a.status==="confirmed"){const l=t.find(w=>w.id===a.eventId);l&&(c[l.category]+=a.quantity)}});const r={};e.forEach(a=>{a.status==="confirmed"&&(r[a.eventId]||(r[a.eventId]={eventId:a.eventId,eventTitle:a.eventTitle,quantity:0,revenue:0}),r[a.eventId].quantity+=a.quantity,r[a.eventId].revenue+=a.totalPrice)});const d=Object.values(r).sort((a,l)=>l.quantity-a.quantity).slice(0,5);return{totalRevenue:s,totalTicketsSold:e.reduce((a,l)=>l.status==="confirmed"?a+l.quantity:a,0),totalPurchases:e.filter(a=>a.status==="confirmed").length,salesByCategory:c,topSellingEvents:d}},y={getAllPurchases:m,getPurchasesByUser:R,createPurchase:B,cancelPurchase:F,getPurchaseStats:N},V=b("purchases",()=>{const e=p([]),t=p(!1),s=p(null),c=async()=>{const u=v();if(!u.user)return[];t.value=!0,s.value=null;try{const n=await y.getPurchasesByUser(u.user.id);return e.value=n,n}catch(n){throw s.value=n.message||"Failed to fetch purchase history",n}finally{t.value=!1}},r=async()=>{if(!v().isAdmin)return s.value="Unauthorized",[];t.value=!0,s.value=null;try{const n=await y.getAllPurchases();return e.value=n,n}catch(n){throw s.value=n.message||"Failed to fetch purchases",n}finally{t.value=!1}},d=async u=>{const n=v();if(!n.user)throw s.value="You must be logged in to purchase tickets",new Error("Authentication required");t.value=!0,s.value=null;try{const i={...u,userId:n.user.id},h=await y.createPurchase(i);return e.value.push(h),h}catch(i){throw s.value=i.message||"Failed to complete purchase",i}finally{t.value=!1}},a=async u=>{const n=v();if(!n.user)throw s.value="You must be logged in to cancel a purchase",new Error("Authentication required");t.value=!0,s.value=null;try{const i=await y.cancelPurchase(u,n.user.id),h=e.value.findIndex(U=>U.id===u);return h!==-1&&(e.value[h]=i),i}catch(i){throw s.value=i.message||"Failed to cancel purchase",i}finally{t.value=!1}},l=async()=>{if(!v().isAdmin)throw s.value="Unauthorized",new Error("Admin privileges required");t.value=!0,s.value=null;try{return await y.getPurchaseStats()}catch(n){throw s.value=n.message||"Failed to fetch purchase statistics",n}finally{t.value=!1}},w=S(()=>{const u=new Date;return e.value.filter(n=>n.status==="confirmed"&&new Date(n.eventDate)>u).sort((n,i)=>new Date(n.eventDate)-new Date(i.eventDate))}),D=S(()=>{const u=new Date;return e.value.filter(n=>new Date(n.eventDate)<u).sort((n,i)=>new Date(i.eventDate)-new Date(n.eventDate))}),E=S(()=>e.value.filter(u=>u.status==="confirmed").reduce((u,n)=>u+n.totalPrice,0));return{purchases:e,loading:t,error:s,upcomingPurchases:w,pastPurchases:D,totalSpent:E,fetchUserPurchases:c,fetchAllPurchases:r,createPurchase:d,cancelPurchase:a,getPurchaseStats:l}});export{y as p,V as u};
