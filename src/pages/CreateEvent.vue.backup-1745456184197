<template>
<div class="create-event">
    <div class="container">
      <router-link to="/" class="back-link">
        <svg
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M19 12H5"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
          <path
            d="M12 19L5 12L12 5"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
        <span>BACK</span>
      </router-link>

      <div class="create-event__header">
        <h1 class="create-event__title">Make Your Event dYZ%</h1>
        <p class="create-event__subtitle">Fill out this form to create your event - it's easy!</p>
        <button type="button" @click="prefillForm" class="prefill-button">
          Prefill with Test Data
        </button>
      </div>

      <div v-if="error" class="create-event__alert create-event__alert--error">
        {{ error }}
      </div>

      <div v-if="success" class="create-event__alert create-event__alert--success">
        Event created successfully! Redirecting to event page...
      </div>

      <form @submit.prevent="handleSubmit" class="create-event__form">
        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Event Information
          </h2>

          <div class="form-group">
            <label for="title" class="form-label">Event Name</label>
            <input
              id="title"
              v-model="form.title"
              type="text"
              class="form-input"
              :class="{ 'form-input--error': !validation.title.valid }"
              placeholder="What's your event called?"
            />
            <p v-if="!validation.title.valid" class="form-error">{{ validation.title.message }}</p>
            <p v-else class="form-helper">Name it something people will understand right away</p>
          </div>

          <div class="form-group">
            <label for="organizer" class="form-label">Organizer Name</label>
            <input
              id="organizer"
              v-model="form.organizer"
              type="text"
              class="form-input"
              :class="{ 'form-input--error': !validation.organizer.valid }"
              placeholder="Who's hosting this?"
            />
            <p v-if="!validation.organizer.valid" class="form-error">
              {{ validation.organizer.message }}
            </p>
          </div>

          <div class="form-group">
            <label for="category" class="form-label">Event Category</label>
            <select
              id="category"
              v-model="form.category"
              class="form-select"
              :class="{ 'form-input--error': !validation.category.valid }"
            >
              <option value="" disabled>Select a category</option>
              <option v-for="category in categories" :key="category.id" :value="category.id">
                {{ category.name }}
              </option>
            </select>
            <p v-if="!validation.category.valid" class="form-error">
              {{ validation.category.message }}
            </p>
            <p v-else class="form-helper">The right category helps people find your event</p>
          </div>

          <div class="form-group">
            <label class="form-label">Sub Categories</label>
            <div class="subcategories-display">
              <div class="selected-subcategories">
                <div v-if="displayedSubCategories.length === 0" class="no-subcategories">
                  No subcategories selected
                </div>
                <div
                  v-for="(subCat, index) in displayedSubCategories"
                  :key="index"
                  class="selected-subcategory"
                >
                  <span>{{ getSubCategoryName(subCat) }}</span>
                  <button
                    type="button"
                    @click="removeSubCategoryById(subCat)"
                    class="remove-subcategory-btn"
                    aria-label="Remove subcategory"
                  >
                    <svg
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>
              <button
                type="button"
                @click="openSubCategoryModal"
                class="manage-subcategories-btn"
                :disabled="form.category === ''"
              >
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M12 5V19"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  <path
                    d="M5 12H19"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
                <span>{{ displayedSubCategories.length ? 'Edit' : 'Add' }} Subcategories</span>
              </button>
            </div>
            <p v-if="!validation.subCategories.valid" class="form-error">
              {{ validation.subCategories.message }}
            </p>
            <p v-else class="form-helper">
              Add up to 5 subcategories to describe your event better
            </p>
          </div>

          <div class="form-group">
            <label for="description" class="form-label">Event Description</label>
            <textarea
              id="description"
              v-model="form.description"
              class="form-textarea"
              :class="{ 'form-input--error': !validation.description.valid }"
              placeholder="Tell people what makes your event special..."
              rows="5"
            ></textarea>
            <p v-if="!validation.description.valid" class="form-error">
              {{ validation.description.message }}
            </p>
            <p v-else class="form-helper">Tell people what will happen at your event</p>
          </div>

          <div class="form-group">
            <label class="form-label">Event Images</label>
            <div class="image-upload-container">
              <div class="image-upload-row">
                <div
                  class="image-upload-dropzone"
                  :class="{ 'has-image': mainImagePreview }"
                  @click="triggerMainImageUpload"
                  @dragover.prevent
                  @drop.prevent="handleMainImageDrop"
                >
                  <img
                    v-if="mainImagePreview"
                    :src="mainImagePreview"
                    alt="Main image preview"
                    class="preview-image"
                  />
                  <div v-if="mainImagePreview" class="image-overlay">
                    <button type="button" class="remove-image-btn" @click.stop="removeMainImage">
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                      <span>Remove</span>
                    </button>
                  </div>
                  <div v-else class="upload-placeholder">
                    <div class="upload-icon">
                      <svg
                        width="32"
                        height="32"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <rect
                          x="3"
                          y="3"
                          width="18"
                          height="18"
                          rx="2"
                          stroke="currentColor"
                          stroke-width="1.5"
                        />
                        <path
                          d="M3 16L7 12C7.94 11.06 9.44 11.06 10.38 12L16.5 18"
                          stroke="currentColor"
                          stroke-width="1.5"
                          stroke-linecap="round"
                        />
                        <path
                          d="M14 16L16 14C16.94 13.06 18.44 13.06 19.38 14L21 15.5"
                          stroke="currentColor"
                          stroke-width="1.5"
                          stroke-linecap="round"
                        />
                        <circle cx="9" cy="8" r="2" stroke="currentColor" stroke-width="1.5" />
                      </svg>
                    </div>
                    <div class="upload-text">
                      <span class="primary-text">Main Event Image</span>
                      <span class="secondary-text">Drag & drop or click to upload</span>
                    </div>
                  </div>
                </div>

                <div
                  class="image-upload-dropzone banner-dropzone"
                  :class="{ 'has-image': bannerImagePreview }"
                  @click="triggerBannerImageUpload"
                  @dragover.prevent
                  @drop.prevent="handleBannerImageDrop"
                >
                  <img
                    v-if="bannerImagePreview"
                    :src="bannerImagePreview"
                    alt="Banner image preview"
                    class="preview-image"
                  />
                  <div v-if="bannerImagePreview" class="image-overlay">
                    <button type="button" class="remove-image-btn" @click.stop="removeBannerImage">
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                      <span>Remove</span>
                    </button>
                  </div>
                  <div v-else class="upload-placeholder">
                    <div class="upload-icon">
                      <svg
                        width="32"
                        height="32"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <rect
                          x="2"
                          y="4"
                          width="20"
                          height="13"
                          rx="2"
                          stroke="currentColor"
                          stroke-width="1.5"
                        />
                        <path
                          d="M2 13L6 9C6.94 8.06 8.44 8.06 9.38 9L15.5 15"
                          stroke="currentColor"
                          stroke-width="1.5"
                          stroke-linecap="round"
                        />
                        <path
                          d="M14 13L16 11C16.94 10.06 18.44 10.06 19.38 11L22 13.5"
                          stroke="currentColor"
                          stroke-width="1.5"
                          stroke-linecap="round"
                        />
                        <circle cx="8" cy="7" r="1.5" stroke="currentColor" stroke-width="1.5" />
                      </svg>
                    </div>
                    <div class="upload-text">
                      <span class="primary-text">Banner Image</span>
                      <span class="secondary-text">Drag & drop or click to upload</span>
                    </div>
                  </div>
                </div>
              </div>

              <div class="image-inputs">
                <input
                  id="mainImage"
                  ref="mainImageInput"
                  type="file"
                  class="image-input"
                  accept="image/*"
                  @change="handleMainImageUpload"
                />
                <input
                  id="bannerImage"
                  ref="bannerImageInput"
                  type="file"
                  class="image-input"
                  accept="image/*"
                  @change="handleBannerImageUpload"
                />
              </div>
            </div>
            <p
              v-if="!validation.mainImage.valid || !validation.bannerImage.valid"
              class="form-error"
            >
              {{
                !validation.mainImage.valid
                  ? validation.mainImage.message
                  : validation.bannerImage.message
              }}
            </p>
            <p v-else class="form-helper">
              Upload images for your event. The main image will appear on cards throughout the site,
              while the banner will be displayed on your event's detail page.
            </p>
          </div>
        </div>

        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Date & Time
          </h2>

          <div class="form-row">
            <div class="form-group">
              <label for="date" class="form-label">Event Date</label>
              <div class="date-picker-wrapper">
                <input
                  id="date"
                  v-model="form.date"
                  type="text"
                  readonly
                  class="form-input date-input"
                  :class="{ 'form-input--error': !validation.date.valid }"
                  :min="today"
                  @click="openDatePicker"
                />
                <div v-if="showDateTip" class="picker-tip">
                  <div class="tip-arrow"></div>
                  <div class="tip-content">
                    <p>Click to open calendar</p>
                    <span>Select a date for your event</span>
                  </div>
                </div>
              </div>
              <p v-if="!validation.date.valid" class="form-error">{{ validation.date.message }}</p>
              <p v-else class="form-helper">Click to open the calendar</p>
            </div>

            <div class="form-group">
              <label for="time" class="form-label">Start Time</label>
              <div class="time-picker-wrapper">
                <input
                  id="time"
                  v-model="form.time"
                  type="text"
                  readonly
                  class="form-input time-input"
                  :class="{ 'form-input--error': !validation.time.valid }"
                  @click="openTimePicker"
                  placeholder="Select a time"
                />
                <div v-if="showTimeTip" class="picker-tip">
                  <div class="tip-arrow"></div>
                  <div class="tip-content">
                    <p>Click to select time</p>
                    <span>Use our easy time selector</span>
                  </div>
                </div>
              </div>
              <p v-if="!validation.time.valid" class="form-error">{{ validation.time.message }}</p>
              <p v-else class="form-helper">Click to open time selector</p>
            </div>
          </div>

          <div class="form-group">
            <label for="duration" class="form-label">Event Duration</label>
            <select id="duration" v-model="form.duration" class="form-select">
              <option value="" disabled>Select duration</option>
              <option v-for="option in durationOptions" :key="option" :value="option">
                {{ option }}
              </option>
            </select>
            <p class="form-helper">Tell people how long your event will last</p>
          </div>
        </div>

        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Location Details
          </h2>

          <div class="form-group">
            <label for="location" class="form-label">Venue Name & Address</label>
            <input
              id="location"
              v-model="form.location"
              type="text"
              class="form-input"
              :class="{ 'form-input--error': !validation.location.valid }"
              placeholder="Where is your event happening?"
            />
            <p v-if="!validation.location.valid" class="form-error">
              {{ validation.location.message }}
            </p>
            <p v-else class="form-helper">Add the full address so people can find your event</p>
          </div>

          <div class="location-map-placeholder">
            <div class="location-map-content">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                <circle cx="12" cy="10" r="3"></circle>
              </svg>
              <p>Maps coming soon</p>
            </div>
          </div>
        </div>

        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Ticket Information
          </h2>

          <div v-if="!validation.ticketTypes.valid" class="form-error ticket-types-error">
            {{ validation.ticketTypes.message }}
          </div>

          <div class="ticket-types-container">
            <div v-for="(ticket, index) in form.ticketTypes" :key="index" class="ticket-type-card">
              <div class="ticket-type-header">
                <h3 class="ticket-type-title">Ticket #{{ index + 1 }}</h3>
                <div class="ticket-type-actions">
                  <button
                    type="button"
                    @click="duplicateTicketType(index)"
                    class="ticket-action-btn ticket-action-duplicate"
                    title="Duplicate ticket"
                  >
                    <svg
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <rect
                        x="9"
                        y="9"
                        width="13"
                        height="13"
                        rx="2"
                        stroke="currentColor"
                        stroke-width="2"
                      />
                      <path
                        d="M5 15H4C2.89543 15 2 14.1046 2 13V4C2 2.89543 2.89543 2 4 2H13C14.1046 2 15 2.89543 15 4V5"
                        stroke="currentColor"
                        stroke-width="2"
                      />
                    </svg>
                  </button>
                  <button
                    type="button"
                    @click="removeTicketType(index)"
                    class="ticket-action-btn ticket-action-remove"
                    title="Remove ticket"
                    :disabled="form.ticketTypes.length <= 1"
                  >
                    <svg
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>

              <div class="form-group">
                <label :for="'ticket-name-' + index" class="form-label">Ticket Name</label>
                <div class="ticket-name-input-wrapper">
                  <input
                    :id="'ticket-name-' + index"
                    v-model="ticket.name"
                    type="text"
                    class="form-input"
                    placeholder="e.g. Early Bird, VIP, General Admission"
                  />
                  <div class="ticket-template-dropdown">
                    <button
                      type="button"
                      class="ticket-template-btn"
                      @click="openTemplateModal(index)"
                    >
                      <span>Templates</span>
                      <svg
                        width="14"
                        height="14"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M6 9L12 15L18 9"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                    <div class="ticket-template-options">
                      <button
                        v-for="template in ticketTemplates"
                        :key="template.name"
                        type="button"
                        class="ticket-template-option"
                        @click="applyTemplate(index, template)"
                      >
                        {{ template.name }}
                      </button>
                    </div>
                  </div>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <label :for="'ticket-price-' + index" class="form-label">Price ($)</label>
                  <input
                    :id="'ticket-price-' + index"
                    v-model.number="ticket.price"
                    type="number"
                    min="0"
                    step="0.01"
                    class="form-input"
                    placeholder="0.00"
                  />
                </div>

                <div class="form-group">
                  <label :for="'ticket-quantity-' + index" class="form-label">Quantity</label>
                  <input
                    :id="'ticket-quantity-' + index"
                    v-model.number="ticket.quantity"
                    type="number"
                    min="1"
                    class="form-input"
                    placeholder="10"
                  />
                </div>
              </div>

              <div class="form-group">
                <label :for="'ticket-description-' + index" class="form-label"
                  >Description (Optional)</label
                >
                <textarea
                  :id="'ticket-description-' + index"
                  v-model="ticket.description"
                  class="form-textarea ticket-description"
                  rows="2"
                  placeholder="Describe what's included with this ticket"
                ></textarea>
              </div>

              <div class="ticket-sales-period">
                <h4 class="ticket-section-subtitle">Sales End Date</h4>
                <p class="ticket-section-helper">
                  Should this ticket type have a deadline? If yes, tell us when sales should stop.
                  This is optional.
                </p>

                <div class="form-row">
                  <div class="form-group">
                    <label :for="'ticket-end-date-' + index" class="form-label">Date</label>
                    <input
                      :id="'ticket-end-date-' + index"
                      v-model="ticket.salesEndDate"
                      type="date"
                      class="form-input"
                      :min="today"
                      :max="form.date"
                    />
                  </div>

                  <div class="form-group">
                    <label :for="'ticket-end-time-' + index" class="form-label">Time</label>
                    <input
                      :id="'ticket-end-time-' + index"
                      v-model="ticket.salesEndTime"
                      type="time"
                      class="form-input"
                    />
                  </div>
                </div>
              </div>

              <div class="form-checkbox-wrapper">
                <input
                  :id="'ticket-featured-' + index"
                  v-model="ticket.isFeatured"
                  type="checkbox"
                  class="form-checkbox"
                />
                <label :for="'ticket-featured-' + index" class="form-checkbox-label">
                  Feature this ticket (highlighted in the ticket selection)
                </label>
              </div>
            </div>

            <button type="button" @click="addTicketType" class="add-ticket-type-btn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M12 5V19"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
                <path
                  d="M5 12H19"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
              <span>Add Another Ticket Type</span>
            </button>
          </div>
        </div>

        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Event Options
          </h2>

          <p class="section-intro">
            Select features and amenities that your event offers to help attendees know what to
            expect.
          </p>

          <div class="event-options-container">
            <div class="event-options-grid">
              <!-- Predefined event options -->
              <div
                v-for="option in predefinedEventOptions"
                :key="'predefined-' + option"
                class="event-option-item"
                @click="toggleEventOption(option)"
              >
                <div
                  class="event-option-checkbox"
                  :class="{ 'event-option-checkbox--selected': isEventOptionSelected(option) }"
                >
                  <div class="event-option-label">{{ option }}</div>
                  <svg
                    v-if="isEventOptionSelected(option)"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                    class="event-option-checkmark"
                  >
                    <path
                      d="M20 6L9 17L4 12"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                </div>
              </div>

              <!-- Custom event options -->
              <div
                v-for="(option, index) in form.customEventOptions"
                :key="'custom-' + index"
                class="event-option-item"
              >
                <div class="event-option-checkbox event-option-checkbox--selected">
                  <div class="event-option-label">{{ option }}</div>
                  <button
                    type="button"
                    @click="removeCustomEventOption(index)"
                    class="remove-option-btn"
                    aria-label="Remove option"
                  >
                    <svg
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>
            </div>

            <div class="add-event-option">
              <div class="custom-event-option-input">
                <input
                  type="text"
                  v-model="newCustomEventOption"
                  placeholder="Add your own event option..."
                  class="form-input custom-option-input"
                  @keyup.enter="addCustomEventOption"
                />
                <button
                  type="button"
                  class="add-custom-option-btn"
                  @click="addCustomEventOption"
                  :disabled="!newCustomEventOption.trim()"
                >
                  Add
                </button>
              </div>
            </div>
          </div>

          <div class="form-checkbox-wrapper mt-4">
            <input id="featured" v-model="form.featured" type="checkbox" class="form-checkbox" />
            <label for="featured" class="form-checkbox-label">
              Feature this event (additional promotion fee may apply)
            </label>
          </div>
          <p class="form-helper">Featured events show up on the homepage</p>
        </div>

        <!-- Add new FAQ section -->
        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Frequently Asked Questions
            <span class="section-optional">(Optional)</span>
          </h2>

          <p class="section-intro">
            Help attendees by answering common questions about your event. You can edit these
            defaults or add your own.
          </p>

          <div class="faq-container">
            <div v-for="(faq, index) in form.faqs" :key="index" class="faq-item">
              <div class="faq-header">
                <h3 class="faq-number">Q{{ index + 1 }}</h3>
                <div class="faq-actions">
                  <button
                    type="button"
                    @click="removeFaq(index)"
                    class="faq-action-btn faq-action-remove"
                    title="Remove question"
                  >
                    <svg
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>

              <div class="faq-content">
                <div class="form-group">
                  <label :for="'faq-question-' + index" class="form-label">Question</label>
                  <input
                    :id="'faq-question-' + index"
                    v-model="faq.question"
                    type="text"
                    class="form-input"
                    placeholder="Enter a question guests might ask"
                  />
                </div>

                <div class="form-group">
                  <label :for="'faq-answer-' + index" class="form-label">Answer</label>
                  <textarea
                    :id="'faq-answer-' + index"
                    v-model="faq.answer"
                    class="form-textarea faq-answer"
                    rows="3"
                    placeholder="Provide a clear answer to the question"
                  ></textarea>
                </div>
              </div>
            </div>

            <button type="button" @click="addFaq" class="add-faq-btn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M12 5V19"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
                <path
                  d="M5 12H19"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
              <span>Add Another Question</span>
            </button>
          </div>
        </div>

        <div class="form-actions">
          <button type="button" @click="resetForm" class="btn-secondary" :disabled="isSubmitting">
            Reset Form
          </button>
          <button type="submit" class="btn-primary" :disabled="isSubmitting">
            <span v-if="isSubmitting">
              <svg class="spinner" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <circle cx="12" cy="12" r="10" fill="none" stroke-width="3" />
              </svg>
              Creating Event...
            </span>
            <span v-else>Create Event</span>
          </button>
        </div>
      </form>

      <div class="create-event__note">
        <p>
          <strong>Note:</strong> Your event data is saved locally for now. Online saving coming
          soon.
        </p>
      </div>
    </div>

    <div
      v-if="showTemplateModal"
      class="ticket-template-modal-overlay"
      @click.self="closeTemplateModal"
    >
      <div class="ticket-template-modal">
        <div class="ticket-template-modal-header">
          <h3>Choose a Ticket Template</h3>
          <button @click="closeTemplateModal" class="modal-close-btn" aria-label="Close">
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18 6L6 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M6 6L18 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </div>
        <div class="ticket-template-modal-body">
          <div
            v-for="template in ticketTemplates"
            :key="template.name"
            class="template-card"
            @click="applyTemplateFromModal(activeTicketIndex, template)"
          >
            <div class="template-card-content">
              <h4 class="template-name">{{ template.name }}</h4>
              <p class="template-description">{{ template.description }}</p>
            </div>
            <div class="template-card-icon">
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M20 6L9 17L4 12"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Add subcategory modal -->
    <div
      v-if="showSubCategoryModal"
      class="subcategory-modal-overlay"
      @click.self="closeSubCategoryModal"
    >
      <div class="subcategory-modal">
        <div class="subcategory-modal-header">
          <h3>Select or Add Subcategories</h3>
          <button @click="closeSubCategoryModal" class="modal-close-btn" aria-label="Close">
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18 6L6 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M6 6L18 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </div>
        <div class="subcategory-modal-body">
          <p class="subcategory-modal-info">Select up to 5 subcategories or add your own</p>

          <div class="subcategory-search">
            <input
              type="text"
              v-model="subcategorySearchTerm"
              placeholder="Search subcategories..."
              class="subcategory-search-input"
            />
          </div>

          <div class="subcategory-options">
            <div class="subcategory-section">
              <h4 class="subcategory-section-title">Available Subcategories</h4>
              <div class="subcategory-chips">
                <div
                  v-for="subCategory in filteredSubCategories"
                  :key="subCategory.id"
                  class="subcategory-chip"
                  :class="{ 'subcategory-chip--selected': isSubCategorySelected(subCategory.id) }"
                  @click="toggleSubCategory(subCategory.id)"
                >
                  <span>{{ subCategory.name }}</span>
                  <svg
                    v-if="isSubCategorySelected(subCategory.id)"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M20 6L9 17L4 12"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                </div>
              </div>
            </div>

            <div class="subcategory-section">
              <h4 class="subcategory-section-title">Custom Subcategories</h4>
              <div class="custom-subcategory-input">
                <input
                  type="text"
                  v-model="newCustomSubCategory"
                  placeholder="Enter your own subcategory..."
                  class="form-input custom-input"
                  @keyup.enter="addCustomSubCategory"
                />
                <button
                  type="button"
                  class="add-custom-btn"
                  @click="addCustomSubCategory"
                  :disabled="!newCustomSubCategory.trim()"
                >
                  Add
                </button>
              </div>

              <div class="subcategory-chips custom-chips">
                <div
                  v-for="(custom, index) in customSubCategories"
                  :key="'custom-' + index"
                  class="subcategory-chip subcategory-chip--custom"
                >
                  <span>{{ custom }}</span>
                  <button
                    class="remove-custom-btn"
                    @click="removeCustomSubCategory(index)"
                    aria-label="Remove"
                  >
                    <svg
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          </div>

          <div class="subcategory-modal-footer">
            <div class="subcategory-summary">
              <span class="subcategory-count">{{ selectedSubCategoriesCount }}/5 selected</span>
            </div>
            <div class="subcategory-actions">
              <button type="button" class="btn-secondary" @click="closeSubCategoryModal">
                Cancel
              </button>
              <button type="button" class="btn-primary" @click="confirmSubCategories">Apply</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Custom Time Picker Modal -->
    <div v-if="isTimePickerOpen" class="time-picker-overlay" @click.self="closeTimePicker">
      <div class="time-picker-modal">
        <div class="time-picker-header">
          <h3>Select Time</h3>
          <button type="button" class="time-picker-close" @click="closeTimePicker">
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18 6L6 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M6 6L18 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </div>
        <div class="time-picker-body">
          <!-- Custom time input -->
          <div class="custom-time-input">
            <div class="time-input-group">
              <input
                type="text"
                v-model="customHours"
                class="time-input-field"
                maxlength="2"
                @focus="$event.target.select()"
                @blur="formatTimeInputs"
                @keydown="handleTimeInput"
                placeholder="HH"
              />
              <span class="time-divider">:</span>
              <input
                type="text"
                v-model="customMinutes"
                class="time-input-field"
                maxlength="2"
                @focus="$event.target.select()"
                @blur="formatTimeInputs"
                @keydown="handleTimeInput"
                placeholder="MM"
              />
            </div>
          </div>

          <div class="time-picker-grid">
            <div
              v-for="time in timeOptions"
              :key="time"
              class="time-option"
              :class="{ selected: selectedTime === time }"
              @click="selectTime(time)"
            >
              {{ time }}
            </div>
          </div>
          <div class="time-period-selector">
            <button
              type="button"
              class="time-period-btn"
              :class="{ selected: selectedPeriod === 'AM' }"
              @click="selectPeriod('AM')"
            >
              AM
            </button>
            <button
              type="button"
              class="time-period-btn"
              :class="{ selected: selectedPeriod === 'PM' }"
              @click="selectPeriod('PM')"
            >
              PM
            </button>
          </div>
        </div>
        <div class="time-picker-actions">
          <button type="button" class="time-picker-btn time-picker-cancel" @click="closeTimePicker">
            Cancel
          </button>
          <button
            type="button"
            class="time-picker-btn time-picker-apply"
            @click="applyTimeSelection"
          >
            Apply
          </button>
        </div>
      </div>
    </div>

    <!-- Custom Date Picker Modal -->
    <div v-if="isDatePickerOpen" class="date-picker-overlay" @click.self="closeDatePicker">
      <div class="date-picker-modal">
        <div class="date-picker-header">
          <h3>Select Date</h3>
          <button type="button" class="date-picker-close" @click="closeDatePicker">
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18 6L6 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M6 6L18 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </div>
        <div class="date-picker-body">
          <div class="date-picker-month-nav">
            <button class="month-nav-btn" @click="previousMonth">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M15 18L9 12L15 6"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </button>
            <div class="month-display">{{ monthNames[currentMonth] }} {{ currentYear }}</div>
            <button class="month-nav-btn" @click="nextMonth">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M9 18L15 12L9 6"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </button>
          </div>

          <div class="date-picker-weekdays">
            <div class="weekday" v-for="day in weekdays" :key="day">{{ day }}</div>
          </div>

          <div class="date-picker-days">
            <div
              v-for="(day, index) in calendarDays"
              :key="index"
              class="calendar-day"
              :class="{
                'other-month': !day.inCurrentMonth,
                today: day.isToday,
                selected: day.isSelected,
                disabled: day.isDisabled,
              }"
              @click="!day.isDisabled && selectDate(day.date)"
            >
              {{ day.day }}
            </div>
          </div>
        </div>
        <div class="date-picker-actions">
          <button type="button" class="date-picker-btn date-picker-cancel" @click="closeDatePicker">
            Cancel
          </button>
          <button
            type="button"
            class="date-picker-btn date-picker-apply"
            @click="applyDateSelection"
          >
            Apply
          </button>
        </div>
      </div>
    </div>
  </div>


  <div class="create-event">
    <div class="container">
      <router-link to="/" class="back-link">
        <svg
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M19 12H5"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
          <path
            d="M12 19L5 12L12 5"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
        <span>BACK</span>
      </router-link>

      <div class="create-event__header">
        <h1 class="create-event__title">Make Your Event dYZ%</h1>
        <p class="create-event__subtitle">Fill out this form to create your event - it's easy!</p>
        <button type="button" @click="prefillForm" class="prefill-button">
          Prefill with Test Data
        </button>
      </div>

      <div v-if="error" class="create-event__alert create-event__alert--error">
        {{ error }}
      </div>

      <div v-if="success" class="create-event__alert create-event__alert--success">
        Event created successfully! Redirecting to event page...
      </div>

      <form @submit.prevent="handleSubmit" class="create-event__form">
        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Event Information
          </h2>

          <div class="form-group">
            <label for="title" class="form-label">Event Name</label>
            <input
              id="title"
              v-model="form.title"
              type="text"
              class="form-input"
              :class="{ 'form-input--error': !validation.title.valid }"
              placeholder="What's your event called?"
            />
            <p v-if="!validation.title.valid" class="form-error">{{ validation.title.message }}</p>
            <p v-else class="form-helper">Name it something people will understand right away</p>
          </div>

          <div class="form-group">
            <label for="organizer" class="form-label">Organizer Name</label>
            <input
              id="organizer"
              v-model="form.organizer"
              type="text"
              class="form-input"
              :class="{ 'form-input--error': !validation.organizer.valid }"
              placeholder="Who's hosting this?"
            />
            <p v-if="!validation.organizer.valid" class="form-error">
              {{ validation.organizer.message }}
            </p>
          </div>

          <div class="form-group">
            <label for="category" class="form-label">Event Category</label>
            <select
              id="category"
              v-model="form.category"
              class="form-select"
              :class="{ 'form-input--error': !validation.category.valid }"
            >
              <option value="" disabled>Select a category</option>
              <option v-for="category in categories" :key="category.id" :value="category.id">
                {{ category.name }}
              </option>
            </select>
            <p v-if="!validation.category.valid" class="form-error">
              {{ validation.category.message }}
            </p>
            <p v-else class="form-helper">The right category helps people find your event</p>
          </div>

          <div class="form-group">
            <label class="form-label">Sub Categories</label>
            <div class="subcategories-display">
              <div class="selected-subcategories">
                <div v-if="displayedSubCategories.length === 0" class="no-subcategories">
                  No subcategories selected
                </div>
                <div
                  v-for="(subCat, index) in displayedSubCategories"
                  :key="index"
                  class="selected-subcategory"
                >
                  <span>{{ getSubCategoryName(subCat) }}</span>
                  <button
                    type="button"
                    @click="removeSubCategoryById(subCat)"
                    class="remove-subcategory-btn"
                    aria-label="Remove subcategory"
                  >
                    <svg
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>
              <button
                type="button"
                @click="openSubCategoryModal"
                class="manage-subcategories-btn"
                :disabled="form.category === ''"
              >
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M12 5V19"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  <path
                    d="M5 12H19"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
                <span>{{ displayedSubCategories.length ? 'Edit' : 'Add' }} Subcategories</span>
              </button>
            </div>
            <p v-if="!validation.subCategories.valid" class="form-error">
              {{ validation.subCategories.message }}
            </p>
            <p v-else class="form-helper">
              Add up to 5 subcategories to describe your event better
            </p>
          </div>

          <div class="form-group">
            <label for="description" class="form-label">Event Description</label>
            <textarea
              id="description"
              v-model="form.description"
              class="form-textarea"
              :class="{ 'form-input--error': !validation.description.valid }"
              placeholder="Tell people what makes your event special..."
              rows="5"
            ></textarea>
            <p v-if="!validation.description.valid" class="form-error">
              {{ validation.description.message }}
            </p>
            <p v-else class="form-helper">Tell people what will happen at your event</p>
          </div>

          <div class="form-group">
            <label class="form-label">Event Images</label>
            <div class="image-upload-container">
              <div class="image-upload-row">
                <div
                  class="image-upload-dropzone"
                  :class="{ 'has-image': mainImagePreview }"
                  @click="triggerMainImageUpload"
                  @dragover.prevent
                  @drop.prevent="handleMainImageDrop"
                >
                  <img
                    v-if="mainImagePreview"
                    :src="mainImagePreview"
                    alt="Main image preview"
                    class="preview-image"
                  />
                  <div v-if="mainImagePreview" class="image-overlay">
                    <button type="button" class="remove-image-btn" @click.stop="removeMainImage">
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                      <span>Remove</span>
                    </button>
                  </div>
                  <div v-else class="upload-placeholder">
                    <div class="upload-icon">
                      <svg
                        width="32"
                        height="32"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <rect
                          x="3"
                          y="3"
                          width="18"
                          height="18"
                          rx="2"
                          stroke="currentColor"
                          stroke-width="1.5"
                        />
                        <path
                          d="M3 16L7 12C7.94 11.06 9.44 11.06 10.38 12L16.5 18"
                          stroke="currentColor"
                          stroke-width="1.5"
                          stroke-linecap="round"
                        />
                        <path
                          d="M14 16L16 14C16.94 13.06 18.44 13.06 19.38 14L21 15.5"
                          stroke="currentColor"
                          stroke-width="1.5"
                          stroke-linecap="round"
                        />
                        <circle cx="9" cy="8" r="2" stroke="currentColor" stroke-width="1.5" />
                      </svg>
                    </div>
                    <div class="upload-text">
                      <span class="primary-text">Main Event Image</span>
                      <span class="secondary-text">Drag & drop or click to upload</span>
                    </div>
                  </div>
                </div>

                <div
                  class="image-upload-dropzone banner-dropzone"
                  :class="{ 'has-image': bannerImagePreview }"
                  @click="triggerBannerImageUpload"
                  @dragover.prevent
                  @drop.prevent="handleBannerImageDrop"
                >
                  <img
                    v-if="bannerImagePreview"
                    :src="bannerImagePreview"
                    alt="Banner image preview"
                    class="preview-image"
                  />
                  <div v-if="bannerImagePreview" class="image-overlay">
                    <button type="button" class="remove-image-btn" @click.stop="removeBannerImage">
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                      <span>Remove</span>
                    </button>
                  </div>
                  <div v-else class="upload-placeholder">
                    <div class="upload-icon">
                      <svg
                        width="32"
                        height="32"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <rect
                          x="2"
                          y="4"
                          width="20"
                          height="13"
                          rx="2"
                          stroke="currentColor"
                          stroke-width="1.5"
                        />
                        <path
                          d="M2 13L6 9C6.94 8.06 8.44 8.06 9.38 9L15.5 15"
                          stroke="currentColor"
                          stroke-width="1.5"
                          stroke-linecap="round"
                        />
                        <path
                          d="M14 13L16 11C16.94 10.06 18.44 10.06 19.38 11L22 13.5"
                          stroke="currentColor"
                          stroke-width="1.5"
                          stroke-linecap="round"
                        />
                        <circle cx="8" cy="7" r="1.5" stroke="currentColor" stroke-width="1.5" />
                      </svg>
                    </div>
                    <div class="upload-text">
                      <span class="primary-text">Banner Image</span>
                      <span class="secondary-text">Drag & drop or click to upload</span>
                    </div>
                  </div>
                </div>
              </div>

              <div class="image-inputs">
                <input
                  id="mainImage"
                  ref="mainImageInput"
                  type="file"
                  class="image-input"
                  accept="image/*"
                  @change="handleMainImageUpload"
                />
                <input
                  id="bannerImage"
                  ref="bannerImageInput"
                  type="file"
                  class="image-input"
                  accept="image/*"
                  @change="handleBannerImageUpload"
                />
              </div>
            </div>
            <p
              v-if="!validation.mainImage.valid || !validation.bannerImage.valid"
              class="form-error"
            >
              {{
                !validation.mainImage.valid
                  ? validation.mainImage.message
                  : validation.bannerImage.message
              }}
            </p>
            <p v-else class="form-helper">
              Upload images for your event. The main image will appear on cards throughout the site,
              while the banner will be displayed on your event's detail page.
            </p>
          </div>
        </div>

        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Date & Time
          </h2>

          <div class="form-row">
            <div class="form-group">
              <label for="date" class="form-label">Event Date</label>
              <div class="date-picker-wrapper">
                <input
                  id="date"
                  v-model="form.date"
                  type="text"
                  readonly
                  class="form-input date-input"
                  :class="{ 'form-input--error': !validation.date.valid }"
                  :min="today"
                  @click="openDatePicker"
                />
                <div v-if="showDateTip" class="picker-tip">
                  <div class="tip-arrow"></div>
                  <div class="tip-content">
                    <p>Click to open calendar</p>
                    <span>Select a date for your event</span>
                  </div>
                </div>
              </div>
              <p v-if="!validation.date.valid" class="form-error">{{ validation.date.message }}</p>
              <p v-else class="form-helper">Click to open the calendar</p>
            </div>

            <div class="form-group">
              <label for="time" class="form-label">Start Time</label>
              <div class="time-picker-wrapper">
                <input
                  id="time"
                  v-model="form.time"
                  type="text"
                  readonly
                  class="form-input time-input"
                  :class="{ 'form-input--error': !validation.time.valid }"
                  @click="openTimePicker"
                  placeholder="Select a time"
                />
                <div v-if="showTimeTip" class="picker-tip">
                  <div class="tip-arrow"></div>
                  <div class="tip-content">
                    <p>Click to select time</p>
                    <span>Use our easy time selector</span>
                  </div>
                </div>
              </div>
              <p v-if="!validation.time.valid" class="form-error">{{ validation.time.message }}</p>
              <p v-else class="form-helper">Click to open time selector</p>
            </div>
          </div>

          <div class="form-group">
            <label for="duration" class="form-label">Event Duration</label>
            <select id="duration" v-model="form.duration" class="form-select">
              <option value="" disabled>Select duration</option>
              <option v-for="option in durationOptions" :key="option" :value="option">
                {{ option }}
              </option>
            </select>
            <p class="form-helper">Tell people how long your event will last</p>
          </div>
        </div>

        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Location Details
          </h2>

          <div class="form-group">
            <label for="location" class="form-label">Venue Name & Address</label>
            <input
              id="location"
              v-model="form.location"
              type="text"
              class="form-input"
              :class="{ 'form-input--error': !validation.location.valid }"
              placeholder="Where is your event happening?"
            />
            <p v-if="!validation.location.valid" class="form-error">
              {{ validation.location.message }}
            </p>
            <p v-else class="form-helper">Add the full address so people can find your event</p>
          </div>

          <div class="location-map-placeholder">
            <div class="location-map-content">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                <circle cx="12" cy="10" r="3"></circle>
              </svg>
              <p>Maps coming soon</p>
            </div>
          </div>
        </div>

        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Ticket Information
          </h2>

          <div v-if="!validation.ticketTypes.valid" class="form-error ticket-types-error">
            {{ validation.ticketTypes.message }}
          </div>

          <div class="ticket-types-container">
            <div v-for="(ticket, index) in form.ticketTypes" :key="index" class="ticket-type-card">
              <div class="ticket-type-header">
                <h3 class="ticket-type-title">Ticket #{{ index + 1 }}</h3>
                <div class="ticket-type-actions">
                  <button
                    type="button"
                    @click="duplicateTicketType(index)"
                    class="ticket-action-btn ticket-action-duplicate"
                    title="Duplicate ticket"
                  >
                    <svg
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <rect
                        x="9"
                        y="9"
                        width="13"
                        height="13"
                        rx="2"
                        stroke="currentColor"
                        stroke-width="2"
                      />
                      <path
                        d="M5 15H4C2.89543 15 2 14.1046 2 13V4C2 2.89543 2.89543 2 4 2H13C14.1046 2 15 2.89543 15 4V5"
                        stroke="currentColor"
                        stroke-width="2"
                      />
                    </svg>
                  </button>
                  <button
                    type="button"
                    @click="removeTicketType(index)"
                    class="ticket-action-btn ticket-action-remove"
                    title="Remove ticket"
                    :disabled="form.ticketTypes.length <= 1"
                  >
                    <svg
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>

              <div class="form-group">
                <label :for="'ticket-name-' + index" class="form-label">Ticket Name</label>
                <div class="ticket-name-input-wrapper">
                  <input
                    :id="'ticket-name-' + index"
                    v-model="ticket.name"
                    type="text"
                    class="form-input"
                    placeholder="e.g. Early Bird, VIP, General Admission"
                  />
                  <div class="ticket-template-dropdown">
                    <button
                      type="button"
                      class="ticket-template-btn"
                      @click="openTemplateModal(index)"
                    >
                      <span>Templates</span>
                      <svg
                        width="14"
                        height="14"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M6 9L12 15L18 9"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                    <div class="ticket-template-options">
                      <button
                        v-for="template in ticketTemplates"
                        :key="template.name"
                        type="button"
                        class="ticket-template-option"
                        @click="applyTemplate(index, template)"
                      >
                        {{ template.name }}
                      </button>
                    </div>
                  </div>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <label :for="'ticket-price-' + index" class="form-label">Price ($)</label>
                  <input
                    :id="'ticket-price-' + index"
                    v-model.number="ticket.price"
                    type="number"
                    min="0"
                    step="0.01"
                    class="form-input"
                    placeholder="0.00"
                  />
                </div>

                <div class="form-group">
                  <label :for="'ticket-quantity-' + index" class="form-label">Quantity</label>
                  <input
                    :id="'ticket-quantity-' + index"
                    v-model.number="ticket.quantity"
                    type="number"
                    min="1"
                    class="form-input"
                    placeholder="10"
                  />
                </div>
              </div>

              <div class="form-group">
                <label :for="'ticket-description-' + index" class="form-label"
                  >Description (Optional)</label
                >
                <textarea
                  :id="'ticket-description-' + index"
                  v-model="ticket.description"
                  class="form-textarea ticket-description"
                  rows="2"
                  placeholder="Describe what's included with this ticket"
                ></textarea>
              </div>

              <div class="ticket-sales-period">
                <h4 class="ticket-section-subtitle">Sales End Date</h4>
                <p class="ticket-section-helper">
                  Should this ticket type have a deadline? If yes, tell us when sales should stop.
                  This is optional.
                </p>

                <div class="form-row">
                  <div class="form-group">
                    <label :for="'ticket-end-date-' + index" class="form-label">Date</label>
                    <input
                      :id="'ticket-end-date-' + index"
                      v-model="ticket.salesEndDate"
                      type="date"
                      class="form-input"
                      :min="today"
                      :max="form.date"
                    />
                  </div>

                  <div class="form-group">
                    <label :for="'ticket-end-time-' + index" class="form-label">Time</label>
                    <input
                      :id="'ticket-end-time-' + index"
                      v-model="ticket.salesEndTime"
                      type="time"
                      class="form-input"
                    />
                  </div>
                </div>
              </div>

              <div class="form-checkbox-wrapper">
                <input
                  :id="'ticket-featured-' + index"
                  v-model="ticket.isFeatured"
                  type="checkbox"
                  class="form-checkbox"
                />
                <label :for="'ticket-featured-' + index" class="form-checkbox-label">
                  Feature this ticket (highlighted in the ticket selection)
                </label>
              </div>
            </div>

            <button type="button" @click="addTicketType" class="add-ticket-type-btn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M12 5V19"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
                <path
                  d="M5 12H19"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
              <span>Add Another Ticket Type</span>
            </button>
          </div>
        </div>

        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Event Options
          </h2>

          <p class="section-intro">
            Select features and amenities that your event offers to help attendees know what to
            expect.
          </p>

          <div class="event-options-container">
            <div class="event-options-grid">
              <!-- Predefined event options -->
              <div
                v-for="option in predefinedEventOptions"
                :key="'predefined-' + option"
                class="event-option-item"
                @click="toggleEventOption(option)"
              >
                <div
                  class="event-option-checkbox"
                  :class="{ 'event-option-checkbox--selected': isEventOptionSelected(option) }"
                >
                  <div class="event-option-label">{{ option }}</div>
                  <svg
                    v-if="isEventOptionSelected(option)"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                    class="event-option-checkmark"
                  >
                    <path
                      d="M20 6L9 17L4 12"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                </div>
              </div>

              <!-- Custom event options -->
              <div
                v-for="(option, index) in form.customEventOptions"
                :key="'custom-' + index"
                class="event-option-item"
              >
                <div class="event-option-checkbox event-option-checkbox--selected">
                  <div class="event-option-label">{{ option }}</div>
                  <button
                    type="button"
                    @click="removeCustomEventOption(index)"
                    class="remove-option-btn"
                    aria-label="Remove option"
                  >
                    <svg
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>
            </div>

            <div class="add-event-option">
              <div class="custom-event-option-input">
                <input
                  type="text"
                  v-model="newCustomEventOption"
                  placeholder="Add your own event option..."
                  class="form-input custom-option-input"
                  @keyup.enter="addCustomEventOption"
                />
                <button
                  type="button"
                  class="add-custom-option-btn"
                  @click="addCustomEventOption"
                  :disabled="!newCustomEventOption.trim()"
                >
                  Add
                </button>
              </div>
            </div>
          </div>

          <div class="form-checkbox-wrapper mt-4">
            <input id="featured" v-model="form.featured" type="checkbox" class="form-checkbox" />
            <label for="featured" class="form-checkbox-label">
              Feature this event (additional promotion fee may apply)
            </label>
          </div>
          <p class="form-helper">Featured events show up on the homepage</p>
        </div>

        <!-- Add new FAQ section -->
        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Frequently Asked Questions
            <span class="section-optional">(Optional)</span>
          </h2>

          <p class="section-intro">
            Help attendees by answering common questions about your event. You can edit these
            defaults or add your own.
          </p>

          <div class="faq-container">
            <div v-for="(faq, index) in form.faqs" :key="index" class="faq-item">
              <div class="faq-header">
                <h3 class="faq-number">Q{{ index + 1 }}</h3>
                <div class="faq-actions">
                  <button
                    type="button"
                    @click="removeFaq(index)"
                    class="faq-action-btn faq-action-remove"
                    title="Remove question"
                  >
                    <svg
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>

              <div class="faq-content">
                <div class="form-group">
                  <label :for="'faq-question-' + index" class="form-label">Question</label>
                  <input
                    :id="'faq-question-' + index"
                    v-model="faq.question"
                    type="text"
                    class="form-input"
                    placeholder="Enter a question guests might ask"
                  />
                </div>

                <div class="form-group">
                  <label :for="'faq-answer-' + index" class="form-label">Answer</label>
                  <textarea
                    :id="'faq-answer-' + index"
                    v-model="faq.answer"
                    class="form-textarea faq-answer"
                    rows="3"
                    placeholder="Provide a clear answer to the question"
                  ></textarea>
                </div>
              </div>
            </div>

            <button type="button" @click="addFaq" class="add-faq-btn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M12 5V19"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
                <path
                  d="M5 12H19"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
              <span>Add Another Question</span>
            </button>
          </div>
        </div>

        <div class="form-actions">
          <button type="button" @click="resetForm" class="btn-secondary" :disabled="isSubmitting">
            Reset Form
          </button>
          <button type="submit" class="btn-primary" :disabled="isSubmitting">
            <span v-if="isSubmitting">
              <svg class="spinner" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <circle cx="12" cy="12" r="10" fill="none" stroke-width="3" />
              </svg>
              Creating Event...
            </span>
            <span v-else>Create Event</span>
          </button>
        </div>
      </form>

      <div class="create-event__note">
        <p>
          <strong>Note:</strong> Your event data is saved locally for now. Online saving coming
          soon.
        </p>
      </div>
    </div>

    <div
      v-if="showTemplateModal"
      class="ticket-template-modal-overlay"
      @click.self="closeTemplateModal"
    >
      <div class="ticket-template-modal">
        <div class="ticket-template-modal-header">
          <h3>Choose a Ticket Template</h3>
          <button @click="closeTemplateModal" class="modal-close-btn" aria-label="Close">
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18 6L6 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M6 6L18 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </div>
        <div class="ticket-template-modal-body">
          <div
            v-for="template in ticketTemplates"
            :key="template.name"
            class="template-card"
            @click="applyTemplateFromModal(activeTicketIndex, template)"
          >
            <div class="template-card-content">
              <h4 class="template-name">{{ template.name }}</h4>
              <p class="template-description">{{ template.description }}</p>
            </div>
            <div class="template-card-icon">
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M20 6L9 17L4 12"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Add subcategory modal -->
    <div
      v-if="showSubCategoryModal"
      class="subcategory-modal-overlay"
      @click.self="closeSubCategoryModal"
    >
      <div class="subcategory-modal">
        <div class="subcategory-modal-header">
          <h3>Select or Add Subcategories</h3>
          <button @click="closeSubCategoryModal" class="modal-close-btn" aria-label="Close">
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18 6L6 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M6 6L18 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </div>
        <div class="subcategory-modal-body">
          <p class="subcategory-modal-info">Select up to 5 subcategories or add your own</p>

          <div class="subcategory-search">
            <input
              type="text"
              v-model="subcategorySearchTerm"
              placeholder="Search subcategories..."
              class="subcategory-search-input"
            />
          </div>

          <div class="subcategory-options">
            <div class="subcategory-section">
              <h4 class="subcategory-section-title">Available Subcategories</h4>
              <div class="subcategory-chips">
                <div
                  v-for="subCategory in filteredSubCategories"
                  :key="subCategory.id"
                  class="subcategory-chip"
                  :class="{ 'subcategory-chip--selected': isSubCategorySelected(subCategory.id) }"
                  @click="toggleSubCategory(subCategory.id)"
                >
                  <span>{{ subCategory.name }}</span>
                  <svg
                    v-if="isSubCategorySelected(subCategory.id)"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M20 6L9 17L4 12"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                </div>
              </div>
            </div>

            <div class="subcategory-section">
              <h4 class="subcategory-section-title">Custom Subcategories</h4>
              <div class="custom-subcategory-input">
                <input
                  type="text"
                  v-model="newCustomSubCategory"
                  placeholder="Enter your own subcategory..."
                  class="form-input custom-input"
                  @keyup.enter="addCustomSubCategory"
                />
                <button
                  type="button"
                  class="add-custom-btn"
                  @click="addCustomSubCategory"
                  :disabled="!newCustomSubCategory.trim()"
                >
                  Add
                </button>
              </div>

              <div class="subcategory-chips custom-chips">
                <div
                  v-for="(custom, index) in customSubCategories"
                  :key="'custom-' + index"
                  class="subcategory-chip subcategory-chip--custom"
                >
                  <span>{{ custom }}</span>
                  <button
                    class="remove-custom-btn"
                    @click="removeCustomSubCategory(index)"
                    aria-label="Remove"
                  >
                    <svg
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          </div>

          <div class="subcategory-modal-footer">
            <div class="subcategory-summary">
              <span class="subcategory-count">{{ selectedSubCategoriesCount }}/5 selected</span>
            </div>
            <div class="subcategory-actions">
              <button type="button" class="btn-secondary" @click="closeSubCategoryModal">
                Cancel
              </button>
              <button type="button" class="btn-primary" @click="confirmSubCategories">Apply</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Custom Time Picker Modal -->
    <div v-if="isTimePickerOpen" class="time-picker-overlay" @click.self="closeTimePicker">
      <div class="time-picker-modal">
        <div class="time-picker-header">
          <h3>Select Time</h3>
          <button type="button" class="time-picker-close" @click="closeTimePicker">
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18 6L6 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M6 6L18 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </div>
        <div class="time-picker-body">
          <!-- Custom time input -->
          <div class="custom-time-input">
            <div class="time-input-group">
              <input
                type="text"
                v-model="customHours"
                class="time-input-field"
                maxlength="2"
                @focus="$event.target.select()"
                @blur="formatTimeInputs"
                @keydown="handleTimeInput"
                placeholder="HH"
              />
              <span class="time-divider">:</span>
              <input
                type="text"
                v-model="customMinutes"
                class="time-input-field"
                maxlength="2"
                @focus="$event.target.select()"
                @blur="formatTimeInputs"
                @keydown="handleTimeInput"
                placeholder="MM"
              />
            </div>
          </div>

          <div class="time-picker-grid">
            <div
              v-for="time in timeOptions"
              :key="time"
              class="time-option"
              :class="{ selected: selectedTime === time }"
              @click="selectTime(time)"
            >
              {{ time }}
            </div>
          </div>
          <div class="time-period-selector">
            <button
              type="button"
              class="time-period-btn"
              :class="{ selected: selectedPeriod === 'AM' }"
              @click="selectPeriod('AM')"
            >
              AM
            </button>
            <button
              type="button"
              class="time-period-btn"
              :class="{ selected: selectedPeriod === 'PM' }"
              @click="selectPeriod('PM')"
            >
              PM
            </button>
          </div>
        </div>
        <div class="time-picker-actions">
          <button type="button" class="time-picker-btn time-picker-cancel" @click="closeTimePicker">
            Cancel
          </button>
          <button
            type="button"
            class="time-picker-btn time-picker-apply"
            @click="applyTimeSelection"
          >
            Apply
          </button>
        </div>
      </div>
    </div>

    <!-- Custom Date Picker Modal -->
    <div v-if="isDatePickerOpen" class="date-picker-overlay" @click.self="closeDatePicker">
      <div class="date-picker-modal">
        <div class="date-picker-header">
          <h3>Select Date</h3>
          <button type="button" class="date-picker-close" @click="closeDatePicker">
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18 6L6 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M6 6L18 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </div>
        <div class="date-picker-body">
          <div class="date-picker-month-nav">
            <button class="month-nav-btn" @click="previousMonth">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M15 18L9 12L15 6"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </button>
            <div class="month-display">{{ monthNames[currentMonth] }} {{ currentYear }}</div>
            <button class="month-nav-btn" @click="nextMonth">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M9 18L15 12L9 6"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </button>
          </div>

          <div class="date-picker-weekdays">
            <div class="weekday" v-for="day in weekdays" :key="day">{{ day }}</div>
          </div>

          <div class="date-picker-days">
            <div
              v-for="(day, index) in calendarDays"
              :key="index"
              class="calendar-day"
              :class="{
                'other-month': !day.inCurrentMonth,
                today: day.isToday,
                selected: day.isSelected,
                disabled: day.isDisabled,
              }"
              @click="!day.isDisabled && selectDate(day.date)"
            >
              {{ day.day }}
            </div>
          </div>
        </div>
        <div class="date-picker-actions">
          <button type="button" class="date-picker-btn date-picker-cancel" @click="closeDatePicker">
            Cancel
          </button>
          <button
            type="button"
            class="date-picker-btn date-picker-apply"
            @click="applyDateSelection"
          >
            Apply
          </button>
        </div>
      </div>
    </div>
  </div>


  <div class="create-event">
    <div class="container">
      <router-link to="/" class="back-link">
        <svg
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M19 12H5"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
          <path
            d="M12 19L5 12L12 5"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
        <span>BACK</span>
      </router-link>

      <div class="create-event__header">
        <h1 class="create-event__title">Make Your Event dYZ%</h1>
        <p class="create-event__subtitle">Fill out this form to create your event - it's easy!</p>
        <button type="button" @click="prefillForm" class="prefill-button">
          Prefill with Test Data
        </button>
      </div>

      <div v-if="error" class="create-event__alert create-event__alert--error">
        {{ error }}
      </div>

      <div v-if="success" class="create-event__alert create-event__alert--success">
        Event created successfully! Redirecting to event page...
      </div>

      <form @submit.prevent="handleSubmit" class="create-event__form">
        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Event Information
          </h2>

          <div class="form-group">
            <label for="title" class="form-label">Event Name</label>
            <input
              id="title"
              v-model="form.title"
              type="text"
              class="form-input"
              :class="{ 'form-input--error': !validation.title.valid }"
              placeholder="What's your event called?"
            />
            <p v-if="!validation.title.valid" class="form-error">{{ validation.title.message }}</p>
            <p v-else class="form-helper">Name it something people will understand right away</p>
          </div>

          <div class="form-group">
            <label for="organizer" class="form-label">Organizer Name</label>
            <input
              id="organizer"
              v-model="form.organizer"
              type="text"
              class="form-input"
              :class="{ 'form-input--error': !validation.organizer.valid }"
              placeholder="Who's hosting this?"
            />
            <p v-if="!validation.organizer.valid" class="form-error">
              {{ validation.organizer.message }}
            </p>
          </div>

          <div class="form-group">
            <label for="category" class="form-label">Event Category</label>
            <select
              id="category"
              v-model="form.category"
              class="form-select"
              :class="{ 'form-input--error': !validation.category.valid }"
            >
              <option value="" disabled>Select a category</option>
              <option v-for="category in categories" :key="category.id" :value="category.id">
                {{ category.name }}
              </option>
            </select>
            <p v-if="!validation.category.valid" class="form-error">
              {{ validation.category.message }}
            </p>
            <p v-else class="form-helper">The right category helps people find your event</p>
          </div>

          <div class="form-group">
            <label class="form-label">Sub Categories</label>
            <div class="subcategories-display">
              <div class="selected-subcategories">
                <div v-if="displayedSubCategories.length === 0" class="no-subcategories">
                  No subcategories selected
                </div>
                <div
                  v-for="(subCat, index) in displayedSubCategories"
                  :key="index"
                  class="selected-subcategory"
                >
                  <span>{{ getSubCategoryName(subCat) }}</span>
                  <button
                    type="button"
                    @click="removeSubCategoryById(subCat)"
                    class="remove-subcategory-btn"
                    aria-label="Remove subcategory"
                  >
                    <svg
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>
              <button
                type="button"
                @click="openSubCategoryModal"
                class="manage-subcategories-btn"
                :disabled="form.category === ''"
              >
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M12 5V19"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  <path
                    d="M5 12H19"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
                <span>{{ displayedSubCategories.length ? 'Edit' : 'Add' }} Subcategories</span>
              </button>
            </div>
            <p v-if="!validation.subCategories.valid" class="form-error">
              {{ validation.subCategories.message }}
            </p>
            <p v-else class="form-helper">
              Add up to 5 subcategories to describe your event better
            </p>
          </div>

          <div class="form-group">
            <label for="description" class="form-label">Event Description</label>
            <textarea
              id="description"
              v-model="form.description"
              class="form-textarea"
              :class="{ 'form-input--error': !validation.description.valid }"
              placeholder="Tell people what makes your event special..."
              rows="5"
            ></textarea>
            <p v-if="!validation.description.valid" class="form-error">
              {{ validation.description.message }}
            </p>
            <p v-else class="form-helper">Tell people what will happen at your event</p>
          </div>

          <div class="form-group">
            <label class="form-label">Event Images</label>
            <div class="image-upload-container">
              <div class="image-upload-row">
                <div
                  class="image-upload-dropzone"
                  :class="{ 'has-image': mainImagePreview }"
                  @click="triggerMainImageUpload"
                  @dragover.prevent
                  @drop.prevent="handleMainImageDrop"
                >
                  <img
                    v-if="mainImagePreview"
                    :src="mainImagePreview"
                    alt="Main image preview"
                    class="preview-image"
                  />
                  <div v-if="mainImagePreview" class="image-overlay">
                    <button type="button" class="remove-image-btn" @click.stop="removeMainImage">
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                      <span>Remove</span>
                    </button>
                  </div>
                  <div v-else class="upload-placeholder">
                    <div class="upload-icon">
                      <svg
                        width="32"
                        height="32"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <rect
                          x="3"
                          y="3"
                          width="18"
                          height="18"
                          rx="2"
                          stroke="currentColor"
                          stroke-width="1.5"
                        />
                        <path
                          d="M3 16L7 12C7.94 11.06 9.44 11.06 10.38 12L16.5 18"
                          stroke="currentColor"
                          stroke-width="1.5"
                          stroke-linecap="round"
                        />
                        <path
                          d="M14 16L16 14C16.94 13.06 18.44 13.06 19.38 14L21 15.5"
                          stroke="currentColor"
                          stroke-width="1.5"
                          stroke-linecap="round"
                        />
                        <circle cx="9" cy="8" r="2" stroke="currentColor" stroke-width="1.5" />
                      </svg>
                    </div>
                    <div class="upload-text">
                      <span class="primary-text">Main Event Image</span>
                      <span class="secondary-text">Drag & drop or click to upload</span>
                    </div>
                  </div>
                </div>

                <div
                  class="image-upload-dropzone banner-dropzone"
                  :class="{ 'has-image': bannerImagePreview }"
                  @click="triggerBannerImageUpload"
                  @dragover.prevent
                  @drop.prevent="handleBannerImageDrop"
                >
                  <img
                    v-if="bannerImagePreview"
                    :src="bannerImagePreview"
                    alt="Banner image preview"
                    class="preview-image"
                  />
                  <div v-if="bannerImagePreview" class="image-overlay">
                    <button type="button" class="remove-image-btn" @click.stop="removeBannerImage">
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                      <span>Remove</span>
                    </button>
                  </div>
                  <div v-else class="upload-placeholder">
                    <div class="upload-icon">
                      <svg
                        width="32"
                        height="32"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <rect
                          x="2"
                          y="4"
                          width="20"
                          height="13"
                          rx="2"
                          stroke="currentColor"
                          stroke-width="1.5"
                        />
                        <path
                          d="M2 13L6 9C6.94 8.06 8.44 8.06 9.38 9L15.5 15"
                          stroke="currentColor"
                          stroke-width="1.5"
                          stroke-linecap="round"
                        />
                        <path
                          d="M14 13L16 11C16.94 10.06 18.44 10.06 19.38 11L22 13.5"
                          stroke="currentColor"
                          stroke-width="1.5"
                          stroke-linecap="round"
                        />
                        <circle cx="8" cy="7" r="1.5" stroke="currentColor" stroke-width="1.5" />
                      </svg>
                    </div>
                    <div class="upload-text">
                      <span class="primary-text">Banner Image</span>
                      <span class="secondary-text">Drag & drop or click to upload</span>
                    </div>
                  </div>
                </div>
              </div>

              <div class="image-inputs">
                <input
                  id="mainImage"
                  ref="mainImageInput"
                  type="file"
                  class="image-input"
                  accept="image/*"
                  @change="handleMainImageUpload"
                />
                <input
                  id="bannerImage"
                  ref="bannerImageInput"
                  type="file"
                  class="image-input"
                  accept="image/*"
                  @change="handleBannerImageUpload"
                />
              </div>
            </div>
            <p
              v-if="!validation.mainImage.valid || !validation.bannerImage.valid"
              class="form-error"
            >
              {{
                !validation.mainImage.valid
                  ? validation.mainImage.message
                  : validation.bannerImage.message
              }}
            </p>
            <p v-else class="form-helper">
              Upload images for your event. The main image will appear on cards throughout the site,
              while the banner will be displayed on your event's detail page.
            </p>
          </div>
        </div>

        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Date & Time
          </h2>

          <div class="form-row">
            <div class="form-group">
              <label for="date" class="form-label">Event Date</label>
              <div class="date-picker-wrapper">
                <input
                  id="date"
                  v-model="form.date"
                  type="text"
                  readonly
                  class="form-input date-input"
                  :class="{ 'form-input--error': !validation.date.valid }"
                  :min="today"
                  @click="openDatePicker"
                />
                <div v-if="showDateTip" class="picker-tip">
                  <div class="tip-arrow"></div>
                  <div class="tip-content">
                    <p>Click to open calendar</p>
                    <span>Select a date for your event</span>
                  </div>
                </div>
              </div>
              <p v-if="!validation.date.valid" class="form-error">{{ validation.date.message }}</p>
              <p v-else class="form-helper">Click to open the calendar</p>
            </div>

            <div class="form-group">
              <label for="time" class="form-label">Start Time</label>
              <div class="time-picker-wrapper">
                <input
                  id="time"
                  v-model="form.time"
                  type="text"
                  readonly
                  class="form-input time-input"
                  :class="{ 'form-input--error': !validation.time.valid }"
                  @click="openTimePicker"
                  placeholder="Select a time"
                />
                <div v-if="showTimeTip" class="picker-tip">
                  <div class="tip-arrow"></div>
                  <div class="tip-content">
                    <p>Click to select time</p>
                    <span>Use our easy time selector</span>
                  </div>
                </div>
              </div>
              <p v-if="!validation.time.valid" class="form-error">{{ validation.time.message }}</p>
              <p v-else class="form-helper">Click to open time selector</p>
            </div>
          </div>

          <div class="form-group">
            <label for="duration" class="form-label">Event Duration</label>
            <select id="duration" v-model="form.duration" class="form-select">
              <option value="" disabled>Select duration</option>
              <option v-for="option in durationOptions" :key="option" :value="option">
                {{ option }}
              </option>
            </select>
            <p class="form-helper">Tell people how long your event will last</p>
          </div>
        </div>

        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Location Details
          </h2>

          <div class="form-group">
            <label for="location" class="form-label">Venue Name & Address</label>
            <input
              id="location"
              v-model="form.location"
              type="text"
              class="form-input"
              :class="{ 'form-input--error': !validation.location.valid }"
              placeholder="Where is your event happening?"
            />
            <p v-if="!validation.location.valid" class="form-error">
              {{ validation.location.message }}
            </p>
            <p v-else class="form-helper">Add the full address so people can find your event</p>
          </div>

          <div class="location-map-placeholder">
            <div class="location-map-content">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                <circle cx="12" cy="10" r="3"></circle>
              </svg>
              <p>Maps coming soon</p>
            </div>
          </div>
        </div>

        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Ticket Information
          </h2>

          <div v-if="!validation.ticketTypes.valid" class="form-error ticket-types-error">
            {{ validation.ticketTypes.message }}
          </div>

          <div class="ticket-types-container">
            <div v-for="(ticket, index) in form.ticketTypes" :key="index" class="ticket-type-card">
              <div class="ticket-type-header">
                <h3 class="ticket-type-title">Ticket #{{ index + 1 }}</h3>
                <div class="ticket-type-actions">
                  <button
                    type="button"
                    @click="duplicateTicketType(index)"
                    class="ticket-action-btn ticket-action-duplicate"
                    title="Duplicate ticket"
                  >
                    <svg
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <rect
                        x="9"
                        y="9"
                        width="13"
                        height="13"
                        rx="2"
                        stroke="currentColor"
                        stroke-width="2"
                      />
                      <path
                        d="M5 15H4C2.89543 15 2 14.1046 2 13V4C2 2.89543 2.89543 2 4 2H13C14.1046 2 15 2.89543 15 4V5"
                        stroke="currentColor"
                        stroke-width="2"
                      />
                    </svg>
                  </button>
                  <button
                    type="button"
                    @click="removeTicketType(index)"
                    class="ticket-action-btn ticket-action-remove"
                    title="Remove ticket"
                    :disabled="form.ticketTypes.length <= 1"
                  >
                    <svg
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>

              <div class="form-group">
                <label :for="'ticket-name-' + index" class="form-label">Ticket Name</label>
                <div class="ticket-name-input-wrapper">
                  <input
                    :id="'ticket-name-' + index"
                    v-model="ticket.name"
                    type="text"
                    class="form-input"
                    placeholder="e.g. Early Bird, VIP, General Admission"
                  />
                  <div class="ticket-template-dropdown">
                    <button
                      type="button"
                      class="ticket-template-btn"
                      @click="openTemplateModal(index)"
                    >
                      <span>Templates</span>
                      <svg
                        width="14"
                        height="14"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M6 9L12 15L18 9"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                    <div class="ticket-template-options">
                      <button
                        v-for="template in ticketTemplates"
                        :key="template.name"
                        type="button"
                        class="ticket-template-option"
                        @click="applyTemplate(index, template)"
                      >
                        {{ template.name }}
                      </button>
                    </div>
                  </div>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <label :for="'ticket-price-' + index" class="form-label">Price ($)</label>
                  <input
                    :id="'ticket-price-' + index"
                    v-model.number="ticket.price"
                    type="number"
                    min="0"
                    step="0.01"
                    class="form-input"
                    placeholder="0.00"
                  />
                </div>

                <div class="form-group">
                  <label :for="'ticket-quantity-' + index" class="form-label">Quantity</label>
                  <input
                    :id="'ticket-quantity-' + index"
                    v-model.number="ticket.quantity"
                    type="number"
                    min="1"
                    class="form-input"
                    placeholder="10"
                  />
                </div>
              </div>

              <div class="form-group">
                <label :for="'ticket-description-' + index" class="form-label"
                  >Description (Optional)</label
                >
                <textarea
                  :id="'ticket-description-' + index"
                  v-model="ticket.description"
                  class="form-textarea ticket-description"
                  rows="2"
                  placeholder="Describe what's included with this ticket"
                ></textarea>
              </div>

              <div class="ticket-sales-period">
                <h4 class="ticket-section-subtitle">Sales End Date</h4>
                <p class="ticket-section-helper">
                  Should this ticket type have a deadline? If yes, tell us when sales should stop.
                  This is optional.
                </p>

                <div class="form-row">
                  <div class="form-group">
                    <label :for="'ticket-end-date-' + index" class="form-label">Date</label>
                    <input
                      :id="'ticket-end-date-' + index"
                      v-model="ticket.salesEndDate"
                      type="date"
                      class="form-input"
                      :min="today"
                      :max="form.date"
                    />
                  </div>

                  <div class="form-group">
                    <label :for="'ticket-end-time-' + index" class="form-label">Time</label>
                    <input
                      :id="'ticket-end-time-' + index"
                      v-model="ticket.salesEndTime"
                      type="time"
                      class="form-input"
                    />
                  </div>
                </div>
              </div>

              <div class="form-checkbox-wrapper">
                <input
                  :id="'ticket-featured-' + index"
                  v-model="ticket.isFeatured"
                  type="checkbox"
                  class="form-checkbox"
                />
                <label :for="'ticket-featured-' + index" class="form-checkbox-label">
                  Feature this ticket (highlighted in the ticket selection)
                </label>
              </div>
            </div>

            <button type="button" @click="addTicketType" class="add-ticket-type-btn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M12 5V19"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
                <path
                  d="M5 12H19"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
              <span>Add Another Ticket Type</span>
            </button>
          </div>
        </div>

        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Event Options
          </h2>

          <p class="section-intro">
            Select features and amenities that your event offers to help attendees know what to
            expect.
          </p>

          <div class="event-options-container">
            <div class="event-options-grid">
              <!-- Predefined event options -->
              <div
                v-for="option in predefinedEventOptions"
                :key="'predefined-' + option"
                class="event-option-item"
                @click="toggleEventOption(option)"
              >
                <div
                  class="event-option-checkbox"
                  :class="{ 'event-option-checkbox--selected': isEventOptionSelected(option) }"
                >
                  <div class="event-option-label">{{ option }}</div>
                  <svg
                    v-if="isEventOptionSelected(option)"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                    class="event-option-checkmark"
                  >
                    <path
                      d="M20 6L9 17L4 12"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                </div>
              </div>

              <!-- Custom event options -->
              <div
                v-for="(option, index) in form.customEventOptions"
                :key="'custom-' + index"
                class="event-option-item"
              >
                <div class="event-option-checkbox event-option-checkbox--selected">
                  <div class="event-option-label">{{ option }}</div>
                  <button
                    type="button"
                    @click="removeCustomEventOption(index)"
                    class="remove-option-btn"
                    aria-label="Remove option"
                  >
                    <svg
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>
            </div>

            <div class="add-event-option">
              <div class="custom-event-option-input">
                <input
                  type="text"
                  v-model="newCustomEventOption"
                  placeholder="Add your own event option..."
                  class="form-input custom-option-input"
                  @keyup.enter="addCustomEventOption"
                />
                <button
                  type="button"
                  class="add-custom-option-btn"
                  @click="addCustomEventOption"
                  :disabled="!newCustomEventOption.trim()"
                >
                  Add
                </button>
              </div>
            </div>
          </div>

          <div class="form-checkbox-wrapper mt-4">
            <input id="featured" v-model="form.featured" type="checkbox" class="form-checkbox" />
            <label for="featured" class="form-checkbox-label">
              Feature this event (additional promotion fee may apply)
            </label>
          </div>
          <p class="form-helper">Featured events show up on the homepage</p>
        </div>

        <!-- Add new FAQ section -->
        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Frequently Asked Questions
            <span class="section-optional">(Optional)</span>
          </h2>

          <p class="section-intro">
            Help attendees by answering common questions about your event. You can edit these
            defaults or add your own.
          </p>

          <div class="faq-container">
            <div v-for="(faq, index) in form.faqs" :key="index" class="faq-item">
              <div class="faq-header">
                <h3 class="faq-number">Q{{ index + 1 }}</h3>
                <div class="faq-actions">
                  <button
                    type="button"
                    @click="removeFaq(index)"
                    class="faq-action-btn faq-action-remove"
                    title="Remove question"
                  >
                    <svg
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>

              <div class="faq-content">
                <div class="form-group">
                  <label :for="'faq-question-' + index" class="form-label">Question</label>
                  <input
                    :id="'faq-question-' + index"
                    v-model="faq.question"
                    type="text"
                    class="form-input"
                    placeholder="Enter a question guests might ask"
                  />
                </div>

                <div class="form-group">
                  <label :for="'faq-answer-' + index" class="form-label">Answer</label>
                  <textarea
                    :id="'faq-answer-' + index"
                    v-model="faq.answer"
                    class="form-textarea faq-answer"
                    rows="3"
                    placeholder="Provide a clear answer to the question"
                  ></textarea>
                </div>
              </div>
            </div>

            <button type="button" @click="addFaq" class="add-faq-btn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M12 5V19"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
                <path
                  d="M5 12H19"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
              <span>Add Another Question</span>
            </button>
          </div>
        </div>

        <div class="form-actions">
          <button type="button" @click="resetForm" class="btn-secondary" :disabled="isSubmitting">
            Reset Form
          </button>
          <button type="submit" class="btn-primary" :disabled="isSubmitting">
            <span v-if="isSubmitting">
              <svg class="spinner" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <circle cx="12" cy="12" r="10" fill="none" stroke-width="3" />
              </svg>
              Creating Event...
            </span>
            <span v-else>Create Event</span>
          </button>
        </div>
      </form>

      <div class="create-event__note">
        <p>
          <strong>Note:</strong> Your event data is saved locally for now. Online saving coming
          soon.
        </p>
      </div>
    </div>

    <div
      v-if="showTemplateModal"
      class="ticket-template-modal-overlay"
      @click.self="closeTemplateModal"
    >
      <div class="ticket-template-modal">
        <div class="ticket-template-modal-header">
          <h3>Choose a Ticket Template</h3>
          <button @click="closeTemplateModal" class="modal-close-btn" aria-label="Close">
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18 6L6 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M6 6L18 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </div>
        <div class="ticket-template-modal-body">
          <div
            v-for="template in ticketTemplates"
            :key="template.name"
            class="template-card"
            @click="applyTemplateFromModal(activeTicketIndex, template)"
          >
            <div class="template-card-content">
              <h4 class="template-name">{{ template.name }}</h4>
              <p class="template-description">{{ template.description }}</p>
            </div>
            <div class="template-card-icon">
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M20 6L9 17L4 12"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Add subcategory modal -->
    <div
      v-if="showSubCategoryModal"
      class="subcategory-modal-overlay"
      @click.self="closeSubCategoryModal"
    >
      <div class="subcategory-modal">
        <div class="subcategory-modal-header">
          <h3>Select or Add Subcategories</h3>
          <button @click="closeSubCategoryModal" class="modal-close-btn" aria-label="Close">
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18 6L6 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M6 6L18 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </div>
        <div class="subcategory-modal-body">
          <p class="subcategory-modal-info">Select up to 5 subcategories or add your own</p>

          <div class="subcategory-search">
            <input
              type="text"
              v-model="subcategorySearchTerm"
              placeholder="Search subcategories..."
              class="subcategory-search-input"
            />
          </div>

          <div class="subcategory-options">
            <div class="subcategory-section">
              <h4 class="subcategory-section-title">Available Subcategories</h4>
              <div class="subcategory-chips">
                <div
                  v-for="subCategory in filteredSubCategories"
                  :key="subCategory.id"
                  class="subcategory-chip"
                  :class="{ 'subcategory-chip--selected': isSubCategorySelected(subCategory.id) }"
                  @click="toggleSubCategory(subCategory.id)"
                >
                  <span>{{ subCategory.name }}</span>
                  <svg
                    v-if="isSubCategorySelected(subCategory.id)"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M20 6L9 17L4 12"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                </div>
              </div>
            </div>

            <div class="subcategory-section">
              <h4 class="subcategory-section-title">Custom Subcategories</h4>
              <div class="custom-subcategory-input">
                <input
                  type="text"
                  v-model="newCustomSubCategory"
                  placeholder="Enter your own subcategory..."
                  class="form-input custom-input"
                  @keyup.enter="addCustomSubCategory"
                />
                <button
                  type="button"
                  class="add-custom-btn"
                  @click="addCustomSubCategory"
                  :disabled="!newCustomSubCategory.trim()"
                >
                  Add
                </button>
              </div>

              <div class="subcategory-chips custom-chips">
                <div
                  v-for="(custom, index) in customSubCategories"
                  :key="'custom-' + index"
                  class="subcategory-chip subcategory-chip--custom"
                >
                  <span>{{ custom }}</span>
                  <button
                    class="remove-custom-btn"
                    @click="removeCustomSubCategory(index)"
                    aria-label="Remove"
                  >
                    <svg
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          </div>

          <div class="subcategory-modal-footer">
            <div class="subcategory-summary">
              <span class="subcategory-count">{{ selectedSubCategoriesCount }}/5 selected</span>
            </div>
            <div class="subcategory-actions">
              <button type="button" class="btn-secondary" @click="closeSubCategoryModal">
                Cancel
              </button>
              <button type="button" class="btn-primary" @click="confirmSubCategories">Apply</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Custom Time Picker Modal -->
    <div v-if="isTimePickerOpen" class="time-picker-overlay" @click.self="closeTimePicker">
      <div class="time-picker-modal">
        <div class="time-picker-header">
          <h3>Select Time</h3>
          <button type="button" class="time-picker-close" @click="closeTimePicker">
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18 6L6 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M6 6L18 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </div>
        <div class="time-picker-body">
          <!-- Custom time input -->
          <div class="custom-time-input">
            <div class="time-input-group">
              <input
                type="text"
                v-model="customHours"
                class="time-input-field"
                maxlength="2"
                @focus="$event.target.select()"
                @blur="formatTimeInputs"
                @keydown="handleTimeInput"
                placeholder="HH"
              />
              <span class="time-divider">:</span>
              <input
                type="text"
                v-model="customMinutes"
                class="time-input-field"
                maxlength="2"
                @focus="$event.target.select()"
                @blur="formatTimeInputs"
                @keydown="handleTimeInput"
                placeholder="MM"
              />
            </div>
          </div>

          <div class="time-picker-grid">
            <div
              v-for="time in timeOptions"
              :key="time"
              class="time-option"
              :class="{ selected: selectedTime === time }"
              @click="selectTime(time)"
            >
              {{ time }}
            </div>
          </div>
          <div class="time-period-selector">
            <button
              type="button"
              class="time-period-btn"
              :class="{ selected: selectedPeriod === 'AM' }"
              @click="selectPeriod('AM')"
            >
              AM
            </button>
            <button
              type="button"
              class="time-period-btn"
              :class="{ selected: selectedPeriod === 'PM' }"
              @click="selectPeriod('PM')"
            >
              PM
            </button>
          </div>
        </div>
        <div class="time-picker-actions">
          <button type="button" class="time-picker-btn time-picker-cancel" @click="closeTimePicker">
            Cancel
          </button>
          <button
            type="button"
            class="time-picker-btn time-picker-apply"
            @click="applyTimeSelection"
          >
            Apply
          </button>
        </div>
      </div>
    </div>

    <!-- Custom Date Picker Modal -->
    <div v-if="isDatePickerOpen" class="date-picker-overlay" @click.self="closeDatePicker">
      <div class="date-picker-modal">
        <div class="date-picker-header">
          <h3>Select Date</h3>
          <button type="button" class="date-picker-close" @click="closeDatePicker">
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18 6L6 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M6 6L18 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </div>
        <div class="date-picker-body">
          <div class="date-picker-month-nav">
            <button class="month-nav-btn" @click="previousMonth">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M15 18L9 12L15 6"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </button>
            <div class="month-display">{{ monthNames[currentMonth] }} {{ currentYear }}</div>
            <button class="month-nav-btn" @click="nextMonth">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M9 18L15 12L9 6"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </button>
          </div>

          <div class="date-picker-weekdays">
            <div class="weekday" v-for="day in weekdays" :key="day">{{ day }}</div>
          </div>

          <div class="date-picker-days">
            <div
              v-for="(day, index) in calendarDays"
              :key="index"
              class="calendar-day"
              :class="{
                'other-month': !day.inCurrentMonth,
                today: day.isToday,
                selected: day.isSelected,
                disabled: day.isDisabled,
              }"
              @click="!day.isDisabled && selectDate(day.date)"
            >
              {{ day.day }}
            </div>
          </div>
        </div>
        <div class="date-picker-actions">
          <button type="button" class="date-picker-btn date-picker-cancel" @click="closeDatePicker">
            Cancel
          </button>
          <button
            type="button"
            class="date-picker-btn date-picker-apply"
            @click="applyDateSelection"
          >
            Apply
          </button>
        </div>
      </div>
    </div>
  </div>


  <div class="create-event">
    <div class="container">
      <router-link to="/" class="back-link">
        <span class="arrow-icon">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="feather feather-arrow-left"
          >
            <line x1="19" y1="12" x2="5" y2="12"></line>
            <polyline points="12 19 5 12 12 5"></polyline>
          </svg>
        </span>
        <span class="back-text">Back</span>
      </router-link>

      <h1 class="page-title">Create Event</h1>

      <div class="form-section">
        <h2 class="section-title">
          <span class="diamond"></span>
          Basic Information
        </h2>

        <div class="form-group">
          <label for="title">Event Title</label>
          <input
            type="text"
            id="title"
            v-model="form.title"
            @input="validateTitle"
            :class="{ invalid: !validation.title.valid }"
          />
          <span class="helper-text">Enter a descriptive title for your event</span>
          <span class="error-message" v-if="!validation.title.valid">{{
            validation.title.message
          }}</span>
        </div>

        <div class="form-group">
          <label for="organizer">Organizer Name</label>
          <input
            type="text"
            id="organizer"
            v-model="form.organizer"
            @input="validateOrganizer"
            :class="{ invalid: !validation.organizer.valid }"
          />
          <span class="helper-text">Enter the name of the organizer or company</span>
          <span class="error-message" v-if="!validation.organizer.valid">{{
            validation.organizer.message
          }}</span>
        </div>

        <div class="form-group">
          <template>
            <div class="create-event">
              <div class="container">
                <router-link to="/" class="back-link">
                  <svg
                    width="20"
                    height="20"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M19 12H5"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                    <path
                      d="M12 19L5 12L12 5"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                  <span>BACK</span>
                </router-link>

                <div class="create-event__header">
                  <h1 class="create-event__title">Make Your Event dYZ%</h1>
                  <p class="create-event__subtitle">
                    Fill out this form to create your event - it's easy!
                  </p>
                  <button type="button" @click="prefillForm" class="prefill-button">
                    Prefill with Test Data
                  </button>
                </div>

                <div v-if="error" class="create-event__alert create-event__alert--error">
                  {{ error }}
                </div>

                <div v-if="success" class="create-event__alert create-event__alert--success">
                  Event created successfully! Redirecting to event page...
                </div>

                <form @submit.prevent="handleSubmit" class="create-event__form">
                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Event Information
                    </h2>

                    <div class="form-group">
                      <label for="title" class="form-label">Event Name</label>
                      <input
                        id="title"
                        v-model="form.title"
                        type="text"
                        class="form-input"
                        :class="{ 'form-input--error': !validation.title.valid }"
                        placeholder="What's your event called?"
                      />
                      <p v-if="!validation.title.valid" class="form-error">
                        {{ validation.title.message }}
                      </p>
                      <p v-else class="form-helper">
                        Name it something people will understand right away
                      </p>
                    </div>

                    <div class="form-group">
                      <label for="organizer" class="form-label">Organizer Name</label>
                      <input
                        id="organizer"
                        v-model="form.organizer"
                        type="text"
                        class="form-input"
                        :class="{ 'form-input--error': !validation.organizer.valid }"
                        placeholder="Who's hosting this?"
                      />
                      <p v-if="!validation.organizer.valid" class="form-error">
                        {{ validation.organizer.message }}
                      </p>
                    </div>

                    <div class="form-group">
                      <label for="category" class="form-label">Event Category</label>
                      <select
                        id="category"
                        v-model="form.category"
                        class="form-select"
                        :class="{ 'form-input--error': !validation.category.valid }"
                      >
                        <option value="" disabled>Select a category</option>
                        <option
                          v-for="category in categories"
                          :key="category.id"
                          :value="category.id"
                        >
                          {{ category.name }}
                        </option>
                      </select>
                      <p v-if="!validation.category.valid" class="form-error">
                        {{ validation.category.message }}
                      </p>
                      <p v-else class="form-helper">
                        The right category helps people find your event
                      </p>
                    </div>

                    <div class="form-group">
                      <label class="form-label">Sub Categories</label>
                      <div class="subcategories-display">
                        <div class="selected-subcategories">
                          <div v-if="displayedSubCategories.length === 0" class="no-subcategories">
                            No subcategories selected
                          </div>
                          <div
                            v-for="(subCat, index) in displayedSubCategories"
                            :key="index"
                            class="selected-subcategory"
                          >
                            <span>{{ getSubCategoryName(subCat) }}</span>
                            <button
                              type="button"
                              @click="removeSubCategoryById(subCat)"
                              class="remove-subcategory-btn"
                              aria-label="Remove subcategory"
                            >
                              <svg
                                width="14"
                                height="14"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M18 6L6 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                                <path
                                  d="M6 6L18 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>
                        <button
                          type="button"
                          @click="openSubCategoryModal"
                          class="manage-subcategories-btn"
                          :disabled="form.category === ''"
                        >
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 5V19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                            <path
                              d="M5 12H19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                          <span
                            >{{
                              displayedSubCategories.length ? 'Edit' : 'Add'
                            }}
                            Subcategories</span
                          >
                        </button>
                      </div>
                      <p v-if="!validation.subCategories.valid" class="form-error">
                        {{ validation.subCategories.message }}
                      </p>
                      <p v-else class="form-helper">
                        Add up to 5 subcategories to describe your event better
                      </p>
                    </div>

                    <div class="form-group">
                      <label for="description" class="form-label">Event Description</label>
                      <textarea
                        id="description"
                        v-model="form.description"
                        class="form-textarea"
                        :class="{ 'form-input--error': !validation.description.valid }"
                        placeholder="Tell people what makes your event special..."
                        rows="5"
                      ></textarea>
                      <p v-if="!validation.description.valid" class="form-error">
                        {{ validation.description.message }}
                      </p>
                      <p v-else class="form-helper">Tell people what will happen at your event</p>
                    </div>

                    <div class="form-group">
                      <label class="form-label">Event Images</label>
                      <div class="image-upload-container">
                        <div class="image-upload-row">
                          <div
                            class="image-upload-dropzone"
                            :class="{ 'has-image': mainImagePreview }"
                            @click="triggerMainImageUpload"
                            @dragover.prevent
                            @drop.prevent="handleMainImageDrop"
                          >
                            <img
                              v-if="mainImagePreview"
                              :src="mainImagePreview"
                              alt="Main image preview"
                              class="preview-image"
                            />
                            <div v-if="mainImagePreview" class="image-overlay">
                              <button
                                type="button"
                                class="remove-image-btn"
                                @click.stop="removeMainImage"
                              >
                                <svg
                                  width="20"
                                  height="20"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                                <span>Remove</span>
                              </button>
                            </div>
                            <div v-else class="upload-placeholder">
                              <div class="upload-icon">
                                <svg
                                  width="32"
                                  height="32"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <rect
                                    x="3"
                                    y="3"
                                    width="18"
                                    height="18"
                                    rx="2"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                  />
                                  <path
                                    d="M3 16L7 12C7.94 11.06 9.44 11.06 10.38 12L16.5 18"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                    stroke-linecap="round"
                                  />
                                  <path
                                    d="M14 16L16 14C16.94 13.06 18.44 13.06 19.38 14L21 15.5"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                    stroke-linecap="round"
                                  />
                                  <circle
                                    cx="9"
                                    cy="8"
                                    r="2"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                  />
                                </svg>
                              </div>
                              <div class="upload-text">
                                <span class="primary-text">Main Event Image</span>
                                <span class="secondary-text">Drag & drop or click to upload</span>
                              </div>
                            </div>
                          </div>

                          <div
                            class="image-upload-dropzone banner-dropzone"
                            :class="{ 'has-image': bannerImagePreview }"
                            @click="triggerBannerImageUpload"
                            @dragover.prevent
                            @drop.prevent="handleBannerImageDrop"
                          >
                            <img
                              v-if="bannerImagePreview"
                              :src="bannerImagePreview"
                              alt="Banner image preview"
                              class="preview-image"
                            />
                            <div v-if="bannerImagePreview" class="image-overlay">
                              <button
                                type="button"
                                class="remove-image-btn"
                                @click.stop="removeBannerImage"
                              >
                                <svg
                                  width="20"
                                  height="20"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                                <span>Remove</span>
                              </button>
                            </div>
                            <div v-else class="upload-placeholder">
                              <div class="upload-icon">
                                <svg
                                  width="32"
                                  height="32"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <rect
                                    x="2"
                                    y="4"
                                    width="20"
                                    height="13"
                                    rx="2"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                  />
                                  <path
                                    d="M2 13L6 9C6.94 8.06 8.44 8.06 9.38 9L15.5 15"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                    stroke-linecap="round"
                                  />
                                  <path
                                    d="M14 13L16 11C16.94 10.06 18.44 10.06 19.38 11L22 13.5"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                    stroke-linecap="round"
                                  />
                                  <circle
                                    cx="8"
                                    cy="7"
                                    r="1.5"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                  />
                                </svg>
                              </div>
                              <div class="upload-text">
                                <span class="primary-text">Banner Image</span>
                                <span class="secondary-text">Drag & drop or click to upload</span>
                              </div>
                            </div>
                          </div>
                        </div>

                        <div class="image-inputs">
                          <input
                            id="mainImage"
                            ref="mainImageInput"
                            type="file"
                            class="image-input"
                            accept="image/*"
                            @change="handleMainImageUpload"
                          />
                          <input
                            id="bannerImage"
                            ref="bannerImageInput"
                            type="file"
                            class="image-input"
                            accept="image/*"
                            @change="handleBannerImageUpload"
                          />
                        </div>
                      </div>
                      <p
                        v-if="!validation.mainImage.valid || !validation.bannerImage.valid"
                        class="form-error"
                      >
                        {{
                          !validation.mainImage.valid
                            ? validation.mainImage.message
                            : validation.bannerImage.message
                        }}
                      </p>
                      <p v-else class="form-helper">
                        Upload images for your event. The main image will appear on cards throughout
                        the site, while the banner will be displayed on your event's detail page.
                      </p>
                    </div>
                  </div>

                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Date & Time
                    </h2>

                    <div class="form-row">
                      <div class="form-group">
                        <label for="date" class="form-label">Event Date</label>
                        <div class="date-picker-wrapper">
                          <input
                            id="date"
                            v-model="form.date"
                            type="text"
                            readonly
                            class="form-input date-input"
                            :class="{ 'form-input--error': !validation.date.valid }"
                            :min="today"
                            @click="openDatePicker"
                          />
                          <div v-if="showDateTip" class="picker-tip">
                            <div class="tip-arrow"></div>
                            <div class="tip-content">
                              <p>Click to open calendar</p>
                              <span>Select a date for your event</span>
                            </div>
                          </div>
                        </div>
                        <p v-if="!validation.date.valid" class="form-error">
                          {{ validation.date.message }}
                        </p>
                        <p v-else class="form-helper">Click to open the calendar</p>
                      </div>

                      <div class="form-group">
                        <label for="time" class="form-label">Start Time</label>
                        <div class="time-picker-wrapper">
                          <input
                            id="time"
                            v-model="form.time"
                            type="text"
                            readonly
                            class="form-input time-input"
                            :class="{ 'form-input--error': !validation.time.valid }"
                            @click="openTimePicker"
                            placeholder="Select a time"
                          />
                          <div v-if="showTimeTip" class="picker-tip">
                            <div class="tip-arrow"></div>
                            <div class="tip-content">
                              <p>Click to select time</p>
                              <span>Use our easy time selector</span>
                            </div>
                          </div>
                        </div>
                        <p v-if="!validation.time.valid" class="form-error">
                          {{ validation.time.message }}
                        </p>
                        <p v-else class="form-helper">Click to open time selector</p>
                      </div>
                    </div>

                    <div class="form-group">
                      <label for="duration" class="form-label">Event Duration</label>
                      <select id="duration" v-model="form.duration" class="form-select">
                        <option value="" disabled>Select duration</option>
                        <option v-for="option in durationOptions" :key="option" :value="option">
                          {{ option }}
                        </option>
                      </select>
                      <p class="form-helper">Tell people how long your event will last</p>
                    </div>
                  </div>

                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Location Details
                    </h2>

                    <div class="form-group">
                      <label for="location" class="form-label">Venue Name & Address</label>
                      <input
                        id="location"
                        v-model="form.location"
                        type="text"
                        class="form-input"
                        :class="{ 'form-input--error': !validation.location.valid }"
                        placeholder="Where is your event happening?"
                      />
                      <p v-if="!validation.location.valid" class="form-error">
                        {{ validation.location.message }}
                      </p>
                      <p v-else class="form-helper">
                        Add the full address so people can find your event
                      </p>
                    </div>

                    <div class="location-map-placeholder">
                      <div class="location-map-content">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="24"
                          height="24"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        >
                          <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                          <circle cx="12" cy="10" r="3"></circle>
                        </svg>
                        <p>Maps coming soon</p>
                      </div>
                    </div>
                  </div>

                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Ticket Information
                    </h2>

                    <div v-if="!validation.ticketTypes.valid" class="form-error ticket-types-error">
                      {{ validation.ticketTypes.message }}
                    </div>

                    <div class="ticket-types-container">
                      <div
                        v-for="(ticket, index) in form.ticketTypes"
                        :key="index"
                        class="ticket-type-card"
                      >
                        <div class="ticket-type-header">
                          <h3 class="ticket-type-title">Ticket #{{ index + 1 }}</h3>
                          <div class="ticket-type-actions">
                            <button
                              type="button"
                              @click="duplicateTicketType(index)"
                              class="ticket-action-btn ticket-action-duplicate"
                              title="Duplicate ticket"
                            >
                              <svg
                                width="16"
                                height="16"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <rect
                                  x="9"
                                  y="9"
                                  width="13"
                                  height="13"
                                  rx="2"
                                  stroke="currentColor"
                                  stroke-width="2"
                                />
                                <path
                                  d="M5 15H4C2.89543 15 2 14.1046 2 13V4C2 2.89543 2.89543 2 4 2H13C14.1046 2 15 2.89543 15 4V5"
                                  stroke="currentColor"
                                  stroke-width="2"
                                />
                              </svg>
                            </button>
                            <button
                              type="button"
                              @click="removeTicketType(index)"
                              class="ticket-action-btn ticket-action-remove"
                              title="Remove ticket"
                              :disabled="form.ticketTypes.length <= 1"
                            >
                              <svg
                                width="16"
                                height="16"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M18 6L6 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                                <path
                                  d="M6 6L18 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>

                        <div class="form-group">
                          <label :for="'ticket-name-' + index" class="form-label"
                            >Ticket Name</label
                          >
                          <div class="ticket-name-input-wrapper">
                            <input
                              :id="'ticket-name-' + index"
                              v-model="ticket.name"
                              type="text"
                              class="form-input"
                              placeholder="e.g. Early Bird, VIP, General Admission"
                            />
                            <div class="ticket-template-dropdown">
                              <button
                                type="button"
                                class="ticket-template-btn"
                                @click="openTemplateModal(index)"
                              >
                                <span>Templates</span>
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M6 9L12 15L18 9"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                              <div class="ticket-template-options">
                                <button
                                  v-for="template in ticketTemplates"
                                  :key="template.name"
                                  type="button"
                                  class="ticket-template-option"
                                  @click="applyTemplate(index, template)"
                                >
                                  {{ template.name }}
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>

                        <div class="form-row">
                          <div class="form-group">
                            <label :for="'ticket-price-' + index" class="form-label"
                              >Price ($)</label
                            >
                            <input
                              :id="'ticket-price-' + index"
                              v-model.number="ticket.price"
                              type="number"
                              min="0"
                              step="0.01"
                              class="form-input"
                              placeholder="0.00"
                            />
                          </div>

                          <div class="form-group">
                            <label :for="'ticket-quantity-' + index" class="form-label"
                              >Quantity</label
                            >
                            <input
                              :id="'ticket-quantity-' + index"
                              v-model.number="ticket.quantity"
                              type="number"
                              min="1"
                              class="form-input"
                              placeholder="10"
                            />
                          </div>
                        </div>

                        <div class="form-group">
                          <label :for="'ticket-description-' + index" class="form-label"
                            >Description (Optional)</label
                          >
                          <textarea
                            :id="'ticket-description-' + index"
                            v-model="ticket.description"
                            class="form-textarea ticket-description"
                            rows="2"
                            placeholder="Describe what's included with this ticket"
                          ></textarea>
                        </div>

                        <div class="ticket-sales-period">
                          <h4 class="ticket-section-subtitle">Sales End Date</h4>
                          <p class="ticket-section-helper">
                            Should this ticket type have a deadline? If yes, tell us when sales
                            should stop. This is optional.
                          </p>

                          <div class="form-row">
                            <div class="form-group">
                              <label :for="'ticket-end-date-' + index" class="form-label"
                                >Date</label
                              >
                              <input
                                :id="'ticket-end-date-' + index"
                                v-model="ticket.salesEndDate"
                                type="date"
                                class="form-input"
                                :min="today"
                                :max="form.date"
                              />
                            </div>

                            <div class="form-group">
                              <label :for="'ticket-end-time-' + index" class="form-label"
                                >Time</label
                              >
                              <input
                                :id="'ticket-end-time-' + index"
                                v-model="ticket.salesEndTime"
                                type="time"
                                class="form-input"
                              />
                            </div>
                          </div>
                        </div>

                        <div class="form-checkbox-wrapper">
                          <input
                            :id="'ticket-featured-' + index"
                            v-model="ticket.isFeatured"
                            type="checkbox"
                            class="form-checkbox"
                          />
                          <label :for="'ticket-featured-' + index" class="form-checkbox-label">
                            Feature this ticket (highlighted in the ticket selection)
                          </label>
                        </div>
                      </div>

                      <button type="button" @click="addTicketType" class="add-ticket-type-btn">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M12 5V19"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M5 12H19"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                        <span>Add Another Ticket Type</span>
                      </button>
                    </div>
                  </div>

                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Event Options
                    </h2>

                    <p class="section-intro">
                      Select features and amenities that your event offers to help attendees know
                      what to expect.
                    </p>

                    <div class="event-options-container">
                      <div class="event-options-grid">
                        <!-- Predefined event options -->
                        <div
                          v-for="option in predefinedEventOptions"
                          :key="'predefined-' + option"
                          class="event-option-item"
                          @click="toggleEventOption(option)"
                        >
                          <div
                            class="event-option-checkbox"
                            :class="{
                              'event-option-checkbox--selected': isEventOptionSelected(option),
                            }"
                          >
                            <div class="event-option-label">{{ option }}</div>
                            <svg
                              v-if="isEventOptionSelected(option)"
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                              class="event-option-checkmark"
                            >
                              <path
                                d="M20 6L9 17L4 12"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                              />
                            </svg>
                          </div>
                        </div>

                        <!-- Custom event options -->
                        <div
                          v-for="(option, index) in form.customEventOptions"
                          :key="'custom-' + index"
                          class="event-option-item"
                        >
                          <div class="event-option-checkbox event-option-checkbox--selected">
                            <div class="event-option-label">{{ option }}</div>
                            <button
                              type="button"
                              @click="removeCustomEventOption(index)"
                              class="remove-option-btn"
                              aria-label="Remove option"
                            >
                              <svg
                                width="14"
                                height="14"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M18 6L6 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                                <path
                                  d="M6 6L18 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>
                      </div>

                      <div class="add-event-option">
                        <div class="custom-event-option-input">
                          <input
                            type="text"
                            v-model="newCustomEventOption"
                            placeholder="Add your own event option..."
                            class="form-input custom-option-input"
                            @keyup.enter="addCustomEventOption"
                          />
                          <button
                            type="button"
                            class="add-custom-option-btn"
                            @click="addCustomEventOption"
                            :disabled="!newCustomEventOption.trim()"
                          >
                            Add
                          </button>
                        </div>
                      </div>
                    </div>

                    <div class="form-checkbox-wrapper mt-4">
                      <input
                        id="featured"
                        v-model="form.featured"
                        type="checkbox"
                        class="form-checkbox"
                      />
                      <label for="featured" class="form-checkbox-label">
                        Feature this event (additional promotion fee may apply)
                      </label>
                    </div>
                    <p class="form-helper">Featured events show up on the homepage</p>
                  </div>

                  <!-- Add new FAQ section -->
                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Frequently Asked Questions
                      <span class="section-optional">(Optional)</span>
                    </h2>

                    <p class="section-intro">
                      Help attendees by answering common questions about your event. You can edit
                      these defaults or add your own.
                    </p>

                    <div class="faq-container">
                      <div v-for="(faq, index) in form.faqs" :key="index" class="faq-item">
                        <div class="faq-header">
                          <h3 class="faq-number">Q{{ index + 1 }}</h3>
                          <div class="faq-actions">
                            <button
                              type="button"
                              @click="removeFaq(index)"
                              class="faq-action-btn faq-action-remove"
                              title="Remove question"
                            >
                              <svg
                                width="14"
                                height="14"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M18 6L6 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                                <path
                                  d="M6 6L18 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>

                        <div class="faq-content">
                          <div class="form-group">
                            <label :for="'faq-question-' + index" class="form-label"
                              >Question</label
                            >
                            <input
                              :id="'faq-question-' + index"
                              v-model="faq.question"
                              type="text"
                              class="form-input"
                              placeholder="Enter a question guests might ask"
                            />
                          </div>

                          <div class="form-group">
                            <label :for="'faq-answer-' + index" class="form-label">Answer</label>
                            <textarea
                              :id="'faq-answer-' + index"
                              v-model="faq.answer"
                              class="form-textarea faq-answer"
                              rows="3"
                              placeholder="Provide a clear answer to the question"
                            ></textarea>
                          </div>
                        </div>
                      </div>

                      <button type="button" @click="addFaq" class="add-faq-btn">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M12 5V19"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M5 12H19"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                        <span>Add Another Question</span>
                      </button>
                    </div>
                  </div>

                  <div class="form-actions">
                    <button
                      type="button"
                      @click="resetForm"
                      class="btn-secondary"
                      :disabled="isSubmitting"
                    >
                      Reset Form
                    </button>
                    <button type="submit" class="btn-primary" :disabled="isSubmitting">
                      <span v-if="isSubmitting">
                        <svg class="spinner" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <circle cx="12" cy="12" r="10" fill="none" stroke-width="3" />
                        </svg>
                        Creating Event...
                      </span>
                      <span v-else>Create Event</span>
                    </button>
                  </div>
                </form>

                <div class="create-event__note">
                  <p>
                    <strong>Note:</strong> Your event data is saved locally for now. Online saving
                    coming soon.
                  </p>
                </div>
              </div>

              <div
                v-if="showTemplateModal"
                class="ticket-template-modal-overlay"
                @click.self="closeTemplateModal"
              >
                <div class="ticket-template-modal">
                  <div class="ticket-template-modal-header">
                    <h3>Choose a Ticket Template</h3>
                    <button @click="closeTemplateModal" class="modal-close-btn" aria-label="Close">
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                  </div>
                  <div class="ticket-template-modal-body">
                    <div
                      v-for="template in ticketTemplates"
                      :key="template.name"
                      class="template-card"
                      @click="applyTemplateFromModal(activeTicketIndex, template)"
                    >
                      <div class="template-card-content">
                        <h4 class="template-name">{{ template.name }}</h4>
                        <p class="template-description">{{ template.description }}</p>
                      </div>
                      <div class="template-card-icon">
                        <svg
                          width="24"
                          height="24"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M20 6L9 17L4 12"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Add subcategory modal -->
              <div
                v-if="showSubCategoryModal"
                class="subcategory-modal-overlay"
                @click.self="closeSubCategoryModal"
              >
                <div class="subcategory-modal">
                  <div class="subcategory-modal-header">
                    <h3>Select or Add Subcategories</h3>
                    <button
                      @click="closeSubCategoryModal"
                      class="modal-close-btn"
                      aria-label="Close"
                    >
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                  </div>
                  <div class="subcategory-modal-body">
                    <p class="subcategory-modal-info">
                      Select up to 5 subcategories or add your own
                    </p>

                    <div class="subcategory-search">
                      <input
                        type="text"
                        v-model="subcategorySearchTerm"
                        placeholder="Search subcategories..."
                        class="subcategory-search-input"
                      />
                    </div>

                    <div class="subcategory-options">
                      <div class="subcategory-section">
                        <h4 class="subcategory-section-title">Available Subcategories</h4>
                        <div class="subcategory-chips">
                          <div
                            v-for="subCategory in filteredSubCategories"
                            :key="subCategory.id"
                            class="subcategory-chip"
                            :class="{
                              'subcategory-chip--selected': isSubCategorySelected(subCategory.id),
                            }"
                            @click="toggleSubCategory(subCategory.id)"
                          >
                            <span>{{ subCategory.name }}</span>
                            <svg
                              v-if="isSubCategorySelected(subCategory.id)"
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M20 6L9 17L4 12"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                              />
                            </svg>
                          </div>
                        </div>
                      </div>

                      <div class="subcategory-section">
                        <h4 class="subcategory-section-title">Custom Subcategories</h4>
                        <div class="custom-subcategory-input">
                          <input
                            type="text"
                            v-model="newCustomSubCategory"
                            placeholder="Enter your own subcategory..."
                            class="form-input custom-input"
                            @keyup.enter="addCustomSubCategory"
                          />
                          <button
                            type="button"
                            class="add-custom-btn"
                            @click="addCustomSubCategory"
                            :disabled="!newCustomSubCategory.trim()"
                          >
                            Add
                          </button>
                        </div>

                        <div class="subcategory-chips custom-chips">
                          <div
                            v-for="(custom, index) in customSubCategories"
                            :key="'custom-' + index"
                            class="subcategory-chip subcategory-chip--custom"
                          >
                            <span>{{ custom }}</span>
                            <button
                              class="remove-custom-btn"
                              @click="removeCustomSubCategory(index)"
                              aria-label="Remove"
                            >
                              <svg
                                width="14"
                                height="14"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M18 6L6 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                                <path
                                  d="M6 6L18 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div class="subcategory-modal-footer">
                      <div class="subcategory-summary">
                        <span class="subcategory-count"
                          >{{ selectedSubCategoriesCount }}/5 selected</span
                        >
                      </div>
                      <div class="subcategory-actions">
                        <button type="button" class="btn-secondary" @click="closeSubCategoryModal">
                          Cancel
                        </button>
                        <button type="button" class="btn-primary" @click="confirmSubCategories">
                          Apply
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Custom Time Picker Modal -->
              <div
                v-if="isTimePickerOpen"
                class="time-picker-overlay"
                @click.self="closeTimePicker"
              >
                <div class="time-picker-modal">
                  <div class="time-picker-header">
                    <h3>Select Time</h3>
                    <button type="button" class="time-picker-close" @click="closeTimePicker">
                      <svg
                        width="16"
                        height="16"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                  </div>
                  <div class="time-picker-body">
                    <!-- Custom time input -->
                    <div class="custom-time-input">
                      <div class="time-input-group">
                        <input
                          type="text"
                          v-model="customHours"
                          class="time-input-field"
                          maxlength="2"
                          @focus="$event.target.select()"
                          @blur="formatTimeInputs"
                          @keydown="handleTimeInput"
                          placeholder="HH"
                        />
                        <span class="time-divider">:</span>
                        <input
                          type="text"
                          v-model="customMinutes"
                          class="time-input-field"
                          maxlength="2"
                          @focus="$event.target.select()"
                          @blur="formatTimeInputs"
                          @keydown="handleTimeInput"
                          placeholder="MM"
                        />
                      </div>
                    </div>

                    <div class="time-picker-grid">
                      <div
                        v-for="time in timeOptions"
                        :key="time"
                        class="time-option"
                        :class="{ selected: selectedTime === time }"
                        @click="selectTime(time)"
                      >
                        {{ time }}
                      </div>
                    </div>
                    <div class="time-period-selector">
                      <button
                        type="button"
                        class="time-period-btn"
                        :class="{ selected: selectedPeriod === 'AM' }"
                        @click="selectPeriod('AM')"
                      >
                        AM
                      </button>
                      <button
                        type="button"
                        class="time-period-btn"
                        :class="{ selected: selectedPeriod === 'PM' }"
                        @click="selectPeriod('PM')"
                      >
                        PM
                      </button>
                    </div>
                  </div>
                  <div class="time-picker-actions">
                    <button
                      type="button"
                      class="time-picker-btn time-picker-cancel"
                      @click="closeTimePicker"
                    >
                      Cancel
                    </button>
                    <button
                      type="button"
                      class="time-picker-btn time-picker-apply"
                      @click="applyTimeSelection"
                    >
                      Apply
                    </button>
                  </div>
                </div>
              </div>

              <!-- Custom Date Picker Modal -->
              <div
                v-if="isDatePickerOpen"
                class="date-picker-overlay"
                @click.self="closeDatePicker"
              >
                <div class="date-picker-modal">
                  <div class="date-picker-header">
                    <h3>Select Date</h3>
                    <button type="button" class="date-picker-close" @click="closeDatePicker">
                      <svg
                        width="16"
                        height="16"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                  </div>
                  <div class="date-picker-body">
                    <div class="date-picker-month-nav">
                      <button class="month-nav-btn" @click="previousMonth">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M15 18L9 12L15 6"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                      <div class="month-display">
                        {{ monthNames[currentMonth] }} {{ currentYear }}
                      </div>
                      <button class="month-nav-btn" @click="nextMonth">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M9 18L15 12L9 6"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>

                    <div class="date-picker-weekdays">
                      <div class="weekday" v-for="day in weekdays" :key="day">{{ day }}</div>
                    </div>

                    <div class="date-picker-days">
                      <div
                        v-for="(day, index) in calendarDays"
                        :key="index"
                        class="calendar-day"
                        :class="{
                          'other-month': !day.inCurrentMonth,
                          today: day.isToday,
                          selected: day.isSelected,
                          disabled: day.isDisabled,
                        }"
                        @click="!day.isDisabled && selectDate(day.date)"
                      >
                        {{ day.day }}
                      </div>
                    </div>
                  </div>
                  <div class="date-picker-actions">
                    <button
                      type="button"
                      class="date-picker-btn date-picker-cancel"
                      @click="closeDatePicker"
                    >
                      Cancel
                    </button>
                    <button
                      type="button"
                      class="date-picker-btn date-picker-apply"
                      @click="applyDateSelection"
                    >
                      Apply
                    </button>
                  </div>
                </div>
              </div>
            </div>
          

            <div class="create-event">
              <div class="container">
                <router-link to="/" class="back-link">
                  <svg
                    width="20"
                    height="20"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M19 12H5"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                    <path
                      d="M12 19L5 12L12 5"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                  <span>BACK</span>
                </router-link>

                <div class="create-event__header">
                  <h1 class="create-event__title">Make Your Event dYZ%</h1>
                  <p class="create-event__subtitle">
                    Fill out this form to create your event - it's easy!
                  </p>
                  <button type="button" @click="prefillForm" class="prefill-button">
                    Prefill with Test Data
                  </button>
                </div>

                <div v-if="error" class="create-event__alert create-event__alert--error">
                  {{ error }}
                </div>

                <div v-if="success" class="create-event__alert create-event__alert--success">
                  Event created successfully! Redirecting to event page...
                </div>

                <form @submit.prevent="handleSubmit" class="create-event__form">
                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Event Information
                    </h2>

                    <div class="form-group">
                      <label for="title" class="form-label">Event Name</label>
                      <input
                        id="title"
                        v-model="form.title"
                        type="text"
                        class="form-input"
                        :class="{ 'form-input--error': !validation.title.valid }"
                        placeholder="What's your event called?"
                      />
                      <p v-if="!validation.title.valid" class="form-error">
                        {{ validation.title.message }}
                      </p>
                      <p v-else class="form-helper">
                        Name it something people will understand right away
                      </p>
                    </div>

                    <div class="form-group">
                      <label for="organizer" class="form-label">Organizer Name</label>
                      <input
                        id="organizer"
                        v-model="form.organizer"
                        type="text"
                        class="form-input"
                        :class="{ 'form-input--error': !validation.organizer.valid }"
                        placeholder="Who's hosting this?"
                      />
                      <p v-if="!validation.organizer.valid" class="form-error">
                        {{ validation.organizer.message }}
                      </p>
                    </div>

                    <div class="form-group">
                      <label for="category" class="form-label">Event Category</label>
                      <select
                        id="category"
                        v-model="form.category"
                        class="form-select"
                        :class="{ 'form-input--error': !validation.category.valid }"
                      >
                        <option value="" disabled>Select a category</option>
                        <option
                          v-for="category in categories"
                          :key="category.id"
                          :value="category.id"
                        >
                          {{ category.name }}
                        </option>
                      </select>
                      <p v-if="!validation.category.valid" class="form-error">
                        {{ validation.category.message }}
                      </p>
                      <p v-else class="form-helper">
                        The right category helps people find your event
                      </p>
                    </div>

                    <div class="form-group">
                      <label class="form-label">Sub Categories</label>
                      <div class="subcategories-display">
                        <div class="selected-subcategories">
                          <div v-if="displayedSubCategories.length === 0" class="no-subcategories">
                            No subcategories selected
                          </div>
                          <div
                            v-for="(subCat, index) in displayedSubCategories"
                            :key="index"
                            class="selected-subcategory"
                          >
                            <span>{{ getSubCategoryName(subCat) }}</span>
                            <button
                              type="button"
                              @click="removeSubCategoryById(subCat)"
                              class="remove-subcategory-btn"
                              aria-label="Remove subcategory"
                            >
                              <svg
                                width="14"
                                height="14"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M18 6L6 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                                <path
                                  d="M6 6L18 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>
                        <button
                          type="button"
                          @click="openSubCategoryModal"
                          class="manage-subcategories-btn"
                          :disabled="form.category === ''"
                        >
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 5V19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                            <path
                              d="M5 12H19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                          <span
                            >{{
                              displayedSubCategories.length ? 'Edit' : 'Add'
                            }}
                            Subcategories</span
                          >
                        </button>
                      </div>
                      <p v-if="!validation.subCategories.valid" class="form-error">
                        {{ validation.subCategories.message }}
                      </p>
                      <p v-else class="form-helper">
                        Add up to 5 subcategories to describe your event better
                      </p>
                    </div>

                    <div class="form-group">
                      <label for="description" class="form-label">Event Description</label>
                      <textarea
                        id="description"
                        v-model="form.description"
                        class="form-textarea"
                        :class="{ 'form-input--error': !validation.description.valid }"
                        placeholder="Tell people what makes your event special..."
                        rows="5"
                      ></textarea>
                      <p v-if="!validation.description.valid" class="form-error">
                        {{ validation.description.message }}
                      </p>
                      <p v-else class="form-helper">Tell people what will happen at your event</p>
                    </div>

                    <div class="form-group">
                      <label class="form-label">Event Images</label>
                      <div class="image-upload-container">
                        <div class="image-upload-row">
                          <div
                            class="image-upload-dropzone"
                            :class="{ 'has-image': mainImagePreview }"
                            @click="triggerMainImageUpload"
                            @dragover.prevent
                            @drop.prevent="handleMainImageDrop"
                          >
                            <img
                              v-if="mainImagePreview"
                              :src="mainImagePreview"
                              alt="Main image preview"
                              class="preview-image"
                            />
                            <div v-if="mainImagePreview" class="image-overlay">
                              <button
                                type="button"
                                class="remove-image-btn"
                                @click.stop="removeMainImage"
                              >
                                <svg
                                  width="20"
                                  height="20"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                                <span>Remove</span>
                              </button>
                            </div>
                            <div v-else class="upload-placeholder">
                              <div class="upload-icon">
                                <svg
                                  width="32"
                                  height="32"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <rect
                                    x="3"
                                    y="3"
                                    width="18"
                                    height="18"
                                    rx="2"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                  />
                                  <path
                                    d="M3 16L7 12C7.94 11.06 9.44 11.06 10.38 12L16.5 18"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                    stroke-linecap="round"
                                  />
                                  <path
                                    d="M14 16L16 14C16.94 13.06 18.44 13.06 19.38 14L21 15.5"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                    stroke-linecap="round"
                                  />
                                  <circle
                                    cx="9"
                                    cy="8"
                                    r="2"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                  />
                                </svg>
                              </div>
                              <div class="upload-text">
                                <span class="primary-text">Main Event Image</span>
                                <span class="secondary-text">Drag & drop or click to upload</span>
                              </div>
                            </div>
                          </div>

                          <div
                            class="image-upload-dropzone banner-dropzone"
                            :class="{ 'has-image': bannerImagePreview }"
                            @click="triggerBannerImageUpload"
                            @dragover.prevent
                            @drop.prevent="handleBannerImageDrop"
                          >
                            <img
                              v-if="bannerImagePreview"
                              :src="bannerImagePreview"
                              alt="Banner image preview"
                              class="preview-image"
                            />
                            <div v-if="bannerImagePreview" class="image-overlay">
                              <button
                                type="button"
                                class="remove-image-btn"
                                @click.stop="removeBannerImage"
                              >
                                <svg
                                  width="20"
                                  height="20"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                                <span>Remove</span>
                              </button>
                            </div>
                            <div v-else class="upload-placeholder">
                              <div class="upload-icon">
                                <svg
                                  width="32"
                                  height="32"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <rect
                                    x="2"
                                    y="4"
                                    width="20"
                                    height="13"
                                    rx="2"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                  />
                                  <path
                                    d="M2 13L6 9C6.94 8.06 8.44 8.06 9.38 9L15.5 15"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                    stroke-linecap="round"
                                  />
                                  <path
                                    d="M14 13L16 11C16.94 10.06 18.44 10.06 19.38 11L22 13.5"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                    stroke-linecap="round"
                                  />
                                  <circle
                                    cx="8"
                                    cy="7"
                                    r="1.5"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                  />
                                </svg>
                              </div>
                              <div class="upload-text">
                                <span class="primary-text">Banner Image</span>
                                <span class="secondary-text">Drag & drop or click to upload</span>
                              </div>
                            </div>
                          </div>
                        </div>

                        <div class="image-inputs">
                          <input
                            id="mainImage"
                            ref="mainImageInput"
                            type="file"
                            class="image-input"
                            accept="image/*"
                            @change="handleMainImageUpload"
                          />
                          <input
                            id="bannerImage"
                            ref="bannerImageInput"
                            type="file"
                            class="image-input"
                            accept="image/*"
                            @change="handleBannerImageUpload"
                          />
                        </div>
                      </div>
                      <p
                        v-if="!validation.mainImage.valid || !validation.bannerImage.valid"
                        class="form-error"
                      >
                        {{
                          !validation.mainImage.valid
                            ? validation.mainImage.message
                            : validation.bannerImage.message
                        }}
                      </p>
                      <p v-else class="form-helper">
                        Upload images for your event. The main image will appear on cards throughout
                        the site, while the banner will be displayed on your event's detail page.
                      </p>
                    </div>
                  </div>

                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Date & Time
                    </h2>

                    <div class="form-row">
                      <div class="form-group">
                        <label for="date" class="form-label">Event Date</label>
                        <div class="date-picker-wrapper">
                          <input
                            id="date"
                            v-model="form.date"
                            type="text"
                            readonly
                            class="form-input date-input"
                            :class="{ 'form-input--error': !validation.date.valid }"
                            :min="today"
                            @click="openDatePicker"
                          />
                          <div v-if="showDateTip" class="picker-tip">
                            <div class="tip-arrow"></div>
                            <div class="tip-content">
                              <p>Click to open calendar</p>
                              <span>Select a date for your event</span>
                            </div>
                          </div>
                        </div>
                        <p v-if="!validation.date.valid" class="form-error">
                          {{ validation.date.message }}
                        </p>
                        <p v-else class="form-helper">Click to open the calendar</p>
                      </div>

                      <div class="form-group">
                        <label for="time" class="form-label">Start Time</label>
                        <div class="time-picker-wrapper">
                          <input
                            id="time"
                            v-model="form.time"
                            type="text"
                            readonly
                            class="form-input time-input"
                            :class="{ 'form-input--error': !validation.time.valid }"
                            @click="openTimePicker"
                            placeholder="Select a time"
                          />
                          <div v-if="showTimeTip" class="picker-tip">
                            <div class="tip-arrow"></div>
                            <div class="tip-content">
                              <p>Click to select time</p>
                              <span>Use our easy time selector</span>
                            </div>
                          </div>
                        </div>
                        <p v-if="!validation.time.valid" class="form-error">
                          {{ validation.time.message }}
                        </p>
                        <p v-else class="form-helper">Click to open time selector</p>
                      </div>
                    </div>

                    <div class="form-group">
                      <label for="duration" class="form-label">Event Duration</label>
                      <select id="duration" v-model="form.duration" class="form-select">
                        <option value="" disabled>Select duration</option>
                        <option v-for="option in durationOptions" :key="option" :value="option">
                          {{ option }}
                        </option>
                      </select>
                      <p class="form-helper">Tell people how long your event will last</p>
                    </div>
                  </div>

                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Location Details
                    </h2>

                    <div class="form-group">
                      <label for="location" class="form-label">Venue Name & Address</label>
                      <input
                        id="location"
                        v-model="form.location"
                        type="text"
                        class="form-input"
                        :class="{ 'form-input--error': !validation.location.valid }"
                        placeholder="Where is your event happening?"
                      />
                      <p v-if="!validation.location.valid" class="form-error">
                        {{ validation.location.message }}
                      </p>
                      <p v-else class="form-helper">
                        Add the full address so people can find your event
                      </p>
                    </div>

                    <div class="location-map-placeholder">
                      <div class="location-map-content">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="24"
                          height="24"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        >
                          <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                          <circle cx="12" cy="10" r="3"></circle>
                        </svg>
                        <p>Maps coming soon</p>
                      </div>
                    </div>
                  </div>

                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Ticket Information
                    </h2>

                    <div v-if="!validation.ticketTypes.valid" class="form-error ticket-types-error">
                      {{ validation.ticketTypes.message }}
                    </div>

                    <div class="ticket-types-container">
                      <div
                        v-for="(ticket, index) in form.ticketTypes"
                        :key="index"
                        class="ticket-type-card"
                      >
                        <div class="ticket-type-header">
                          <h3 class="ticket-type-title">Ticket #{{ index + 1 }}</h3>
                          <div class="ticket-type-actions">
                            <button
                              type="button"
                              @click="duplicateTicketType(index)"
                              class="ticket-action-btn ticket-action-duplicate"
                              title="Duplicate ticket"
                            >
                              <svg
                                width="16"
                                height="16"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <rect
                                  x="9"
                                  y="9"
                                  width="13"
                                  height="13"
                                  rx="2"
                                  stroke="currentColor"
                                  stroke-width="2"
                                />
                                <path
                                  d="M5 15H4C2.89543 15 2 14.1046 2 13V4C2 2.89543 2.89543 2 4 2H13C14.1046 2 15 2.89543 15 4V5"
                                  stroke="currentColor"
                                  stroke-width="2"
                                />
                              </svg>
                            </button>
                            <button
                              type="button"
                              @click="removeTicketType(index)"
                              class="ticket-action-btn ticket-action-remove"
                              title="Remove ticket"
                              :disabled="form.ticketTypes.length <= 1"
                            >
                              <svg
                                width="16"
                                height="16"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M18 6L6 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                                <path
                                  d="M6 6L18 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>

                        <div class="form-group">
                          <label :for="'ticket-name-' + index" class="form-label"
                            >Ticket Name</label
                          >
                          <div class="ticket-name-input-wrapper">
                            <input
                              :id="'ticket-name-' + index"
                              v-model="ticket.name"
                              type="text"
                              class="form-input"
                              placeholder="e.g. Early Bird, VIP, General Admission"
                            />
                            <div class="ticket-template-dropdown">
                              <button
                                type="button"
                                class="ticket-template-btn"
                                @click="openTemplateModal(index)"
                              >
                                <span>Templates</span>
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M6 9L12 15L18 9"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                              <div class="ticket-template-options">
                                <button
                                  v-for="template in ticketTemplates"
                                  :key="template.name"
                                  type="button"
                                  class="ticket-template-option"
                                  @click="applyTemplate(index, template)"
                                >
                                  {{ template.name }}
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>

                        <div class="form-row">
                          <div class="form-group">
                            <label :for="'ticket-price-' + index" class="form-label"
                              >Price ($)</label
                            >
                            <input
                              :id="'ticket-price-' + index"
                              v-model.number="ticket.price"
                              type="number"
                              min="0"
                              step="0.01"
                              class="form-input"
                              placeholder="0.00"
                            />
                          </div>

                          <div class="form-group">
                            <label :for="'ticket-quantity-' + index" class="form-label"
                              >Quantity</label
                            >
                            <input
                              :id="'ticket-quantity-' + index"
                              v-model.number="ticket.quantity"
                              type="number"
                              min="1"
                              class="form-input"
                              placeholder="10"
                            />
                          </div>
                        </div>

                        <div class="form-group">
                          <label :for="'ticket-description-' + index" class="form-label"
                            >Description (Optional)</label
                          >
                          <textarea
                            :id="'ticket-description-' + index"
                            v-model="ticket.description"
                            class="form-textarea ticket-description"
                            rows="2"
                            placeholder="Describe what's included with this ticket"
                          ></textarea>
                        </div>

                        <div class="ticket-sales-period">
                          <h4 class="ticket-section-subtitle">Sales End Date</h4>
                          <p class="ticket-section-helper">
                            Should this ticket type have a deadline? If yes, tell us when sales
                            should stop. This is optional.
                          </p>

                          <div class="form-row">
                            <div class="form-group">
                              <label :for="'ticket-end-date-' + index" class="form-label"
                                >Date</label
                              >
                              <input
                                :id="'ticket-end-date-' + index"
                                v-model="ticket.salesEndDate"
                                type="date"
                                class="form-input"
                                :min="today"
                                :max="form.date"
                              />
                            </div>

                            <div class="form-group">
                              <label :for="'ticket-end-time-' + index" class="form-label"
                                >Time</label
                              >
                              <input
                                :id="'ticket-end-time-' + index"
                                v-model="ticket.salesEndTime"
                                type="time"
                                class="form-input"
                              />
                            </div>
                          </div>
                        </div>

                        <div class="form-checkbox-wrapper">
                          <input
                            :id="'ticket-featured-' + index"
                            v-model="ticket.isFeatured"
                            type="checkbox"
                            class="form-checkbox"
                          />
                          <label :for="'ticket-featured-' + index" class="form-checkbox-label">
                            Feature this ticket (highlighted in the ticket selection)
                          </label>
                        </div>
                      </div>

                      <button type="button" @click="addTicketType" class="add-ticket-type-btn">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M12 5V19"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M5 12H19"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                        <span>Add Another Ticket Type</span>
                      </button>
                    </div>
                  </div>

                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Event Options
                    </h2>

                    <p class="section-intro">
                      Select features and amenities that your event offers to help attendees know
                      what to expect.
                    </p>

                    <div class="event-options-container">
                      <div class="event-options-grid">
                        <!-- Predefined event options -->
                        <div
                          v-for="option in predefinedEventOptions"
                          :key="'predefined-' + option"
                          class="event-option-item"
                          @click="toggleEventOption(option)"
                        >
                          <div
                            class="event-option-checkbox"
                            :class="{
                              'event-option-checkbox--selected': isEventOptionSelected(option),
                            }"
                          >
                            <div class="event-option-label">{{ option }}</div>
                            <svg
                              v-if="isEventOptionSelected(option)"
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                              class="event-option-checkmark"
                            >
                              <path
                                d="M20 6L9 17L4 12"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                              />
                            </svg>
                          </div>
                        </div>

                        <!-- Custom event options -->
                        <div
                          v-for="(option, index) in form.customEventOptions"
                          :key="'custom-' + index"
                          class="event-option-item"
                        >
                          <div class="event-option-checkbox event-option-checkbox--selected">
                            <div class="event-option-label">{{ option }}</div>
                            <button
                              type="button"
                              @click="removeCustomEventOption(index)"
                              class="remove-option-btn"
                              aria-label="Remove option"
                            >
                              <svg
                                width="14"
                                height="14"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M18 6L6 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                                <path
                                  d="M6 6L18 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>
                      </div>

                      <div class="add-event-option">
                        <div class="custom-event-option-input">
                          <input
                            type="text"
                            v-model="newCustomEventOption"
                            placeholder="Add your own event option..."
                            class="form-input custom-option-input"
                            @keyup.enter="addCustomEventOption"
                          />
                          <button
                            type="button"
                            class="add-custom-option-btn"
                            @click="addCustomEventOption"
                            :disabled="!newCustomEventOption.trim()"
                          >
                            Add
                          </button>
                        </div>
                      </div>
                    </div>

                    <div class="form-checkbox-wrapper mt-4">
                      <input
                        id="featured"
                        v-model="form.featured"
                        type="checkbox"
                        class="form-checkbox"
                      />
                      <label for="featured" class="form-checkbox-label">
                        Feature this event (additional promotion fee may apply)
                      </label>
                    </div>
                    <p class="form-helper">Featured events show up on the homepage</p>
                  </div>

                  <!-- Add new FAQ section -->
                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Frequently Asked Questions
                      <span class="section-optional">(Optional)</span>
                    </h2>

                    <p class="section-intro">
                      Help attendees by answering common questions about your event. You can edit
                      these defaults or add your own.
                    </p>

                    <div class="faq-container">
                      <div v-for="(faq, index) in form.faqs" :key="index" class="faq-item">
                        <div class="faq-header">
                          <h3 class="faq-number">Q{{ index + 1 }}</h3>
                          <div class="faq-actions">
                            <button
                              type="button"
                              @click="removeFaq(index)"
                              class="faq-action-btn faq-action-remove"
                              title="Remove question"
                            >
                              <svg
                                width="14"
                                height="14"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M18 6L6 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                                <path
                                  d="M6 6L18 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>

                        <div class="faq-content">
                          <div class="form-group">
                            <label :for="'faq-question-' + index" class="form-label"
                              >Question</label
                            >
                            <input
                              :id="'faq-question-' + index"
                              v-model="faq.question"
                              type="text"
                              class="form-input"
                              placeholder="Enter a question guests might ask"
                            />
                          </div>

                          <div class="form-group">
                            <label :for="'faq-answer-' + index" class="form-label">Answer</label>
                            <textarea
                              :id="'faq-answer-' + index"
                              v-model="faq.answer"
                              class="form-textarea faq-answer"
                              rows="3"
                              placeholder="Provide a clear answer to the question"
                            ></textarea>
                          </div>
                        </div>
                      </div>

                      <button type="button" @click="addFaq" class="add-faq-btn">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M12 5V19"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M5 12H19"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                        <span>Add Another Question</span>
                      </button>
                    </div>
                  </div>

                  <div class="form-actions">
                    <button
                      type="button"
                      @click="resetForm"
                      class="btn-secondary"
                      :disabled="isSubmitting"
                    >
                      Reset Form
                    </button>
                    <button type="submit" class="btn-primary" :disabled="isSubmitting">
                      <span v-if="isSubmitting">
                        <svg class="spinner" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <circle cx="12" cy="12" r="10" fill="none" stroke-width="3" />
                        </svg>
                        Creating Event...
                      </span>
                      <span v-else>Create Event</span>
                    </button>
                  </div>
                </form>

                <div class="create-event__note">
                  <p>
                    <strong>Note:</strong> Your event data is saved locally for now. Online saving
                    coming soon.
                  </p>
                </div>
              </div>

              <div
                v-if="showTemplateModal"
                class="ticket-template-modal-overlay"
                @click.self="closeTemplateModal"
              >
                <div class="ticket-template-modal">
                  <div class="ticket-template-modal-header">
                    <h3>Choose a Ticket Template</h3>
                    <button @click="closeTemplateModal" class="modal-close-btn" aria-label="Close">
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                  </div>
                  <div class="ticket-template-modal-body">
                    <div
                      v-for="template in ticketTemplates"
                      :key="template.name"
                      class="template-card"
                      @click="applyTemplateFromModal(activeTicketIndex, template)"
                    >
                      <div class="template-card-content">
                        <h4 class="template-name">{{ template.name }}</h4>
                        <p class="template-description">{{ template.description }}</p>
                      </div>
                      <div class="template-card-icon">
                        <svg
                          width="24"
                          height="24"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M20 6L9 17L4 12"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Add subcategory modal -->
              <div
                v-if="showSubCategoryModal"
                class="subcategory-modal-overlay"
                @click.self="closeSubCategoryModal"
              >
                <div class="subcategory-modal">
                  <div class="subcategory-modal-header">
                    <h3>Select or Add Subcategories</h3>
                    <button
                      @click="closeSubCategoryModal"
                      class="modal-close-btn"
                      aria-label="Close"
                    >
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                  </div>
                  <div class="subcategory-modal-body">
                    <p class="subcategory-modal-info">
                      Select up to 5 subcategories or add your own
                    </p>

                    <div class="subcategory-search">
                      <input
                        type="text"
                        v-model="subcategorySearchTerm"
                        placeholder="Search subcategories..."
                        class="subcategory-search-input"
                      />
                    </div>

                    <div class="subcategory-options">
                      <div class="subcategory-section">
                        <h4 class="subcategory-section-title">Available Subcategories</h4>
                        <div class="subcategory-chips">
                          <div
                            v-for="subCategory in filteredSubCategories"
                            :key="subCategory.id"
                            class="subcategory-chip"
                            :class="{
                              'subcategory-chip--selected': isSubCategorySelected(subCategory.id),
                            }"
                            @click="toggleSubCategory(subCategory.id)"
                          >
                            <span>{{ subCategory.name }}</span>
                            <svg
                              v-if="isSubCategorySelected(subCategory.id)"
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M20 6L9 17L4 12"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                              />
                            </svg>
                          </div>
                        </div>
                      </div>

                      <div class="subcategory-section">
                        <h4 class="subcategory-section-title">Custom Subcategories</h4>
                        <div class="custom-subcategory-input">
                          <input
                            type="text"
                            v-model="newCustomSubCategory"
                            placeholder="Enter your own subcategory..."
                            class="form-input custom-input"
                            @keyup.enter="addCustomSubCategory"
                          />
                          <button
                            type="button"
                            class="add-custom-btn"
                            @click="addCustomSubCategory"
                            :disabled="!newCustomSubCategory.trim()"
                          >
                            Add
                          </button>
                        </div>

                        <div class="subcategory-chips custom-chips">
                          <div
                            v-for="(custom, index) in customSubCategories"
                            :key="'custom-' + index"
                            class="subcategory-chip subcategory-chip--custom"
                          >
                            <span>{{ custom }}</span>
                            <button
                              class="remove-custom-btn"
                              @click="removeCustomSubCategory(index)"
                              aria-label="Remove"
                            >
                              <svg
                                width="14"
                                height="14"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M18 6L6 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                                <path
                                  d="M6 6L18 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div class="subcategory-modal-footer">
                      <div class="subcategory-summary">
                        <span class="subcategory-count"
                          >{{ selectedSubCategoriesCount }}/5 selected</span
                        >
                      </div>
                      <div class="subcategory-actions">
                        <button type="button" class="btn-secondary" @click="closeSubCategoryModal">
                          Cancel
                        </button>
                        <button type="button" class="btn-primary" @click="confirmSubCategories">
                          Apply
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Custom Time Picker Modal -->
              <div
                v-if="isTimePickerOpen"
                class="time-picker-overlay"
                @click.self="closeTimePicker"
              >
                <div class="time-picker-modal">
                  <div class="time-picker-header">
                    <h3>Select Time</h3>
                    <button type="button" class="time-picker-close" @click="closeTimePicker">
                      <svg
                        width="16"
                        height="16"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                  </div>
                  <div class="time-picker-body">
                    <!-- Custom time input -->
                    <div class="custom-time-input">
                      <div class="time-input-group">
                        <input
                          type="text"
                          v-model="customHours"
                          class="time-input-field"
                          maxlength="2"
                          @focus="$event.target.select()"
                          @blur="formatTimeInputs"
                          @keydown="handleTimeInput"
                          placeholder="HH"
                        />
                        <span class="time-divider">:</span>
                        <input
                          type="text"
                          v-model="customMinutes"
                          class="time-input-field"
                          maxlength="2"
                          @focus="$event.target.select()"
                          @blur="formatTimeInputs"
                          @keydown="handleTimeInput"
                          placeholder="MM"
                        />
                      </div>
                    </div>

                    <div class="time-picker-grid">
                      <div
                        v-for="time in timeOptions"
                        :key="time"
                        class="time-option"
                        :class="{ selected: selectedTime === time }"
                        @click="selectTime(time)"
                      >
                        {{ time }}
                      </div>
                    </div>
                    <div class="time-period-selector">
                      <button
                        type="button"
                        class="time-period-btn"
                        :class="{ selected: selectedPeriod === 'AM' }"
                        @click="selectPeriod('AM')"
                      >
                        AM
                      </button>
                      <button
                        type="button"
                        class="time-period-btn"
                        :class="{ selected: selectedPeriod === 'PM' }"
                        @click="selectPeriod('PM')"
                      >
                        PM
                      </button>
                    </div>
                  </div>
                  <div class="time-picker-actions">
                    <button
                      type="button"
                      class="time-picker-btn time-picker-cancel"
                      @click="closeTimePicker"
                    >
                      Cancel
                    </button>
                    <button
                      type="button"
                      class="time-picker-btn time-picker-apply"
                      @click="applyTimeSelection"
                    >
                      Apply
                    </button>
                  </div>
                </div>
              </div>

              <!-- Custom Date Picker Modal -->
              <div
                v-if="isDatePickerOpen"
                class="date-picker-overlay"
                @click.self="closeDatePicker"
              >
                <div class="date-picker-modal">
                  <div class="date-picker-header">
                    <h3>Select Date</h3>
                    <button type="button" class="date-picker-close" @click="closeDatePicker">
                      <svg
                        width="16"
                        height="16"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                  </div>
                  <div class="date-picker-body">
                    <div class="date-picker-month-nav">
                      <button class="month-nav-btn" @click="previousMonth">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M15 18L9 12L15 6"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                      <div class="month-display">
                        {{ monthNames[currentMonth] }} {{ currentYear }}
                      </div>
                      <button class="month-nav-btn" @click="nextMonth">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M9 18L15 12L9 6"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>

                    <div class="date-picker-weekdays">
                      <div class="weekday" v-for="day in weekdays" :key="day">{{ day }}</div>
                    </div>

                    <div class="date-picker-days">
                      <div
                        v-for="(day, index) in calendarDays"
                        :key="index"
                        class="calendar-day"
                        :class="{
                          'other-month': !day.inCurrentMonth,
                          today: day.isToday,
                          selected: day.isSelected,
                          disabled: day.isDisabled,
                        }"
                        @click="!day.isDisabled && selectDate(day.date)"
                      >
                        {{ day.day }}
                      </div>
                    </div>
                  </div>
                  <div class="date-picker-actions">
                    <button
                      type="button"
                      class="date-picker-btn date-picker-cancel"
                      @click="closeDatePicker"
                    >
                      Cancel
                    </button>
                    <button
                      type="button"
                      class="date-picker-btn date-picker-apply"
                      @click="applyDateSelection"
                    >
                      Apply
                    </button>
                  </div>
                </div>
              </div>
            </div>
          

              <div class="create-event">
                <div class="container">
                  <router-link to="/" class="back-link">
                    <svg
                      width="20"
                      height="20"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M19 12H5"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M12 19L5 12L12 5"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                    <span>BACK</span>
                  </router-link>

                  <div class="create-event__header">
                    <h1 class="create-event__title">Make Your Event dYZ%</h1>
                    <p class="create-event__subtitle">Fill out this form to create your event - it's easy!</p>
                    <button type="button" @click="prefillForm" class="prefill-button">
                      Prefill with Test Data
                    </button>
                  </div>

                  <div v-if="error" class="create-event__alert create-event__alert--error">
                    {{ error }}
                  </div>

                  <div v-if="success" class="create-event__alert create-event__alert--success">
                    Event created successfully! Redirecting to event page...
                  </div>

                  <form @submit.prevent="handleSubmit" class="create-event__form">
                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Event Information
                      </h2>

                      <div class="form-group">
                        <label for="title" class="form-label">Event Name</label>
                        <input
                          id="title"
                          v-model="form.title"
                          type="text"
                          class="form-input"
                          :class="{ 'form-input--error': !validation.title.valid }"
                          placeholder="What's your event called?"
                        />
                        <p v-if="!validation.title.valid" class="form-error">{{ validation.title.message }}</p>
                        <p v-else class="form-helper">Name it something people will understand right away</p>
                      </div>

                      <div class="form-group">
                        <label for="organizer" class="form-label">Organizer Name</label>
                        <input
                          id="organizer"
                          v-model="form.organizer"
                          type="text"
                          class="form-input"
                          :class="{ 'form-input--error': !validation.organizer.valid }"
                          placeholder="Who's hosting this?"
                        />
                        <p v-if="!validation.organizer.valid" class="form-error">
                          {{ validation.organizer.message }}
                        </p>
                      </div>

                      <div class="form-group">
                        <label for="category" class="form-label">Event Category</label>
                        <select
                          id="category"
                          v-model="form.category"
                          class="form-select"
                          :class="{ 'form-input--error': !validation.category.valid }"
                        >
                          <option value="" disabled>Select a category</option>
                          <option v-for="category in categories" :key="category.id" :value="category.id">
                            {{ category.name }}
                          </option>
                        </select>
                        <p v-if="!validation.category.valid" class="form-error">
                          {{ validation.category.message }}
                        </p>
                        <p v-else class="form-helper">The right category helps people find your event</p>
                      </div>

                      <div class="form-group">
                        <label class="form-label">Sub Categories</label>
                        <div class="subcategories-display">
                          <div class="selected-subcategories">
                            <div v-if="displayedSubCategories.length === 0" class="no-subcategories">
                              No subcategories selected
                            </div>
                            <div
                              v-for="(subCat, index) in displayedSubCategories"
                              :key="index"
                              class="selected-subcategory"
                            >
                              <span>{{ getSubCategoryName(subCat) }}</span>
                              <button
                                type="button"
                                @click="removeSubCategoryById(subCat)"
                                class="remove-subcategory-btn"
                                aria-label="Remove subcategory"
                              >
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>
                          <button
                            type="button"
                            @click="openSubCategoryModal"
                            class="manage-subcategories-btn"
                            :disabled="form.category === ''"
                          >
                            <svg
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M12 5V19"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                              />
                              <path
                                d="M5 12H19"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                              />
                            </svg>
                            <span>{{ displayedSubCategories.length ? 'Edit' : 'Add' }} Subcategories</span>
                          </button>
                        </div>
                        <p v-if="!validation.subCategories.valid" class="form-error">
                          {{ validation.subCategories.message }}
                        </p>
                        <p v-else class="form-helper">
                          Add up to 5 subcategories to describe your event better
                        </p>
                      </div>

                      <div class="form-group">
                        <label for="description" class="form-label">Event Description</label>
                        <textarea
                          id="description"
                          v-model="form.description"
                          class="form-textarea"
                          :class="{ 'form-input--error': !validation.description.valid }"
                          placeholder="Tell people what makes your event special..."
                          rows="5"
                        ></textarea>
                        <p v-if="!validation.description.valid" class="form-error">
                          {{ validation.description.message }}
                        </p>
                        <p v-else class="form-helper">Tell people what will happen at your event</p>
                      </div>

                      <div class="form-group">
                        <label class="form-label">Event Images</label>
                        <div class="image-upload-container">
                          <div class="image-upload-row">
                            <div
                              class="image-upload-dropzone"
                              :class="{ 'has-image': mainImagePreview }"
                              @click="triggerMainImageUpload"
                              @dragover.prevent
                              @drop.prevent="handleMainImageDrop"
                            >
                              <img
                                v-if="mainImagePreview"
                                :src="mainImagePreview"
                                alt="Main image preview"
                                class="preview-image"
                              />
                              <div v-if="mainImagePreview" class="image-overlay">
                                <button type="button" class="remove-image-btn" @click.stop="removeMainImage">
                                  <svg
                                    width="20"
                                    height="20"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M18 6L6 18"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                    <path
                                      d="M6 6L18 18"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                  </svg>
                                  <span>Remove</span>
                                </button>
                              </div>
                              <div v-else class="upload-placeholder">
                                <div class="upload-icon">
                                  <svg
                                    width="32"
                                    height="32"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <rect
                                      x="3"
                                      y="3"
                                      width="18"
                                      height="18"
                                      rx="2"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                    />
                                    <path
                                      d="M3 16L7 12C7.94 11.06 9.44 11.06 10.38 12L16.5 18"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                    />
                                    <path
                                      d="M14 16L16 14C16.94 13.06 18.44 13.06 19.38 14L21 15.5"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                    />
                                    <circle cx="9" cy="8" r="2" stroke="currentColor" stroke-width="1.5" />
                                  </svg>
                                </div>
                                <div class="upload-text">
                                  <span class="primary-text">Main Event Image</span>
                                  <span class="secondary-text">Drag & drop or click to upload</span>
                                </div>
                              </div>
                            </div>

                            <div
                              class="image-upload-dropzone banner-dropzone"
                              :class="{ 'has-image': bannerImagePreview }"
                              @click="triggerBannerImageUpload"
                              @dragover.prevent
                              @drop.prevent="handleBannerImageDrop"
                            >
                              <img
                                v-if="bannerImagePreview"
                                :src="bannerImagePreview"
                                alt="Banner image preview"
                                class="preview-image"
                              />
                              <div v-if="bannerImagePreview" class="image-overlay">
                                <button type="button" class="remove-image-btn" @click.stop="removeBannerImage">
                                  <svg
                                    width="20"
                                    height="20"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M18 6L6 18"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                    <path
                                      d="M6 6L18 18"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                  </svg>
                                  <span>Remove</span>
                                </button>
                              </div>
                              <div v-else class="upload-placeholder">
                                <div class="upload-icon">
                                  <svg
                                    width="32"
                                    height="32"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <rect
                                      x="2"
                                      y="4"
                                      width="20"
                                      height="13"
                                      rx="2"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                    />
                                    <path
                                      d="M2 13L6 9C6.94 8.06 8.44 8.06 9.38 9L15.5 15"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                    />
                                    <path
                                      d="M14 13L16 11C16.94 10.06 18.44 10.06 19.38 11L22 13.5"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                    />
                                    <circle cx="8" cy="7" r="1.5" stroke="currentColor" stroke-width="1.5" />
                                  </svg>
                                </div>
                                <div class="upload-text">
                                  <span class="primary-text">Banner Image</span>
                                  <span class="secondary-text">Drag & drop or click to upload</span>
                                </div>
                              </div>
                            </div>
                          </div>

                          <div class="image-inputs">
                            <input
                              id="mainImage"
                              ref="mainImageInput"
                              type="file"
                              class="image-input"
                              accept="image/*"
                              @change="handleMainImageUpload"
                            />
                            <input
                              id="bannerImage"
                              ref="bannerImageInput"
                              type="file"
                              class="image-input"
                              accept="image/*"
                              @change="handleBannerImageUpload"
                            />
                          </div>
                        </div>
                        <p
                          v-if="!validation.mainImage.valid || !validation.bannerImage.valid"
                          class="form-error"
                        >
                          {{
                            !validation.mainImage.valid
                              ? validation.mainImage.message
                              : validation.bannerImage.message
                          }}
                        </p>
                        <p v-else class="form-helper">
                          Upload images for your event. The main image will appear on cards throughout the site,
                          while the banner will be displayed on your event's detail page.
                        </p>
                      </div>
                    </div>

                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Date & Time
                      </h2>

                      <div class="form-row">
                        <div class="form-group">
                          <label for="date" class="form-label">Event Date</label>
                          <div class="date-picker-wrapper">
                            <input
                              id="date"
                              v-model="form.date"
                              type="text"
                              readonly
                              class="form-input date-input"
                              :class="{ 'form-input--error': !validation.date.valid }"
                              :min="today"
                              @click="openDatePicker"
                            />
                            <div v-if="showDateTip" class="picker-tip">
                              <div class="tip-arrow"></div>
                              <div class="tip-content">
                                <p>Click to open calendar</p>
                                <span>Select a date for your event</span>
                              </div>
                            </div>
                          </div>
                          <p v-if="!validation.date.valid" class="form-error">{{ validation.date.message }}</p>
                          <p v-else class="form-helper">Click to open the calendar</p>
                        </div>

                        <div class="form-group">
                          <label for="time" class="form-label">Start Time</label>
                          <div class="time-picker-wrapper">
                            <input
                              id="time"
                              v-model="form.time"
                              type="text"
                              readonly
                              class="form-input time-input"
                              :class="{ 'form-input--error': !validation.time.valid }"
                              @click="openTimePicker"
                              placeholder="Select a time"
                            />
                            <div v-if="showTimeTip" class="picker-tip">
                              <div class="tip-arrow"></div>
                              <div class="tip-content">
                                <p>Click to select time</p>
                                <span>Use our easy time selector</span>
                              </div>
                            </div>
                          </div>
                          <p v-if="!validation.time.valid" class="form-error">{{ validation.time.message }}</p>
                          <p v-else class="form-helper">Click to open time selector</p>
                        </div>
                      </div>

                      <div class="form-group">
                        <label for="duration" class="form-label">Event Duration</label>
                        <select id="duration" v-model="form.duration" class="form-select">
                          <option value="" disabled>Select duration</option>
                          <option v-for="option in durationOptions" :key="option" :value="option">
                            {{ option }}
                          </option>
                        </select>
                        <p class="form-helper">Tell people how long your event will last</p>
                      </div>
                    </div>

                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Location Details
                      </h2>

                      <div class="form-group">
                        <label for="location" class="form-label">Venue Name & Address</label>
                        <input
                          id="location"
                          v-model="form.location"
                          type="text"
                          class="form-input"
                          :class="{ 'form-input--error': !validation.location.valid }"
                          placeholder="Where is your event happening?"
                        />
                        <p v-if="!validation.location.valid" class="form-error">
                          {{ validation.location.message }}
                        </p>
                        <p v-else class="form-helper">Add the full address so people can find your event</p>
                      </div>

                      <div class="location-map-placeholder">
                        <div class="location-map-content">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          >
                            <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                            <circle cx="12" cy="10" r="3"></circle>
                          </svg>
                          <p>Maps coming soon</p>
                        </div>
                      </div>
                    </div>

                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Ticket Information
                      </h2>

                      <div v-if="!validation.ticketTypes.valid" class="form-error ticket-types-error">
                        {{ validation.ticketTypes.message }}
                      </div>

                      <div class="ticket-types-container">
                        <div v-for="(ticket, index) in form.ticketTypes" :key="index" class="ticket-type-card">
                          <div class="ticket-type-header">
                            <h3 class="ticket-type-title">Ticket #{{ index + 1 }}</h3>
                            <div class="ticket-type-actions">
                              <button
                                type="button"
                                @click="duplicateTicketType(index)"
                                class="ticket-action-btn ticket-action-duplicate"
                                title="Duplicate ticket"
                              >
                                <svg
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <rect
                                    x="9"
                                    y="9"
                                    width="13"
                                    height="13"
                                    rx="2"
                                    stroke="currentColor"
                                    stroke-width="2"
                                  />
                                  <path
                                    d="M5 15H4C2.89543 15 2 14.1046 2 13V4C2 2.89543 2.89543 2 4 2H13C14.1046 2 15 2.89543 15 4V5"
                                    stroke="currentColor"
                                    stroke-width="2"
                                  />
                                </svg>
                              </button>
                              <button
                                type="button"
                                @click="removeTicketType(index)"
                                class="ticket-action-btn ticket-action-remove"
                                title="Remove ticket"
                                :disabled="form.ticketTypes.length <= 1"
                              >
                                <svg
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>

                          <div class="form-group">
                            <label :for="'ticket-name-' + index" class="form-label">Ticket Name</label>
                            <div class="ticket-name-input-wrapper">
                              <input
                                :id="'ticket-name-' + index"
                                v-model="ticket.name"
                                type="text"
                                class="form-input"
                                placeholder="e.g. Early Bird, VIP, General Admission"
                              />
                              <div class="ticket-template-dropdown">
                                <button
                                  type="button"
                                  class="ticket-template-btn"
                                  @click="openTemplateModal(index)"
                                >
                                  <span>Templates</span>
                                  <svg
                                    width="14"
                                    height="14"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M6 9L12 15L18 9"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                  </svg>
                                </button>
                                <div class="ticket-template-options">
                                  <button
                                    v-for="template in ticketTemplates"
                                    :key="template.name"
                                    type="button"
                                    class="ticket-template-option"
                                    @click="applyTemplate(index, template)"
                                  >
                                    {{ template.name }}
                                  </button>
                                </div>
                              </div>
                            </div>
                          </div>

                          <div class="form-row">
                            <div class="form-group">
                              <label :for="'ticket-price-' + index" class="form-label">Price ($)</label>
                              <input
                                :id="'ticket-price-' + index"
                                v-model.number="ticket.price"
                                type="number"
                                min="0"
                                step="0.01"
                                class="form-input"
                                placeholder="0.00"
                              />
                            </div>

                            <div class="form-group">
                              <label :for="'ticket-quantity-' + index" class="form-label">Quantity</label>
                              <input
                                :id="'ticket-quantity-' + index"
                                v-model.number="ticket.quantity"
                                type="number"
                                min="1"
                                class="form-input"
                                placeholder="10"
                              />
                            </div>
                          </div>

                          <div class="form-group">
                            <label :for="'ticket-description-' + index" class="form-label"
                              >Description (Optional)</label
                            >
                            <textarea
                              :id="'ticket-description-' + index"
                              v-model="ticket.description"
                              class="form-textarea ticket-description"
                              rows="2"
                              placeholder="Describe what's included with this ticket"
                            ></textarea>
                          </div>

                          <div class="ticket-sales-period">
                            <h4 class="ticket-section-subtitle">Sales End Date</h4>
                            <p class="ticket-section-helper">
                              Should this ticket type have a deadline? If yes, tell us when sales should stop.
                              This is optional.
                            </p>

                            <div class="form-row">
                              <div class="form-group">
                                <label :for="'ticket-end-date-' + index" class="form-label">Date</label>
                                <input
                                  :id="'ticket-end-date-' + index"
                                  v-model="ticket.salesEndDate"
                                  type="date"
                                  class="form-input"
                                  :min="today"
                                  :max="form.date"
                                />
                              </div>

                              <div class="form-group">
                                <label :for="'ticket-end-time-' + index" class="form-label">Time</label>
                                <input
                                  :id="'ticket-end-time-' + index"
                                  v-model="ticket.salesEndTime"
                                  type="time"
                                  class="form-input"
                                />
                              </div>
                            </div>
                          </div>

                          <div class="form-checkbox-wrapper">
                            <input
                              :id="'ticket-featured-' + index"
                              v-model="ticket.isFeatured"
                              type="checkbox"
                              class="form-checkbox"
                            />
                            <label :for="'ticket-featured-' + index" class="form-checkbox-label">
                              Feature this ticket (highlighted in the ticket selection)
                            </label>
                          </div>
                        </div>

                        <button type="button" @click="addTicketType" class="add-ticket-type-btn">
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 5V19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                            <path
                              d="M5 12H19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                          <span>Add Another Ticket Type</span>
                        </button>
                      </div>
                    </div>

                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Event Options
                      </h2>

                      <p class="section-intro">
                        Select features and amenities that your event offers to help attendees know what to
                        expect.
                      </p>

                      <div class="event-options-container">
                        <div class="event-options-grid">
                          <!-- Predefined event options -->
                          <div
                            v-for="option in predefinedEventOptions"
                            :key="'predefined-' + option"
                            class="event-option-item"
                            @click="toggleEventOption(option)"
                          >
                            <div
                              class="event-option-checkbox"
                              :class="{ 'event-option-checkbox--selected': isEventOptionSelected(option) }"
                            >
                              <div class="event-option-label">{{ option }}</div>
                              <svg
                                v-if="isEventOptionSelected(option)"
                                width="16"
                                height="16"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                                class="event-option-checkmark"
                              >
                                <path
                                  d="M20 6L9 17L4 12"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </div>
                          </div>

                          <!-- Custom event options -->
                          <div
                            v-for="(option, index) in form.customEventOptions"
                            :key="'custom-' + index"
                            class="event-option-item"
                          >
                            <div class="event-option-checkbox event-option-checkbox--selected">
                              <div class="event-option-label">{{ option }}</div>
                              <button
                                type="button"
                                @click="removeCustomEventOption(index)"
                                class="remove-option-btn"
                                aria-label="Remove option"
                              >
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>
                        </div>

                        <div class="add-event-option">
                          <div class="custom-event-option-input">
                            <input
                              type="text"
                              v-model="newCustomEventOption"
                              placeholder="Add your own event option..."
                              class="form-input custom-option-input"
                              @keyup.enter="addCustomEventOption"
                            />
                            <button
                              type="button"
                              class="add-custom-option-btn"
                              @click="addCustomEventOption"
                              :disabled="!newCustomEventOption.trim()"
                            >
                              Add
                            </button>
                          </div>
                        </div>
                      </div>

                      <div class="form-checkbox-wrapper mt-4">
                        <input id="featured" v-model="form.featured" type="checkbox" class="form-checkbox" />
                        <label for="featured" class="form-checkbox-label">
                          Feature this event (additional promotion fee may apply)
                        </label>
                      </div>
                      <p class="form-helper">Featured events show up on the homepage</p>
                    </div>

                    <!-- Add new FAQ section -->
                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Frequently Asked Questions
                        <span class="section-optional">(Optional)</span>
                      </h2>

                      <p class="section-intro">
                        Help attendees by answering common questions about your event. You can edit these
                        defaults or add your own.
                      </p>

                      <div class="faq-container">
                        <div v-for="(faq, index) in form.faqs" :key="index" class="faq-item">
                          <div class="faq-header">
                            <h3 class="faq-number">Q{{ index + 1 }}</h3>
                            <div class="faq-actions">
                              <button
                                type="button"
                                @click="removeFaq(index)"
                                class="faq-action-btn faq-action-remove"
                                title="Remove question"
                              >
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>

                          <div class="faq-content">
                            <div class="form-group">
                              <label :for="'faq-question-' + index" class="form-label">Question</label>
                              <input
                                :id="'faq-question-' + index"
                                v-model="faq.question"
                                type="text"
                                class="form-input"
                                placeholder="Enter a question guests might ask"
                              />
                            </div>

                            <div class="form-group">
                              <label :for="'faq-answer-' + index" class="form-label">Answer</label>
                              <textarea
                                :id="'faq-answer-' + index"
                                v-model="faq.answer"
                                class="form-textarea faq-answer"
                                rows="3"
                                placeholder="Provide a clear answer to the question"
                              ></textarea>
                            </div>
                          </div>
                        </div>

                        <button type="button" @click="addFaq" class="add-faq-btn">
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 5V19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                            <path
                              d="M5 12H19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                          <span>Add Another Question</span>
                        </button>
                      </div>
                    </div>

                    <div class="form-actions">
                      <button type="button" @click="resetForm" class="btn-secondary" :disabled="isSubmitting">
                        Reset Form
                      </button>
                      <button type="submit" class="btn-primary" :disabled="isSubmitting">
                        <span v-if="isSubmitting">
                          <svg class="spinner" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="12" cy="12" r="10" fill="none" stroke-width="3" />
                          </svg>
                          Creating Event...
                        </span>
                        <span v-else>Create Event</span>
                      </button>
                    </div>
                  </form>

                  <div class="create-event__note">
                    <p>
                      <strong>Note:</strong> Your event data is saved locally for now. Online saving coming
                      soon.
                    </p>
                  </div>
                </div>

                <div
                  v-if="showTemplateModal"
                  class="ticket-template-modal-overlay"
                  @click.self="closeTemplateModal"
                >
                  <div class="ticket-template-modal">
                    <div class="ticket-template-modal-header">
                      <h3>Choose a Ticket Template</h3>
                      <button @click="closeTemplateModal" class="modal-close-btn" aria-label="Close">
                        <svg
                          width="20"
                          height="20"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M18 6L6 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M6 6L18 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>
                    <div class="ticket-template-modal-body">
                      <div
                        v-for="template in ticketTemplates"
                        :key="template.name"
                        class="template-card"
                        @click="applyTemplateFromModal(activeTicketIndex, template)"
                      >
                        <div class="template-card-content">
                          <h4 class="template-name">{{ template.name }}</h4>
                          <p class="template-description">{{ template.description }}</p>
                        </div>
                        <div class="template-card-icon">
                          <svg
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M20 6L9 17L4 12"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Add subcategory modal -->
                <div
                  v-if="showSubCategoryModal"
                  class="subcategory-modal-overlay"
                  @click.self="closeSubCategoryModal"
                >
                  <div class="subcategory-modal">
                    <div class="subcategory-modal-header">
                      <h3>Select or Add Subcategories</h3>
                      <button @click="closeSubCategoryModal" class="modal-close-btn" aria-label="Close">
                        <svg
                          width="20"
                          height="20"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M18 6L6 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M6 6L18 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>
                    <div class="subcategory-modal-body">
                      <p class="subcategory-modal-info">Select up to 5 subcategories or add your own</p>

                      <div class="subcategory-search">
                        <input
                          type="text"
                          v-model="subcategorySearchTerm"
                          placeholder="Search subcategories..."
                          class="subcategory-search-input"
                        />
                      </div>

                      <div class="subcategory-options">
                        <div class="subcategory-section">
                          <h4 class="subcategory-section-title">Available Subcategories</h4>
                          <div class="subcategory-chips">
                            <div
                              v-for="subCategory in filteredSubCategories"
                              :key="subCategory.id"
                              class="subcategory-chip"
                              :class="{ 'subcategory-chip--selected': isSubCategorySelected(subCategory.id) }"
                              @click="toggleSubCategory(subCategory.id)"
                            >
                              <span>{{ subCategory.name }}</span>
                              <svg
                                v-if="isSubCategorySelected(subCategory.id)"
                                width="16"
                                height="16"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M20 6L9 17L4 12"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </div>
                          </div>
                        </div>

                        <div class="subcategory-section">
                          <h4 class="subcategory-section-title">Custom Subcategories</h4>
                          <div class="custom-subcategory-input">
                            <input
                              type="text"
                              v-model="newCustomSubCategory"
                              placeholder="Enter your own subcategory..."
                              class="form-input custom-input"
                              @keyup.enter="addCustomSubCategory"
                            />
                            <button
                              type="button"
                              class="add-custom-btn"
                              @click="addCustomSubCategory"
                              :disabled="!newCustomSubCategory.trim()"
                            >
                              Add
                            </button>
                          </div>

                          <div class="subcategory-chips custom-chips">
                            <div
                              v-for="(custom, index) in customSubCategories"
                              :key="'custom-' + index"
                              class="subcategory-chip subcategory-chip--custom"
                            >
                              <span>{{ custom }}</span>
                              <button
                                class="remove-custom-btn"
                                @click="removeCustomSubCategory(index)"
                                aria-label="Remove"
                              >
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>

                      <div class="subcategory-modal-footer">
                        <div class="subcategory-summary">
                          <span class="subcategory-count">{{ selectedSubCategoriesCount }}/5 selected</span>
                        </div>
                        <div class="subcategory-actions">
                          <button type="button" class="btn-secondary" @click="closeSubCategoryModal">
                            Cancel
                          </button>
                          <button type="button" class="btn-primary" @click="confirmSubCategories">Apply</button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Custom Time Picker Modal -->
                <div v-if="isTimePickerOpen" class="time-picker-overlay" @click.self="closeTimePicker">
                  <div class="time-picker-modal">
                    <div class="time-picker-header">
                      <h3>Select Time</h3>
                      <button type="button" class="time-picker-close" @click="closeTimePicker">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M18 6L6 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M6 6L18 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>
                    <div class="time-picker-body">
                      <!-- Custom time input -->
                      <div class="custom-time-input">
                        <div class="time-input-group">
                          <input
                            type="text"
                            v-model="customHours"
                            class="time-input-field"
                            maxlength="2"
                            @focus="$event.target.select()"
                            @blur="formatTimeInputs"
                            @keydown="handleTimeInput"
                            placeholder="HH"
                          />
                          <span class="time-divider">:</span>
                          <input
                            type="text"
                            v-model="customMinutes"
                            class="time-input-field"
                            maxlength="2"
                            @focus="$event.target.select()"
                            @blur="formatTimeInputs"
                            @keydown="handleTimeInput"
                            placeholder="MM"
                          />
                        </div>
                      </div>

                      <div class="time-picker-grid">
                        <div
                          v-for="time in timeOptions"
                          :key="time"
                          class="time-option"
                          :class="{ selected: selectedTime === time }"
                          @click="selectTime(time)"
                        >
                          {{ time }}
                        </div>
                      </div>
                      <div class="time-period-selector">
                        <button
                          type="button"
                          class="time-period-btn"
                          :class="{ selected: selectedPeriod === 'AM' }"
                          @click="selectPeriod('AM')"
                        >
                          AM
                        </button>
                        <button
                          type="button"
                          class="time-period-btn"
                          :class="{ selected: selectedPeriod === 'PM' }"
                          @click="selectPeriod('PM')"
                        >
                          PM
                        </button>
                      </div>
                    </div>
                    <div class="time-picker-actions">
                      <button type="button" class="time-picker-btn time-picker-cancel" @click="closeTimePicker">
                        Cancel
                      </button>
                      <button
                        type="button"
                        class="time-picker-btn time-picker-apply"
                        @click="applyTimeSelection"
                      >
                        Apply
                      </button>
                    </div>
                  </div>
                </div>

                <!-- Custom Date Picker Modal -->
                <div v-if="isDatePickerOpen" class="date-picker-overlay" @click.self="closeDatePicker">
                  <div class="date-picker-modal">
                    <div class="date-picker-header">
                      <h3>Select Date</h3>
                      <button type="button" class="date-picker-close" @click="closeDatePicker">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M18 6L6 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M6 6L18 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>
                    <div class="date-picker-body">
                      <div class="date-picker-month-nav">
                        <button class="month-nav-btn" @click="previousMonth">
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M15 18L9 12L15 6"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                        </button>
                        <div class="month-display">{{ monthNames[currentMonth] }} {{ currentYear }}</div>
                        <button class="month-nav-btn" @click="nextMonth">
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M9 18L15 12L9 6"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                        </button>
                      </div>

                      <div class="date-picker-weekdays">
                        <div class="weekday" v-for="day in weekdays" :key="day">{{ day }}</div>
                      </div>

                      <div class="date-picker-days">
                        <div
                          v-for="(day, index) in calendarDays"
                          :key="index"
                          class="calendar-day"
                          :class="{
                            'other-month': !day.inCurrentMonth,
                            today: day.isToday,
                            selected: day.isSelected,
                            disabled: day.isDisabled,
                          }"
                          @click="!day.isDisabled && selectDate(day.date)"
                        >
                          {{ day.day }}
                        </div>
                      </div>
                    </div>
                    <div class="date-picker-actions">
                      <button type="button" class="date-picker-btn date-picker-cancel" @click="closeDatePicker">
                        Cancel
                      </button>
                      <button
                        type="button"
                        class="date-picker-btn date-picker-apply"
                        @click="applyDateSelection"
                      >
                        Apply
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            

            <div class="create-event">
              <div class="container">
                <router-link to="/" class="back-link">
                  <svg
                    width="20"
                    height="20"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M19 12H5"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                    <path
                      d="M12 19L5 12L12 5"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                  <span>BACK</span>
                </router-link>

                <div class="create-event__header">
                  <h1 class="create-event__title">Make Your Event dYZ%</h1>
                  <p class="create-event__subtitle">
                    Fill out this form to create your event - it's easy!
                  </p>
                  <button type="button" @click="prefillForm" class="prefill-button">
                    Prefill with Test Data
                  </button>
                </div>

                <div v-if="error" class="create-event__alert create-event__alert--error">
                  {{ error }}
                </div>

                <div v-if="success" class="create-event__alert create-event__alert--success">
                  Event created successfully! Redirecting to event page...
                </div>

                <form @submit.prevent="handleSubmit" class="create-event__form">
                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Event Information
                    </h2>

                    <div class="form-group">
                      <label for="title" class="form-label">Event Name</label>
                      <input
                        id="title"
                        v-model="form.title"
                        type="text"
                        class="form-input"
                        :class="{ 'form-input--error': !validation.title.valid }"
                        placeholder="What's your event called?"
                      />
                      <p v-if="!validation.title.valid" class="form-error">
                        {{ validation.title.message }}
                      </p>
                      <p v-else class="form-helper">
                        Name it something people will understand right away
                      </p>
                    </div>

                    <div class="form-group">
                      <label for="organizer" class="form-label">Organizer Name</label>
                      <input
                        id="organizer"
                        v-model="form.organizer"
                        type="text"
                        class="form-input"
                        :class="{ 'form-input--error': !validation.organizer.valid }"
                        placeholder="Who's hosting this?"
                      />
                      <p v-if="!validation.organizer.valid" class="form-error">
                        {{ validation.organizer.message }}
                      </p>
                    </div>

                    <div class="form-group">
                      <label for="category" class="form-label">Event Category</label>
                      <select
                        id="category"
                        v-model="form.category"
                        class="form-select"
                        :class="{ 'form-input--error': !validation.category.valid }"
                      >
                        <option value="" disabled>Select a category</option>
                        <option
                          v-for="category in categories"
                          :key="category.id"
                          :value="category.id"
                        >
                          {{ category.name }}
                        </option>
                      </select>
                      <p v-if="!validation.category.valid" class="form-error">
                        {{ validation.category.message }}
                      </p>
                      <p v-else class="form-helper">
                        The right category helps people find your event
                      </p>
                    </div>

                    <div class="form-group">
                      <label class="form-label">Sub Categories</label>
                      <div class="subcategories-display">
                        <div class="selected-subcategories">
                          <div v-if="displayedSubCategories.length === 0" class="no-subcategories">
                            No subcategories selected
                          </div>
                          <div
                            v-for="(subCat, index) in displayedSubCategories"
                            :key="index"
                            class="selected-subcategory"
                          >
                            <span>{{ getSubCategoryName(subCat) }}</span>
                            <button
                              type="button"
                              @click="removeSubCategoryById(subCat)"
                              class="remove-subcategory-btn"
                              aria-label="Remove subcategory"
                            >
                              <svg
                                width="14"
                                height="14"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M18 6L6 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                                <path
                                  d="M6 6L18 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>
                        <button
                          type="button"
                          @click="openSubCategoryModal"
                          class="manage-subcategories-btn"
                          :disabled="form.category === ''"
                        >
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 5V19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                            <path
                              d="M5 12H19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                          <span
                            >{{
                              displayedSubCategories.length ? 'Edit' : 'Add'
                            }}
                            Subcategories</span
                          >
                        </button>
                      </div>
                      <p v-if="!validation.subCategories.valid" class="form-error">
                        {{ validation.subCategories.message }}
                      </p>
                      <p v-else class="form-helper">
                        Add up to 5 subcategories to describe your event better
                      </p>
                    </div>

                    <div class="form-group">
                      <label for="description" class="form-label">Event Description</label>
                      <textarea
                        id="description"
                        v-model="form.description"
                        class="form-textarea"
                        :class="{ 'form-input--error': !validation.description.valid }"
                        placeholder="Tell people what makes your event special..."
                        rows="5"
                      ></textarea>
                      <p v-if="!validation.description.valid" class="form-error">
                        {{ validation.description.message }}
                      </p>
                      <p v-else class="form-helper">Tell people what will happen at your event</p>
                    </div>

                    <div class="form-group">
                      <label class="form-label">Event Images</label>
                      <div class="image-upload-container">
                        <div class="image-upload-row">
                          <div
                            class="image-upload-dropzone"
                            :class="{ 'has-image': mainImagePreview }"
                            @click="triggerMainImageUpload"
                            @dragover.prevent
                            @drop.prevent="handleMainImageDrop"
                          >
                            <img
                              v-if="mainImagePreview"
                              :src="mainImagePreview"
                              alt="Main image preview"
                              class="preview-image"
                            />
                            <div v-if="mainImagePreview" class="image-overlay">
                              <button
                                type="button"
                                class="remove-image-btn"
                                @click.stop="removeMainImage"
                              >
                                <svg
                                  width="20"
                                  height="20"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                                <span>Remove</span>
                              </button>
                            </div>
                            <div v-else class="upload-placeholder">
                              <div class="upload-icon">
                                <svg
                                  width="32"
                                  height="32"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <rect
                                    x="3"
                                    y="3"
                                    width="18"
                                    height="18"
                                    rx="2"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                  />
                                  <path
                                    d="M3 16L7 12C7.94 11.06 9.44 11.06 10.38 12L16.5 18"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                    stroke-linecap="round"
                                  />
                                  <path
                                    d="M14 16L16 14C16.94 13.06 18.44 13.06 19.38 14L21 15.5"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                    stroke-linecap="round"
                                  />
                                  <circle
                                    cx="9"
                                    cy="8"
                                    r="2"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                  />
                                </svg>
                              </div>
                              <div class="upload-text">
                                <span class="primary-text">Main Event Image</span>
                                <span class="secondary-text">Drag & drop or click to upload</span>
                              </div>
                            </div>
                          </div>

                          <div
                            class="image-upload-dropzone banner-dropzone"
                            :class="{ 'has-image': bannerImagePreview }"
                            @click="triggerBannerImageUpload"
                            @dragover.prevent
                            @drop.prevent="handleBannerImageDrop"
                          >
                            <img
                              v-if="bannerImagePreview"
                              :src="bannerImagePreview"
                              alt="Banner image preview"
                              class="preview-image"
                            />
                            <div v-if="bannerImagePreview" class="image-overlay">
                              <button
                                type="button"
                                class="remove-image-btn"
                                @click.stop="removeBannerImage"
                              >
                                <svg
                                  width="20"
                                  height="20"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                                <span>Remove</span>
                              </button>
                            </div>
                            <div v-else class="upload-placeholder">
                              <div class="upload-icon">
                                <svg
                                  width="32"
                                  height="32"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <rect
                                    x="2"
                                    y="4"
                                    width="20"
                                    height="13"
                                    rx="2"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                  />
                                  <path
                                    d="M2 13L6 9C6.94 8.06 8.44 8.06 9.38 9L15.5 15"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                    stroke-linecap="round"
                                  />
                                  <path
                                    d="M14 13L16 11C16.94 10.06 18.44 10.06 19.38 11L22 13.5"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                    stroke-linecap="round"
                                  />
                                  <circle
                                    cx="8"
                                    cy="7"
                                    r="1.5"
                                    stroke="currentColor"
                                    stroke-width="1.5"
                                  />
                                </svg>
                              </div>
                              <div class="upload-text">
                                <span class="primary-text">Banner Image</span>
                                <span class="secondary-text">Drag & drop or click to upload</span>
                              </div>
                            </div>
                          </div>
                        </div>

                        <div class="image-inputs">
                          <input
                            id="mainImage"
                            ref="mainImageInput"
                            type="file"
                            class="image-input"
                            accept="image/*"
                            @change="handleMainImageUpload"
                          />
                          <input
                            id="bannerImage"
                            ref="bannerImageInput"
                            type="file"
                            class="image-input"
                            accept="image/*"
                            @change="handleBannerImageUpload"
                          />
                        </div>
                      </div>
                      <p
                        v-if="!validation.mainImage.valid || !validation.bannerImage.valid"
                        class="form-error"
                      >
                        {{
                          !validation.mainImage.valid
                            ? validation.mainImage.message
                            : validation.bannerImage.message
                        }}
                      </p>
                      <p v-else class="form-helper">
                        Upload images for your event. The main image will appear on cards throughout
                        the site, while the banner will be displayed on your event's detail page.
                      </p>
                    </div>
                  </div>

                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Date & Time
                    </h2>

                    <div class="form-row">
                      <div class="form-group">
                        <label for="date" class="form-label">Event Date</label>
                        <div class="date-picker-wrapper">
                          <input
                            id="date"
                            v-model="form.date"
                            type="text"
                            readonly
                            class="form-input date-input"
                            :class="{ 'form-input--error': !validation.date.valid }"
                            :min="today"
                            @click="openDatePicker"
                          />
                          <div v-if="showDateTip" class="picker-tip">
                            <div class="tip-arrow"></div>
                            <div class="tip-content">
                              <p>Click to open calendar</p>
                              <span>Select a date for your event</span>
                            </div>
                          </div>
                        </div>
                        <p v-if="!validation.date.valid" class="form-error">
                          {{ validation.date.message }}
                        </p>
                        <p v-else class="form-helper">Click to open the calendar</p>
                      </div>

                      <div class="form-group">
                        <label for="time" class="form-label">Start Time</label>
                        <div class="time-picker-wrapper">
                          <input
                            id="time"
                            v-model="form.time"
                            type="text"
                            readonly
                            class="form-input time-input"
                            :class="{ 'form-input--error': !validation.time.valid }"
                            @click="openTimePicker"
                            placeholder="Select a time"
                          />
                          <div v-if="showTimeTip" class="picker-tip">
                            <div class="tip-arrow"></div>
                            <div class="tip-content">
                              <p>Click to select time</p>
                              <span>Use our easy time selector</span>
                            </div>
                          </div>
                        </div>
                        <p v-if="!validation.time.valid" class="form-error">
                          {{ validation.time.message }}
                        </p>
                        <p v-else class="form-helper">Click to open time selector</p>
                      </div>
                    </div>

                    <div class="form-group">
                      <label for="duration" class="form-label">Event Duration</label>
                      <select id="duration" v-model="form.duration" class="form-select">
                        <option value="" disabled>Select duration</option>
                        <option v-for="option in durationOptions" :key="option" :value="option">
                          {{ option }}
                        </option>
                      </select>
                      <p class="form-helper">Tell people how long your event will last</p>
                    </div>
                  </div>

                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Location Details
                    </h2>

                    <div class="form-group">
                      <label for="location" class="form-label">Venue Name & Address</label>
                      <input
                        id="location"
                        v-model="form.location"
                        type="text"
                        class="form-input"
                        :class="{ 'form-input--error': !validation.location.valid }"
                        placeholder="Where is your event happening?"
                      />
                      <p v-if="!validation.location.valid" class="form-error">
                        {{ validation.location.message }}
                      </p>
                      <p v-else class="form-helper">
                        Add the full address so people can find your event
                      </p>
                    </div>

                    <div class="location-map-placeholder">
                      <div class="location-map-content">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="24"
                          height="24"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        >
                          <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                          <circle cx="12" cy="10" r="3"></circle>
                        </svg>
                        <p>Maps coming soon</p>
                      </div>
                    </div>
                  </div>

                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Ticket Information
                    </h2>

                    <div v-if="!validation.ticketTypes.valid" class="form-error ticket-types-error">
                      {{ validation.ticketTypes.message }}
                    </div>

                    <div class="ticket-types-container">
                      <div
                        v-for="(ticket, index) in form.ticketTypes"
                        :key="index"
                        class="ticket-type-card"
                      >
                        <div class="ticket-type-header">
                          <h3 class="ticket-type-title">Ticket #{{ index + 1 }}</h3>
                          <div class="ticket-type-actions">
                            <button
                              type="button"
                              @click="duplicateTicketType(index)"
                              class="ticket-action-btn ticket-action-duplicate"
                              title="Duplicate ticket"
                            >
                              <svg
                                width="16"
                                height="16"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <rect
                                  x="9"
                                  y="9"
                                  width="13"
                                  height="13"
                                  rx="2"
                                  stroke="currentColor"
                                  stroke-width="2"
                                />
                                <path
                                  d="M5 15H4C2.89543 15 2 14.1046 2 13V4C2 2.89543 2.89543 2 4 2H13C14.1046 2 15 2.89543 15 4V5"
                                  stroke="currentColor"
                                  stroke-width="2"
                                />
                              </svg>
                            </button>
                            <button
                              type="button"
                              @click="removeTicketType(index)"
                              class="ticket-action-btn ticket-action-remove"
                              title="Remove ticket"
                              :disabled="form.ticketTypes.length <= 1"
                            >
                              <svg
                                width="16"
                                height="16"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M18 6L6 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                                <path
                                  d="M6 6L18 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>

                        <div class="form-group">
                          <label :for="'ticket-name-' + index" class="form-label"
                            >Ticket Name</label
                          >
                          <div class="ticket-name-input-wrapper">
                            <input
                              :id="'ticket-name-' + index"
                              v-model="ticket.name"
                              type="text"
                              class="form-input"
                              placeholder="e.g. Early Bird, VIP, General Admission"
                            />
                            <div class="ticket-template-dropdown">
                              <button
                                type="button"
                                class="ticket-template-btn"
                                @click="openTemplateModal(index)"
                              >
                                <span>Templates</span>
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M6 9L12 15L18 9"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                              <div class="ticket-template-options">
                                <button
                                  v-for="template in ticketTemplates"
                                  :key="template.name"
                                  type="button"
                                  class="ticket-template-option"
                                  @click="applyTemplate(index, template)"
                                >
                                  {{ template.name }}
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>

                        <div class="form-row">
                          <div class="form-group">
                            <label :for="'ticket-price-' + index" class="form-label"
                              >Price ($)</label
                            >
                            <input
                              :id="'ticket-price-' + index"
                              v-model.number="ticket.price"
                              type="number"
                              min="0"
                              step="0.01"
                              class="form-input"
                              placeholder="0.00"
                            />
                          </div>

                          <div class="form-group">
                            <label :for="'ticket-quantity-' + index" class="form-label"
                              >Quantity</label
                            >
                            <input
                              :id="'ticket-quantity-' + index"
                              v-model.number="ticket.quantity"
                              type="number"
                              min="1"
                              class="form-input"
                              placeholder="10"
                            />
                          </div>
                        </div>

                        <div class="form-group">
                          <label :for="'ticket-description-' + index" class="form-label"
                            >Description (Optional)</label
                          >
                          <textarea
                            :id="'ticket-description-' + index"
                            v-model="ticket.description"
                            class="form-textarea ticket-description"
                            rows="2"
                            placeholder="Describe what's included with this ticket"
                          ></textarea>
                        </div>

                        <div class="ticket-sales-period">
                          <h4 class="ticket-section-subtitle">Sales End Date</h4>
                          <p class="ticket-section-helper">
                            Should this ticket type have a deadline? If yes, tell us when sales
                            should stop. This is optional.
                          </p>

                          <div class="form-row">
                            <div class="form-group">
                              <label :for="'ticket-end-date-' + index" class="form-label"
                                >Date</label
                              >
                              <input
                                :id="'ticket-end-date-' + index"
                                v-model="ticket.salesEndDate"
                                type="date"
                                class="form-input"
                                :min="today"
                                :max="form.date"
                              />
                            </div>

                            <div class="form-group">
                              <label :for="'ticket-end-time-' + index" class="form-label"
                                >Time</label
                              >
                              <input
                                :id="'ticket-end-time-' + index"
                                v-model="ticket.salesEndTime"
                                type="time"
                                class="form-input"
                              />
                            </div>
                          </div>
                        </div>

                        <div class="form-checkbox-wrapper">
                          <input
                            :id="'ticket-featured-' + index"
                            v-model="ticket.isFeatured"
                            type="checkbox"
                            class="form-checkbox"
                          />
                          <label :for="'ticket-featured-' + index" class="form-checkbox-label">
                            Feature this ticket (highlighted in the ticket selection)
                          </label>
                        </div>
                      </div>

                      <button type="button" @click="addTicketType" class="add-ticket-type-btn">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M12 5V19"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M5 12H19"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                        <span>Add Another Ticket Type</span>
                      </button>
                    </div>
                  </div>

                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Event Options
                    </h2>

                    <p class="section-intro">
                      Select features and amenities that your event offers to help attendees know
                      what to expect.
                    </p>

                    <div class="event-options-container">
                      <div class="event-options-grid">
                        <!-- Predefined event options -->
                        <div
                          v-for="option in predefinedEventOptions"
                          :key="'predefined-' + option"
                          class="event-option-item"
                          @click="toggleEventOption(option)"
                        >
                          <div
                            class="event-option-checkbox"
                            :class="{
                              'event-option-checkbox--selected': isEventOptionSelected(option),
                            }"
                          >
                            <div class="event-option-label">{{ option }}</div>
                            <svg
                              v-if="isEventOptionSelected(option)"
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                              class="event-option-checkmark"
                            >
                              <path
                                d="M20 6L9 17L4 12"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                              />
                            </svg>
                          </div>
                        </div>

                        <!-- Custom event options -->
                        <div
                          v-for="(option, index) in form.customEventOptions"
                          :key="'custom-' + index"
                          class="event-option-item"
                        >
                          <div class="event-option-checkbox event-option-checkbox--selected">
                            <div class="event-option-label">{{ option }}</div>
                            <button
                              type="button"
                              @click="removeCustomEventOption(index)"
                              class="remove-option-btn"
                              aria-label="Remove option"
                            >
                              <svg
                                width="14"
                                height="14"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M18 6L6 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                                <path
                                  d="M6 6L18 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>
                      </div>

                      <div class="add-event-option">
                        <div class="custom-event-option-input">
                          <input
                            type="text"
                            v-model="newCustomEventOption"
                            placeholder="Add your own event option..."
                            class="form-input custom-option-input"
                            @keyup.enter="addCustomEventOption"
                          />
                          <button
                            type="button"
                            class="add-custom-option-btn"
                            @click="addCustomEventOption"
                            :disabled="!newCustomEventOption.trim()"
                          >
                            Add
                          </button>
                        </div>
                      </div>
                    </div>

                    <div class="form-checkbox-wrapper mt-4">
                      <input
                        id="featured"
                        v-model="form.featured"
                        type="checkbox"
                        class="form-checkbox"
                      />
                      <label for="featured" class="form-checkbox-label">
                        Feature this event (additional promotion fee may apply)
                      </label>
                    </div>
                    <p class="form-helper">Featured events show up on the homepage</p>
                  </div>

                  <!-- Add new FAQ section -->
                  <div class="form-section">
                    <h2 class="section-title">
                      <span class="diamond"></span>
                      Frequently Asked Questions
                      <span class="section-optional">(Optional)</span>
                    </h2>

                    <p class="section-intro">
                      Help attendees by answering common questions about your event. You can edit
                      these defaults or add your own.
                    </p>

                    <div class="faq-container">
                      <div v-for="(faq, index) in form.faqs" :key="index" class="faq-item">
                        <div class="faq-header">
                          <h3 class="faq-number">Q{{ index + 1 }}</h3>
                          <div class="faq-actions">
                            <button
                              type="button"
                              @click="removeFaq(index)"
                              class="faq-action-btn faq-action-remove"
                              title="Remove question"
                            >
                              <svg
                                width="14"
                                height="14"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M18 6L6 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                                <path
                                  d="M6 6L18 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>

                        <div class="faq-content">
                          <div class="form-group">
                            <label :for="'faq-question-' + index" class="form-label"
                              >Question</label
                            >
                            <input
                              :id="'faq-question-' + index"
                              v-model="faq.question"
                              type="text"
                              class="form-input"
                              placeholder="Enter a question guests might ask"
                            />
                          </div>

                          <div class="form-group">
                            <label :for="'faq-answer-' + index" class="form-label">Answer</label>
                            <textarea
                              :id="'faq-answer-' + index"
                              v-model="faq.answer"
                              class="form-textarea faq-answer"
                              rows="3"
                              placeholder="Provide a clear answer to the question"
                            ></textarea>
                          </div>
                        </div>
                      </div>

                      <button type="button" @click="addFaq" class="add-faq-btn">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M12 5V19"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M5 12H19"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                        <span>Add Another Question</span>
                      </button>
                    </div>
                  </div>

                  <div class="form-actions">
                    <button
                      type="button"
                      @click="resetForm"
                      class="btn-secondary"
                      :disabled="isSubmitting"
                    >
                      Reset Form
                    </button>
                    <button type="submit" class="btn-primary" :disabled="isSubmitting">
                      <span v-if="isSubmitting">
                        <svg class="spinner" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <circle cx="12" cy="12" r="10" fill="none" stroke-width="3" />
                        </svg>
                        Creating Event...
                      </span>
                      <span v-else>Create Event</span>
                    </button>
                  </div>
                </form>

                <div class="create-event__note">
                  <p>
                    <strong>Note:</strong> Your event data is saved locally for now. Online saving
                    coming soon.
                  </p>
                </div>
              </div>

              <div
                v-if="showTemplateModal"
                class="ticket-template-modal-overlay"
                @click.self="closeTemplateModal"
              >
                <div class="ticket-template-modal">
                  <div class="ticket-template-modal-header">
                    <h3>Choose a Ticket Template</h3>
                    <button @click="closeTemplateModal" class="modal-close-btn" aria-label="Close">
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                  </div>
                  <div class="ticket-template-modal-body">
                    <div
                      v-for="template in ticketTemplates"
                      :key="template.name"
                      class="template-card"
                      @click="applyTemplateFromModal(activeTicketIndex, template)"
                    >
                      <div class="template-card-content">
                        <h4 class="template-name">{{ template.name }}</h4>
                        <p class="template-description">{{ template.description }}</p>
                      </div>
                      <div class="template-card-icon">
                        <svg
                          width="24"
                          height="24"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M20 6L9 17L4 12"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Add subcategory modal -->
              <div
                v-if="showSubCategoryModal"
                class="subcategory-modal-overlay"
                @click.self="closeSubCategoryModal"
              >
                <div class="subcategory-modal">
                  <div class="subcategory-modal-header">
                    <h3>Select or Add Subcategories</h3>
                    <button
                      @click="closeSubCategoryModal"
                      class="modal-close-btn"
                      aria-label="Close"
                    >
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                  </div>
                  <div class="subcategory-modal-body">
                    <p class="subcategory-modal-info">
                      Select up to 5 subcategories or add your own
                    </p>

                    <div class="subcategory-search">
                      <input
                        type="text"
                        v-model="subcategorySearchTerm"
                        placeholder="Search subcategories..."
                        class="subcategory-search-input"
                      />
                    </div>

                    <div class="subcategory-options">
                      <div class="subcategory-section">
                        <h4 class="subcategory-section-title">Available Subcategories</h4>
                        <div class="subcategory-chips">
                          <div
                            v-for="subCategory in filteredSubCategories"
                            :key="subCategory.id"
                            class="subcategory-chip"
                            :class="{
                              'subcategory-chip--selected': isSubCategorySelected(subCategory.id),
                            }"
                            @click="toggleSubCategory(subCategory.id)"
                          >
                            <span>{{ subCategory.name }}</span>
                            <svg
                              v-if="isSubCategorySelected(subCategory.id)"
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M20 6L9 17L4 12"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                              />
                            </svg>
                          </div>
                        </div>
                      </div>

                      <div class="subcategory-section">
                        <h4 class="subcategory-section-title">Custom Subcategories</h4>
                        <div class="custom-subcategory-input">
                          <input
                            type="text"
                            v-model="newCustomSubCategory"
                            placeholder="Enter your own subcategory..."
                            class="form-input custom-input"
                            @keyup.enter="addCustomSubCategory"
                          />
                          <button
                            type="button"
                            class="add-custom-btn"
                            @click="addCustomSubCategory"
                            :disabled="!newCustomSubCategory.trim()"
                          >
                            Add
                          </button>
                        </div>

                        <div class="subcategory-chips custom-chips">
                          <div
                            v-for="(custom, index) in customSubCategories"
                            :key="'custom-' + index"
                            class="subcategory-chip subcategory-chip--custom"
                          >
                            <span>{{ custom }}</span>
                            <button
                              class="remove-custom-btn"
                              @click="removeCustomSubCategory(index)"
                              aria-label="Remove"
                            >
                              <svg
                                width="14"
                                height="14"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M18 6L6 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                                <path
                                  d="M6 6L18 18"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div class="subcategory-modal-footer">
                      <div class="subcategory-summary">
                        <span class="subcategory-count"
                          >{{ selectedSubCategoriesCount }}/5 selected</span
                        >
                      </div>
                      <div class="subcategory-actions">
                        <button type="button" class="btn-secondary" @click="closeSubCategoryModal">
                          Cancel
                        </button>
                        <button type="button" class="btn-primary" @click="confirmSubCategories">
                          Apply
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Custom Time Picker Modal -->
              <div
                v-if="isTimePickerOpen"
                class="time-picker-overlay"
                @click.self="closeTimePicker"
              >
                <div class="time-picker-modal">
                  <div class="time-picker-header">
                    <h3>Select Time</h3>
                    <button type="button" class="time-picker-close" @click="closeTimePicker">
                      <svg
                        width="16"
                        height="16"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                  </div>
                  <div class="time-picker-body">
                    <!-- Custom time input -->
                    <div class="custom-time-input">
                      <div class="time-input-group">
                        <input
                          type="text"
                          v-model="customHours"
                          class="time-input-field"
                          maxlength="2"
                          @focus="$event.target.select()"
                          @blur="formatTimeInputs"
                          @keydown="handleTimeInput"
                          placeholder="HH"
                        />
                        <span class="time-divider">:</span>
                        <input
                          type="text"
                          v-model="customMinutes"
                          class="time-input-field"
                          maxlength="2"
                          @focus="$event.target.select()"
                          @blur="formatTimeInputs"
                          @keydown="handleTimeInput"
                          placeholder="MM"
                        />
                      </div>
                    </div>

                    <div class="time-picker-grid">
                      <div
                        v-for="time in timeOptions"
                        :key="time"
                        class="time-option"
                        :class="{ selected: selectedTime === time }"
                        @click="selectTime(time)"
                      >
                        {{ time }}
                      </div>
                    </div>
                    <div class="time-period-selector">
                      <button
                        type="button"
                        class="time-period-btn"
                        :class="{ selected: selectedPeriod === 'AM' }"
                        @click="selectPeriod('AM')"
                      >
                        AM
                      </button>
                      <button
                        type="button"
                        class="time-period-btn"
                        :class="{ selected: selectedPeriod === 'PM' }"
                        @click="selectPeriod('PM')"
                      >
                        PM
                      </button>
                    </div>
                  </div>
                  <div class="time-picker-actions">
                    <button
                      type="button"
                      class="time-picker-btn time-picker-cancel"
                      @click="closeTimePicker"
                    >
                      Cancel
                    </button>
                    <button
                      type="button"
                      class="time-picker-btn time-picker-apply"
                      @click="applyTimeSelection"
                    >
                      Apply
                    </button>
                  </div>
                </div>
              </div>

              <!-- Custom Date Picker Modal -->
              <div
                v-if="isDatePickerOpen"
                class="date-picker-overlay"
                @click.self="closeDatePicker"
              >
                <div class="date-picker-modal">
                  <div class="date-picker-header">
                    <h3>Select Date</h3>
                    <button type="button" class="date-picker-close" @click="closeDatePicker">
                      <svg
                        width="16"
                        height="16"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                  </div>
                  <div class="date-picker-body">
                    <div class="date-picker-month-nav">
                      <button class="month-nav-btn" @click="previousMonth">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M15 18L9 12L15 6"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                      <div class="month-display">
                        {{ monthNames[currentMonth] }} {{ currentYear }}
                      </div>
                      <button class="month-nav-btn" @click="nextMonth">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M9 18L15 12L9 6"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>

                    <div class="date-picker-weekdays">
                      <div class="weekday" v-for="day in weekdays" :key="day">{{ day }}</div>
                    </div>

                    <div class="date-picker-days">
                      <div
                        v-for="(day, index) in calendarDays"
                        :key="index"
                        class="calendar-day"
                        :class="{
                          'other-month': !day.inCurrentMonth,
                          today: day.isToday,
                          selected: day.isSelected,
                          disabled: day.isDisabled,
                        }"
                        @click="!day.isDisabled && selectDate(day.date)"
                      >
                        {{ day.day }}
                      </div>
                    </div>
                  </div>
                  <div class="date-picker-actions">
                    <button
                      type="button"
                      class="date-picker-btn date-picker-cancel"
                      @click="closeDatePicker"
                    >
                      Cancel
                    </button>
                    <button
                      type="button"
                      class="date-picker-btn date-picker-apply"
                      @click="applyDateSelection"
                    >
                      Apply
                    </button>
                  </div>
                </div>
              </div>
            </div>
          

              <div class="create-event">
                <div class="container">
                  <router-link to="/" class="back-link">
                    <svg
                      width="20"
                      height="20"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M19 12H5"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M12 19L5 12L12 5"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                    <span>BACK</span>
                  </router-link>

                  <div class="create-event__header">
                    <h1 class="create-event__title">Make Your Event dYZ%</h1>
                    <p class="create-event__subtitle">Fill out this form to create your event - it's easy!</p>
                    <button type="button" @click="prefillForm" class="prefill-button">
                      Prefill with Test Data
                    </button>
                  </div>

                  <div v-if="error" class="create-event__alert create-event__alert--error">
                    {{ error }}
                  </div>

                  <div v-if="success" class="create-event__alert create-event__alert--success">
                    Event created successfully! Redirecting to event page...
                  </div>

                  <form @submit.prevent="handleSubmit" class="create-event__form">
                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Event Information
                      </h2>

                      <div class="form-group">
                        <label for="title" class="form-label">Event Name</label>
                        <input
                          id="title"
                          v-model="form.title"
                          type="text"
                          class="form-input"
                          :class="{ 'form-input--error': !validation.title.valid }"
                          placeholder="What's your event called?"
                        />
                        <p v-if="!validation.title.valid" class="form-error">{{ validation.title.message }}</p>
                        <p v-else class="form-helper">Name it something people will understand right away</p>
                      </div>

                      <div class="form-group">
                        <label for="organizer" class="form-label">Organizer Name</label>
                        <input
                          id="organizer"
                          v-model="form.organizer"
                          type="text"
                          class="form-input"
                          :class="{ 'form-input--error': !validation.organizer.valid }"
                          placeholder="Who's hosting this?"
                        />
                        <p v-if="!validation.organizer.valid" class="form-error">
                          {{ validation.organizer.message }}
                        </p>
                      </div>

                      <div class="form-group">
                        <label for="category" class="form-label">Event Category</label>
                        <select
                          id="category"
                          v-model="form.category"
                          class="form-select"
                          :class="{ 'form-input--error': !validation.category.valid }"
                        >
                          <option value="" disabled>Select a category</option>
                          <option v-for="category in categories" :key="category.id" :value="category.id">
                            {{ category.name }}
                          </option>
                        </select>
                        <p v-if="!validation.category.valid" class="form-error">
                          {{ validation.category.message }}
                        </p>
                        <p v-else class="form-helper">The right category helps people find your event</p>
                      </div>

                      <div class="form-group">
                        <label class="form-label">Sub Categories</label>
                        <div class="subcategories-display">
                          <div class="selected-subcategories">
                            <div v-if="displayedSubCategories.length === 0" class="no-subcategories">
                              No subcategories selected
                            </div>
                            <div
                              v-for="(subCat, index) in displayedSubCategories"
                              :key="index"
                              class="selected-subcategory"
                            >
                              <span>{{ getSubCategoryName(subCat) }}</span>
                              <button
                                type="button"
                                @click="removeSubCategoryById(subCat)"
                                class="remove-subcategory-btn"
                                aria-label="Remove subcategory"
                              >
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>
                          <button
                            type="button"
                            @click="openSubCategoryModal"
                            class="manage-subcategories-btn"
                            :disabled="form.category === ''"
                          >
                            <svg
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M12 5V19"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                              />
                              <path
                                d="M5 12H19"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                              />
                            </svg>
                            <span>{{ displayedSubCategories.length ? 'Edit' : 'Add' }} Subcategories</span>
                          </button>
                        </div>
                        <p v-if="!validation.subCategories.valid" class="form-error">
                          {{ validation.subCategories.message }}
                        </p>
                        <p v-else class="form-helper">
                          Add up to 5 subcategories to describe your event better
                        </p>
                      </div>

                      <div class="form-group">
                        <label for="description" class="form-label">Event Description</label>
                        <textarea
                          id="description"
                          v-model="form.description"
                          class="form-textarea"
                          :class="{ 'form-input--error': !validation.description.valid }"
                          placeholder="Tell people what makes your event special..."
                          rows="5"
                        ></textarea>
                        <p v-if="!validation.description.valid" class="form-error">
                          {{ validation.description.message }}
                        </p>
                        <p v-else class="form-helper">Tell people what will happen at your event</p>
                      </div>

                      <div class="form-group">
                        <label class="form-label">Event Images</label>
                        <div class="image-upload-container">
                          <div class="image-upload-row">
                            <div
                              class="image-upload-dropzone"
                              :class="{ 'has-image': mainImagePreview }"
                              @click="triggerMainImageUpload"
                              @dragover.prevent
                              @drop.prevent="handleMainImageDrop"
                            >
                              <img
                                v-if="mainImagePreview"
                                :src="mainImagePreview"
                                alt="Main image preview"
                                class="preview-image"
                              />
                              <div v-if="mainImagePreview" class="image-overlay">
                                <button type="button" class="remove-image-btn" @click.stop="removeMainImage">
                                  <svg
                                    width="20"
                                    height="20"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M18 6L6 18"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                    <path
                                      d="M6 6L18 18"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                  </svg>
                                  <span>Remove</span>
                                </button>
                              </div>
                              <div v-else class="upload-placeholder">
                                <div class="upload-icon">
                                  <svg
                                    width="32"
                                    height="32"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <rect
                                      x="3"
                                      y="3"
                                      width="18"
                                      height="18"
                                      rx="2"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                    />
                                    <path
                                      d="M3 16L7 12C7.94 11.06 9.44 11.06 10.38 12L16.5 18"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                    />
                                    <path
                                      d="M14 16L16 14C16.94 13.06 18.44 13.06 19.38 14L21 15.5"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                    />
                                    <circle cx="9" cy="8" r="2" stroke="currentColor" stroke-width="1.5" />
                                  </svg>
                                </div>
                                <div class="upload-text">
                                  <span class="primary-text">Main Event Image</span>
                                  <span class="secondary-text">Drag & drop or click to upload</span>
                                </div>
                              </div>
                            </div>

                            <div
                              class="image-upload-dropzone banner-dropzone"
                              :class="{ 'has-image': bannerImagePreview }"
                              @click="triggerBannerImageUpload"
                              @dragover.prevent
                              @drop.prevent="handleBannerImageDrop"
                            >
                              <img
                                v-if="bannerImagePreview"
                                :src="bannerImagePreview"
                                alt="Banner image preview"
                                class="preview-image"
                              />
                              <div v-if="bannerImagePreview" class="image-overlay">
                                <button type="button" class="remove-image-btn" @click.stop="removeBannerImage">
                                  <svg
                                    width="20"
                                    height="20"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M18 6L6 18"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                    <path
                                      d="M6 6L18 18"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                  </svg>
                                  <span>Remove</span>
                                </button>
                              </div>
                              <div v-else class="upload-placeholder">
                                <div class="upload-icon">
                                  <svg
                                    width="32"
                                    height="32"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <rect
                                      x="2"
                                      y="4"
                                      width="20"
                                      height="13"
                                      rx="2"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                    />
                                    <path
                                      d="M2 13L6 9C6.94 8.06 8.44 8.06 9.38 9L15.5 15"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                    />
                                    <path
                                      d="M14 13L16 11C16.94 10.06 18.44 10.06 19.38 11L22 13.5"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                    />
                                    <circle cx="8" cy="7" r="1.5" stroke="currentColor" stroke-width="1.5" />
                                  </svg>
                                </div>
                                <div class="upload-text">
                                  <span class="primary-text">Banner Image</span>
                                  <span class="secondary-text">Drag & drop or click to upload</span>
                                </div>
                              </div>
                            </div>
                          </div>

                          <div class="image-inputs">
                            <input
                              id="mainImage"
                              ref="mainImageInput"
                              type="file"
                              class="image-input"
                              accept="image/*"
                              @change="handleMainImageUpload"
                            />
                            <input
                              id="bannerImage"
                              ref="bannerImageInput"
                              type="file"
                              class="image-input"
                              accept="image/*"
                              @change="handleBannerImageUpload"
                            />
                          </div>
                        </div>
                        <p
                          v-if="!validation.mainImage.valid || !validation.bannerImage.valid"
                          class="form-error"
                        >
                          {{
                            !validation.mainImage.valid
                              ? validation.mainImage.message
                              : validation.bannerImage.message
                          }}
                        </p>
                        <p v-else class="form-helper">
                          Upload images for your event. The main image will appear on cards throughout the site,
                          while the banner will be displayed on your event's detail page.
                        </p>
                      </div>
                    </div>

                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Date & Time
                      </h2>

                      <div class="form-row">
                        <div class="form-group">
                          <label for="date" class="form-label">Event Date</label>
                          <div class="date-picker-wrapper">
                            <input
                              id="date"
                              v-model="form.date"
                              type="text"
                              readonly
                              class="form-input date-input"
                              :class="{ 'form-input--error': !validation.date.valid }"
                              :min="today"
                              @click="openDatePicker"
                            />
                            <div v-if="showDateTip" class="picker-tip">
                              <div class="tip-arrow"></div>
                              <div class="tip-content">
                                <p>Click to open calendar</p>
                                <span>Select a date for your event</span>
                              </div>
                            </div>
                          </div>
                          <p v-if="!validation.date.valid" class="form-error">{{ validation.date.message }}</p>
                          <p v-else class="form-helper">Click to open the calendar</p>
                        </div>

                        <div class="form-group">
                          <label for="time" class="form-label">Start Time</label>
                          <div class="time-picker-wrapper">
                            <input
                              id="time"
                              v-model="form.time"
                              type="text"
                              readonly
                              class="form-input time-input"
                              :class="{ 'form-input--error': !validation.time.valid }"
                              @click="openTimePicker"
                              placeholder="Select a time"
                            />
                            <div v-if="showTimeTip" class="picker-tip">
                              <div class="tip-arrow"></div>
                              <div class="tip-content">
                                <p>Click to select time</p>
                                <span>Use our easy time selector</span>
                              </div>
                            </div>
                          </div>
                          <p v-if="!validation.time.valid" class="form-error">{{ validation.time.message }}</p>
                          <p v-else class="form-helper">Click to open time selector</p>
                        </div>
                      </div>

                      <div class="form-group">
                        <label for="duration" class="form-label">Event Duration</label>
                        <select id="duration" v-model="form.duration" class="form-select">
                          <option value="" disabled>Select duration</option>
                          <option v-for="option in durationOptions" :key="option" :value="option">
                            {{ option }}
                          </option>
                        </select>
                        <p class="form-helper">Tell people how long your event will last</p>
                      </div>
                    </div>

                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Location Details
                      </h2>

                      <div class="form-group">
                        <label for="location" class="form-label">Venue Name & Address</label>
                        <input
                          id="location"
                          v-model="form.location"
                          type="text"
                          class="form-input"
                          :class="{ 'form-input--error': !validation.location.valid }"
                          placeholder="Where is your event happening?"
                        />
                        <p v-if="!validation.location.valid" class="form-error">
                          {{ validation.location.message }}
                        </p>
                        <p v-else class="form-helper">Add the full address so people can find your event</p>
                      </div>

                      <div class="location-map-placeholder">
                        <div class="location-map-content">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          >
                            <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                            <circle cx="12" cy="10" r="3"></circle>
                          </svg>
                          <p>Maps coming soon</p>
                        </div>
                      </div>
                    </div>

                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Ticket Information
                      </h2>

                      <div v-if="!validation.ticketTypes.valid" class="form-error ticket-types-error">
                        {{ validation.ticketTypes.message }}
                      </div>

                      <div class="ticket-types-container">
                        <div v-for="(ticket, index) in form.ticketTypes" :key="index" class="ticket-type-card">
                          <div class="ticket-type-header">
                            <h3 class="ticket-type-title">Ticket #{{ index + 1 }}</h3>
                            <div class="ticket-type-actions">
                              <button
                                type="button"
                                @click="duplicateTicketType(index)"
                                class="ticket-action-btn ticket-action-duplicate"
                                title="Duplicate ticket"
                              >
                                <svg
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <rect
                                    x="9"
                                    y="9"
                                    width="13"
                                    height="13"
                                    rx="2"
                                    stroke="currentColor"
                                    stroke-width="2"
                                  />
                                  <path
                                    d="M5 15H4C2.89543 15 2 14.1046 2 13V4C2 2.89543 2.89543 2 4 2H13C14.1046 2 15 2.89543 15 4V5"
                                    stroke="currentColor"
                                    stroke-width="2"
                                  />
                                </svg>
                              </button>
                              <button
                                type="button"
                                @click="removeTicketType(index)"
                                class="ticket-action-btn ticket-action-remove"
                                title="Remove ticket"
                                :disabled="form.ticketTypes.length <= 1"
                              >
                                <svg
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>

                          <div class="form-group">
                            <label :for="'ticket-name-' + index" class="form-label">Ticket Name</label>
                            <div class="ticket-name-input-wrapper">
                              <input
                                :id="'ticket-name-' + index"
                                v-model="ticket.name"
                                type="text"
                                class="form-input"
                                placeholder="e.g. Early Bird, VIP, General Admission"
                              />
                              <div class="ticket-template-dropdown">
                                <button
                                  type="button"
                                  class="ticket-template-btn"
                                  @click="openTemplateModal(index)"
                                >
                                  <span>Templates</span>
                                  <svg
                                    width="14"
                                    height="14"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M6 9L12 15L18 9"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                  </svg>
                                </button>
                                <div class="ticket-template-options">
                                  <button
                                    v-for="template in ticketTemplates"
                                    :key="template.name"
                                    type="button"
                                    class="ticket-template-option"
                                    @click="applyTemplate(index, template)"
                                  >
                                    {{ template.name }}
                                  </button>
                                </div>
                              </div>
                            </div>
                          </div>

                          <div class="form-row">
                            <div class="form-group">
                              <label :for="'ticket-price-' + index" class="form-label">Price ($)</label>
                              <input
                                :id="'ticket-price-' + index"
                                v-model.number="ticket.price"
                                type="number"
                                min="0"
                                step="0.01"
                                class="form-input"
                                placeholder="0.00"
                              />
                            </div>

                            <div class="form-group">
                              <label :for="'ticket-quantity-' + index" class="form-label">Quantity</label>
                              <input
                                :id="'ticket-quantity-' + index"
                                v-model.number="ticket.quantity"
                                type="number"
                                min="1"
                                class="form-input"
                                placeholder="10"
                              />
                            </div>
                          </div>

                          <div class="form-group">
                            <label :for="'ticket-description-' + index" class="form-label"
                              >Description (Optional)</label
                            >
                            <textarea
                              :id="'ticket-description-' + index"
                              v-model="ticket.description"
                              class="form-textarea ticket-description"
                              rows="2"
                              placeholder="Describe what's included with this ticket"
                            ></textarea>
                          </div>

                          <div class="ticket-sales-period">
                            <h4 class="ticket-section-subtitle">Sales End Date</h4>
                            <p class="ticket-section-helper">
                              Should this ticket type have a deadline? If yes, tell us when sales should stop.
                              This is optional.
                            </p>

                            <div class="form-row">
                              <div class="form-group">
                                <label :for="'ticket-end-date-' + index" class="form-label">Date</label>
                                <input
                                  :id="'ticket-end-date-' + index"
                                  v-model="ticket.salesEndDate"
                                  type="date"
                                  class="form-input"
                                  :min="today"
                                  :max="form.date"
                                />
                              </div>

                              <div class="form-group">
                                <label :for="'ticket-end-time-' + index" class="form-label">Time</label>
                                <input
                                  :id="'ticket-end-time-' + index"
                                  v-model="ticket.salesEndTime"
                                  type="time"
                                  class="form-input"
                                />
                              </div>
                            </div>
                          </div>

                          <div class="form-checkbox-wrapper">
                            <input
                              :id="'ticket-featured-' + index"
                              v-model="ticket.isFeatured"
                              type="checkbox"
                              class="form-checkbox"
                            />
                            <label :for="'ticket-featured-' + index" class="form-checkbox-label">
                              Feature this ticket (highlighted in the ticket selection)
                            </label>
                          </div>
                        </div>

                        <button type="button" @click="addTicketType" class="add-ticket-type-btn">
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 5V19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                            <path
                              d="M5 12H19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                          <span>Add Another Ticket Type</span>
                        </button>
                      </div>
                    </div>

                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Event Options
                      </h2>

                      <p class="section-intro">
                        Select features and amenities that your event offers to help attendees know what to
                        expect.
                      </p>

                      <div class="event-options-container">
                        <div class="event-options-grid">
                          <!-- Predefined event options -->
                          <div
                            v-for="option in predefinedEventOptions"
                            :key="'predefined-' + option"
                            class="event-option-item"
                            @click="toggleEventOption(option)"
                          >
                            <div
                              class="event-option-checkbox"
                              :class="{ 'event-option-checkbox--selected': isEventOptionSelected(option) }"
                            >
                              <div class="event-option-label">{{ option }}</div>
                              <svg
                                v-if="isEventOptionSelected(option)"
                                width="16"
                                height="16"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                                class="event-option-checkmark"
                              >
                                <path
                                  d="M20 6L9 17L4 12"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </div>
                          </div>

                          <!-- Custom event options -->
                          <div
                            v-for="(option, index) in form.customEventOptions"
                            :key="'custom-' + index"
                            class="event-option-item"
                          >
                            <div class="event-option-checkbox event-option-checkbox--selected">
                              <div class="event-option-label">{{ option }}</div>
                              <button
                                type="button"
                                @click="removeCustomEventOption(index)"
                                class="remove-option-btn"
                                aria-label="Remove option"
                              >
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>
                        </div>

                        <div class="add-event-option">
                          <div class="custom-event-option-input">
                            <input
                              type="text"
                              v-model="newCustomEventOption"
                              placeholder="Add your own event option..."
                              class="form-input custom-option-input"
                              @keyup.enter="addCustomEventOption"
                            />
                            <button
                              type="button"
                              class="add-custom-option-btn"
                              @click="addCustomEventOption"
                              :disabled="!newCustomEventOption.trim()"
                            >
                              Add
                            </button>
                          </div>
                        </div>
                      </div>

                      <div class="form-checkbox-wrapper mt-4">
                        <input id="featured" v-model="form.featured" type="checkbox" class="form-checkbox" />
                        <label for="featured" class="form-checkbox-label">
                          Feature this event (additional promotion fee may apply)
                        </label>
                      </div>
                      <p class="form-helper">Featured events show up on the homepage</p>
                    </div>

                    <!-- Add new FAQ section -->
                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Frequently Asked Questions
                        <span class="section-optional">(Optional)</span>
                      </h2>

                      <p class="section-intro">
                        Help attendees by answering common questions about your event. You can edit these
                        defaults or add your own.
                      </p>

                      <div class="faq-container">
                        <div v-for="(faq, index) in form.faqs" :key="index" class="faq-item">
                          <div class="faq-header">
                            <h3 class="faq-number">Q{{ index + 1 }}</h3>
                            <div class="faq-actions">
                              <button
                                type="button"
                                @click="removeFaq(index)"
                                class="faq-action-btn faq-action-remove"
                                title="Remove question"
                              >
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>

                          <div class="faq-content">
                            <div class="form-group">
                              <label :for="'faq-question-' + index" class="form-label">Question</label>
                              <input
                                :id="'faq-question-' + index"
                                v-model="faq.question"
                                type="text"
                                class="form-input"
                                placeholder="Enter a question guests might ask"
                              />
                            </div>

                            <div class="form-group">
                              <label :for="'faq-answer-' + index" class="form-label">Answer</label>
                              <textarea
                                :id="'faq-answer-' + index"
                                v-model="faq.answer"
                                class="form-textarea faq-answer"
                                rows="3"
                                placeholder="Provide a clear answer to the question"
                              ></textarea>
                            </div>
                          </div>
                        </div>

                        <button type="button" @click="addFaq" class="add-faq-btn">
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 5V19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                            <path
                              d="M5 12H19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                          <span>Add Another Question</span>
                        </button>
                      </div>
                    </div>

                    <div class="form-actions">
                      <button type="button" @click="resetForm" class="btn-secondary" :disabled="isSubmitting">
                        Reset Form
                      </button>
                      <button type="submit" class="btn-primary" :disabled="isSubmitting">
                        <span v-if="isSubmitting">
                          <svg class="spinner" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="12" cy="12" r="10" fill="none" stroke-width="3" />
                          </svg>
                          Creating Event...
                        </span>
                        <span v-else>Create Event</span>
                      </button>
                    </div>
                  </form>

                  <div class="create-event__note">
                    <p>
                      <strong>Note:</strong> Your event data is saved locally for now. Online saving coming
                      soon.
                    </p>
                  </div>
                </div>

                <div
                  v-if="showTemplateModal"
                  class="ticket-template-modal-overlay"
                  @click.self="closeTemplateModal"
                >
                  <div class="ticket-template-modal">
                    <div class="ticket-template-modal-header">
                      <h3>Choose a Ticket Template</h3>
                      <button @click="closeTemplateModal" class="modal-close-btn" aria-label="Close">
                        <svg
                          width="20"
                          height="20"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M18 6L6 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M6 6L18 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>
                    <div class="ticket-template-modal-body">
                      <div
                        v-for="template in ticketTemplates"
                        :key="template.name"
                        class="template-card"
                        @click="applyTemplateFromModal(activeTicketIndex, template)"
                      >
                        <div class="template-card-content">
                          <h4 class="template-name">{{ template.name }}</h4>
                          <p class="template-description">{{ template.description }}</p>
                        </div>
                        <div class="template-card-icon">
                          <svg
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M20 6L9 17L4 12"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Add subcategory modal -->
                <div
                  v-if="showSubCategoryModal"
                  class="subcategory-modal-overlay"
                  @click.self="closeSubCategoryModal"
                >
                  <div class="subcategory-modal">
                    <div class="subcategory-modal-header">
                      <h3>Select or Add Subcategories</h3>
                      <button @click="closeSubCategoryModal" class="modal-close-btn" aria-label="Close">
                        <svg
                          width="20"
                          height="20"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M18 6L6 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M6 6L18 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>
                    <div class="subcategory-modal-body">
                      <p class="subcategory-modal-info">Select up to 5 subcategories or add your own</p>

                      <div class="subcategory-search">
                        <input
                          type="text"
                          v-model="subcategorySearchTerm"
                          placeholder="Search subcategories..."
                          class="subcategory-search-input"
                        />
                      </div>

                      <div class="subcategory-options">
                        <div class="subcategory-section">
                          <h4 class="subcategory-section-title">Available Subcategories</h4>
                          <div class="subcategory-chips">
                            <div
                              v-for="subCategory in filteredSubCategories"
                              :key="subCategory.id"
                              class="subcategory-chip"
                              :class="{ 'subcategory-chip--selected': isSubCategorySelected(subCategory.id) }"
                              @click="toggleSubCategory(subCategory.id)"
                            >
                              <span>{{ subCategory.name }}</span>
                              <svg
                                v-if="isSubCategorySelected(subCategory.id)"
                                width="16"
                                height="16"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M20 6L9 17L4 12"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </div>
                          </div>
                        </div>

                        <div class="subcategory-section">
                          <h4 class="subcategory-section-title">Custom Subcategories</h4>
                          <div class="custom-subcategory-input">
                            <input
                              type="text"
                              v-model="newCustomSubCategory"
                              placeholder="Enter your own subcategory..."
                              class="form-input custom-input"
                              @keyup.enter="addCustomSubCategory"
                            />
                            <button
                              type="button"
                              class="add-custom-btn"
                              @click="addCustomSubCategory"
                              :disabled="!newCustomSubCategory.trim()"
                            >
                              Add
                            </button>
                          </div>

                          <div class="subcategory-chips custom-chips">
                            <div
                              v-for="(custom, index) in customSubCategories"
                              :key="'custom-' + index"
                              class="subcategory-chip subcategory-chip--custom"
                            >
                              <span>{{ custom }}</span>
                              <button
                                class="remove-custom-btn"
                                @click="removeCustomSubCategory(index)"
                                aria-label="Remove"
                              >
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>

                      <div class="subcategory-modal-footer">
                        <div class="subcategory-summary">
                          <span class="subcategory-count">{{ selectedSubCategoriesCount }}/5 selected</span>
                        </div>
                        <div class="subcategory-actions">
                          <button type="button" class="btn-secondary" @click="closeSubCategoryModal">
                            Cancel
                          </button>
                          <button type="button" class="btn-primary" @click="confirmSubCategories">Apply</button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Custom Time Picker Modal -->
                <div v-if="isTimePickerOpen" class="time-picker-overlay" @click.self="closeTimePicker">
                  <div class="time-picker-modal">
                    <div class="time-picker-header">
                      <h3>Select Time</h3>
                      <button type="button" class="time-picker-close" @click="closeTimePicker">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M18 6L6 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M6 6L18 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>
                    <div class="time-picker-body">
                      <!-- Custom time input -->
                      <div class="custom-time-input">
                        <div class="time-input-group">
                          <input
                            type="text"
                            v-model="customHours"
                            class="time-input-field"
                            maxlength="2"
                            @focus="$event.target.select()"
                            @blur="formatTimeInputs"
                            @keydown="handleTimeInput"
                            placeholder="HH"
                          />
                          <span class="time-divider">:</span>
                          <input
                            type="text"
                            v-model="customMinutes"
                            class="time-input-field"
                            maxlength="2"
                            @focus="$event.target.select()"
                            @blur="formatTimeInputs"
                            @keydown="handleTimeInput"
                            placeholder="MM"
                          />
                        </div>
                      </div>

                      <div class="time-picker-grid">
                        <div
                          v-for="time in timeOptions"
                          :key="time"
                          class="time-option"
                          :class="{ selected: selectedTime === time }"
                          @click="selectTime(time)"
                        >
                          {{ time }}
                        </div>
                      </div>
                      <div class="time-period-selector">
                        <button
                          type="button"
                          class="time-period-btn"
                          :class="{ selected: selectedPeriod === 'AM' }"
                          @click="selectPeriod('AM')"
                        >
                          AM
                        </button>
                        <button
                          type="button"
                          class="time-period-btn"
                          :class="{ selected: selectedPeriod === 'PM' }"
                          @click="selectPeriod('PM')"
                        >
                          PM
                        </button>
                      </div>
                    </div>
                    <div class="time-picker-actions">
                      <button type="button" class="time-picker-btn time-picker-cancel" @click="closeTimePicker">
                        Cancel
                      </button>
                      <button
                        type="button"
                        class="time-picker-btn time-picker-apply"
                        @click="applyTimeSelection"
                      >
                        Apply
                      </button>
                    </div>
                  </div>
                </div>

                <!-- Custom Date Picker Modal -->
                <div v-if="isDatePickerOpen" class="date-picker-overlay" @click.self="closeDatePicker">
                  <div class="date-picker-modal">
                    <div class="date-picker-header">
                      <h3>Select Date</h3>
                      <button type="button" class="date-picker-close" @click="closeDatePicker">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M18 6L6 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M6 6L18 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>
                    <div class="date-picker-body">
                      <div class="date-picker-month-nav">
                        <button class="month-nav-btn" @click="previousMonth">
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M15 18L9 12L15 6"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                        </button>
                        <div class="month-display">{{ monthNames[currentMonth] }} {{ currentYear }}</div>
                        <button class="month-nav-btn" @click="nextMonth">
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M9 18L15 12L9 6"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                        </button>
                      </div>

                      <div class="date-picker-weekdays">
                        <div class="weekday" v-for="day in weekdays" :key="day">{{ day }}</div>
                      </div>

                      <div class="date-picker-days">
                        <div
                          v-for="(day, index) in calendarDays"
                          :key="index"
                          class="calendar-day"
                          :class="{
                            'other-month': !day.inCurrentMonth,
                            today: day.isToday,
                            selected: day.isSelected,
                            disabled: day.isDisabled,
                          }"
                          @click="!day.isDisabled && selectDate(day.date)"
                        >
                          {{ day.day }}
                        </div>
                      </div>
                    </div>
                    <div class="date-picker-actions">
                      <button type="button" class="date-picker-btn date-picker-cancel" @click="closeDatePicker">
                        Cancel
                      </button>
                      <button
                        type="button"
                        class="date-picker-btn date-picker-apply"
                        @click="applyDateSelection"
                      >
                        Apply
                      </button>
                    </div>
                  </div>
                </div>
              </div>
</template>

<script setup>
import { ref, computed, reactive, watch, onMounted } from 'vue'
import { useRouter } from 'vue-router'
import { useEventStore } from '@/stores/events'

// Initialize references
const router = useRouter()
const eventStore = useEventStore()
const error = ref(null)
const success = ref(false)
const isSubmitting = ref(false)
const today = ref(new Date().toISOString().split('T')[0]) // Today's date in YYYY-MM-DD format
const showTemplateModal = ref(false)
const activeTicketIndex = ref(0)
const showSubCategoryModal = ref(false)
const tempSelectedSubCategories = ref([]) // Temporary storage for selected subcategories in modal
const subCategorySearchTerm = ref('')
const customSubCategories = ref([])
const newCustomSubCategory = ref('')
const categories = ref([])
const availableSubCategories = ref([])
const mainImagePreview = ref(null)
const bannerImagePreview = ref(null)
const newCustomEventOption = ref('')

// Also initialize form with image fields
const form = reactive({
  title: '',
  description: '',
  category: '',
  subCategories: [],
  date: '',
  time: '19:00',
  location: '',
  price: 0,
  totalTickets: 100,
  organizer: '',
  duration: '',
  featured: false,
  imageIndex: Math.floor(Math.random() * 4), // Random image from available set
  mainImage: null,
  bannerImage: null,
  selectedEventOptions: [], // Start with no options selected
  customEventOptions: [], // For user-added custom options
  ticketTypes: [
    {
      name: 'General Admission',
      price: 0,
      quantity: 100,
      description: '',
      salesEndDate: '',
      salesEndTime: '23:59',
      isFeatured: false,
    },
  ],
  // Add FAQs to the form data
  faqs: [
    {
      question: "What's included in the ticket price?",
      answer:
        'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
    },
    {
      question: "What's the refund policy?",
      answer:
        'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
    },
    {
      question: 'Is there parking available?',
      answer:
        'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
    },
    {
      question: 'What should I bring with me?',
      answer:
        'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
    },
    {
      question: 'Are there age restrictions for this event?',
      answer:
        'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
    },
  ],
})

// Form validation
const validation = reactive({
  title: { valid: true, message: '' },
  description: { valid: true, message: '' },
  category: { valid: true, message: '' },
  subCategories: { valid: true, message: '' },
  date: { valid: true, message: '' },
  time: { valid: true, message: '' },
  location: { valid: true, message: '' },
  price: { valid: true, message: '' },
  totalTickets: { valid: true, message: '' },
  organizer: { valid: true, message: '' },
  ticketTypes: { valid: true, message: '' },
  mainImage: { valid: true, message: '' },
  bannerImage: { valid: true, message: '' },
})

// Fetch categories on mount
onMounted(async () => {
  try {
    // This will be replaced with API call later
    const eventService = (await import('@/services/eventService')).default
    categories.value = await eventService.getAllCategories()

    // Get sub-categories or initialize with mock data if the service doesn't provide them
    try {
      availableSubCategories.value = await eventService.getAllSubCategories()
    } catch {
      // If the service doesn't have getAllSubCategories method yet, use mock data
      availableSubCategories.value = [
        { id: 'sub1', name: 'Workshop' },
        { id: 'sub2', name: 'Conference' },
        { id: 'sub3', name: 'Meetup' },
        { id: 'sub4', name: 'Webinar' },
        { id: 'sub5', name: 'Party' },
        { id: 'sub6', name: 'Exhibition' },
        { id: 'sub7', name: 'Concert' },
        { id: 'sub8', name: 'Sport Event' },
      ]
    }
  } catch (err) {
    error.value = 'Failed to load categories'
    console.error('Error loading categories:', err)
  }
})

// Add ticket type
const addTicketType = () => {
  form.ticketTypes.push({
    name: '',
    price: 0,
    quantity: 50,
    description: '',
    salesEndDate: '',
    salesEndTime: '23:59',
    isFeatured: false,
  })
}

// Remove ticket type
const removeTicketType = (index) => {
  form.ticketTypes.splice(index, 1)
}

// Duplicate ticket type
const duplicateTicketType = (index) => {
  const ticketToDuplicate = { ...form.ticketTypes[index] }
  ticketToDuplicate.name = `${ticketToDuplicate.name} (Copy)`
  form.ticketTypes.splice(index + 1, 0, ticketToDuplicate)
}

// Available ticket type templates
const ticketTemplates = [
  { name: 'Standard', description: 'Regular entry ticket for most guests', isFeatured: false },
  { name: 'Early Bird', description: 'Limited time offer at a discounted price', isFeatured: true },
  { name: 'VIP', description: 'Premium experience with exclusive benefits', isFeatured: true },
  { name: 'Table for 4', description: 'Reserved table seating for 4 guests' },
  { name: 'Table for 8', description: 'Reserved table seating for 8 guests' },
  { name: 'Table for 12', description: 'Reserved table seating for a large group of 12' },
  {
    name: 'Gold',
    description: 'Elite experience with exclusive perks and priority service',
    isFeatured: true,
  },
  { name: 'Student', description: 'Discounted ticket with valid student ID' },
  { name: 'Group (5+)', description: 'Discounted rate for groups of 5 or more' },
]

// Apply template to ticket
const applyTemplate = (index, template) => {
  form.ticketTypes[index].name = template.name
  form.ticketTypes[index].description = template.description
  if (template.isFeatured) {
    form.ticketTypes[index].isFeatured = true
  }
}

// Calculate total tickets
const calculateTotalTickets = computed(() => {
  return form.ticketTypes.reduce((sum, ticket) => sum + ticket.quantity, 0)
})

// Update total tickets when ticket quantities change
watch(calculateTotalTickets, (newTotal) => {
  form.totalTickets = newTotal
})

// Computed combined date and time
const fullDateTime = computed(() => {
  if (!form.date || !form.time) return null
  const [year, month, day] = form.date.split('-')
  const [hours, minutes] = form.time.split(':')
  return new Date(year, month - 1, day, hours, minutes).toISOString()
})

// Duration options
const durationOptions = [
  '1 hour',
  '2 hours',
  '3 hours',
  '4 hours',
  '5 hours',
  '1 day',
  '2 days',
  '3 days',
  'Multiple days',
]

// Define stronger password regex if using authentication
const sanitizeInput = (input) => {
  if (typeof input !== 'string') return input
  // Basic sanitization - replaces potentially harmful characters
  return input.replace(/[<>&"'`=/]/g, '')
}

// Validate form with enhanced security
const validateForm = () => {
  let isValid = true

  // Title validation with sanitization
  const sanitizedTitle = sanitizeInput(form.title.trim())
  if (!sanitizedTitle) {
    validation.title.valid = false
    validation.title.message = 'Add a name for your event'
    isValid = false
  } else if (sanitizedTitle.length < 5) {
    validation.title.valid = false
    validation.title.message = 'Name needs at least 5 letters'
    isValid = false
  } else if (sanitizedTitle.length > 100) {
    validation.title.valid = false
    validation.title.message = 'Name is too long (100 letters max)'
    isValid = false
  } else {
    validation.title.valid = true
    // Update the form with sanitized value
    form.title = sanitizedTitle
  }

  // Description validation with sanitization
  const sanitizedDescription = sanitizeInput(form.description.trim())
  if (!sanitizedDescription) {
    validation.description.valid = false
    validation.description.message = 'Add a description'
    isValid = false
  } else if (sanitizedDescription.length < 20) {
    validation.description.valid = false
    validation.description.message = 'Write at least 20 letters'
    isValid = false
  } else if (sanitizedDescription.length > 5000) {
    validation.description.valid = false
    validation.description.message = 'Too long! Keep it under 5000 letters'
    isValid = false
  } else {
    validation.description.valid = true
    // Update the form with sanitized value
    form.description = sanitizedDescription
  }

  // Category validation
  if (!form.category) {
    validation.category.valid = false
    validation.category.message = 'Pick a category'
    isValid = false
  } else {
    // Validate category ID exists in valid categories
    const categoryExists = categories.value.some((cat) => cat.id === form.category)
    if (!categoryExists) {
      validation.category.valid = false
      validation.category.message = 'Pick a category from the list'
      isValid = false
    } else {
      validation.category.valid = true
    }
  }

  // Sub-categories validation
  const nonEmptySubCategories = form.subCategories.filter((cat) => cat !== '')
  const uniqueSubCategories = [...new Set(nonEmptySubCategories)]

  if (nonEmptySubCategories.length !== uniqueSubCategories.length) {
    validation.subCategories.valid = false
    validation.subCategories.message = 'You picked the same tag twice'
    isValid = false
  } else {
    // Validate each subcategory ID exists in valid subcategories
    const invalidSubCat = nonEmptySubCategories.some(
      (subCat) => !availableSubCategories.value.some((validSubCat) => validSubCat.id === subCat),
    )

    if (invalidSubCat) {
      validation.subCategories.valid = false
      validation.subCategories.message = 'Pick tags from the list'
      isValid = false
    } else {
      validation.subCategories.valid = true
    }
  }

  // Date validation
  if (!form.date) {
    validation.date.valid = false
    validation.date.message = 'Pick a date'
    isValid = false
  } else {
    // Validate date format and ensure it's not in the past
    const selectedDate = new Date(form.date)
    const currentDate = new Date()
    currentDate.setHours(0, 0, 0, 0)

    if (isNaN(selectedDate.getTime())) {
      validation.date.valid = false
      validation.date.message = "This date won't work"
      isValid = false
    } else if (selectedDate < currentDate) {
      validation.date.valid = false
      validation.date.message = 'Pick a date in the future'
      isValid = false
    } else {
      validation.date.valid = true
    }
  }

  // Time validation
  if (!form.time) {
    validation.time.valid = false
    validation.time.message = 'Add a start time'
    isValid = false
  } else {
    // Validate time format (HH:MM)
    const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/
    if (!timeRegex.test(form.time)) {
      validation.time.valid = false
      validation.time.message = 'Use hours:minutes format'
      isValid = false
    } else {
      validation.time.valid = true
    }
  }

  // Location validation with sanitization
  const sanitizedLocation = sanitizeInput(form.location.trim())
  if (!sanitizedLocation) {
    validation.location.valid = false
    validation.location.message = 'Add a location'
    isValid = false
  } else if (sanitizedLocation.length < 5) {
    validation.location.valid = false
    validation.location.message = 'Write a longer address'
    isValid = false
  } else {
    validation.location.valid = true
    // Update the form with sanitized value
    form.location = sanitizedLocation
  }

  // Price validation
  if (isNaN(form.price) || form.price === '') {
    validation.price.valid = false
    validation.price.message = 'Price must be a number'
    isValid = false
  } else {
    const price = parseFloat(form.price)
    if (price < 0) {
      validation.price.valid = false
      validation.price.message = "Price can't be negative"
      isValid = false
    } else if (price > 100000) {
      validation.price.valid = false
      validation.price.message = 'Price too high (max $100,000)'
      isValid = false
    } else {
      validation.price.valid = true
      // Ensure price is stored as a number with 2 decimal places
      form.price = parseFloat(price.toFixed(2))
    }
  }

  // Tickets validation
  if (isNaN(form.totalTickets) || form.totalTickets === '') {
    validation.totalTickets.valid = false
    validation.totalTickets.message = 'How many tickets?'
    isValid = false
  } else {
    const tickets = parseInt(form.totalTickets)
    if (tickets <= 0) {
      validation.totalTickets.valid = false
      validation.totalTickets.message = 'You need at least 1 ticket'
      isValid = false
    } else if (tickets > 100000) {
      validation.totalTickets.valid = false
      validation.totalTickets.message = 'Too many tickets (max 100,000)'
      isValid = false
    } else {
      validation.totalTickets.valid = true
      // Ensure tickets is stored as an integer
      form.totalTickets = tickets
    }
  }

  // Organizer validation with sanitization
  const sanitizedOrganizer = sanitizeInput(form.organizer.trim())
  if (!sanitizedOrganizer) {
    validation.organizer.valid = false
    validation.organizer.message = 'Add your name or group name'
    isValid = false
  } else {
    validation.organizer.valid = true
    // Update the form with sanitized value
    form.organizer = sanitizedOrganizer
  }

  // Ticket types validation
  if (form.ticketTypes.length === 0) {
    validation.ticketTypes.valid = false
    validation.ticketTypes.message = 'Add at least one ticket type'
    isValid = false
  } else {
    let ticketTypeValid = true
    form.ticketTypes.forEach((ticket, index) => {
      const sanitizedName = sanitizeInput(ticket.name.trim())
      if (!sanitizedName) {
        validation.ticketTypes.valid = false
        validation.ticketTypes.message = `Ticket #${index + 1} needs a name`
        ticketTypeValid = false
        isValid = false
      }

      if (ticket.quantity <= 0) {
        validation.ticketTypes.valid = false
        validation.ticketTypes.message = `Ticket #${index + 1} needs at least 1`
        ticketTypeValid = false
        isValid = false
      }

      if (ticket.salesEndDate) {
        const endDate = new Date(ticket.salesEndDate)
        const eventDate = new Date(form.date)

        if (isNaN(endDate.getTime())) {
          validation.ticketTypes.valid = false
          validation.ticketTypes.message = `Ticket #${index + 1} has a bad date`
          ticketTypeValid = false
          isValid = false
        } else if (endDate > eventDate) {
          validation.ticketTypes.valid = false
          validation.ticketTypes.message = `Ticket #${index + 1} must stop selling before event starts`
          ticketTypeValid = false
          isValid = false
        }
      }
    })

    if (ticketTypeValid) {
      validation.ticketTypes.valid = true
    }
  }

  // Main image validation
  if (!form.mainImage) {
    validation.mainImage.valid = false
    validation.mainImage.message = 'Upload a main image'
    isValid = false
  }

  // Banner image validation
  if (!form.bannerImage) {
    validation.bannerImage.valid = false
    validation.bannerImage.message = 'Upload a banner image'
    isValid = false
  }

  return isValid
}

// Handle form submission
const handleSubmit = async () => {
  if (!validateForm()) {
    // Scroll to first error
    const firstError = Object.keys(validation).find((key) => !validation[key].valid)
    if (firstError) {
      const element = document.getElementById(firstError)
      if (element) element.scrollIntoView({ behavior: 'smooth', block: 'center' })
    }
    return
  }

  isSubmitting.value = true
  error.value = null

  try {
    // Filter out empty sub-categories and combine with custom subcategories
    const validSubCategories = [
      ...form.subCategories.filter((cat) => cat !== ''),
      ...customSubCategories.value,
    ]

    // Process ticket types
    const processedTickets = form.ticketTypes.map((ticket) => ({
      ...ticket,
      price: parseFloat(ticket.price),
      quantity: parseInt(ticket.quantity),
      name: sanitizeInput(ticket.name.trim()),
      description: sanitizeInput(ticket.description.trim()),
    }))

    // Process images - convert File objects to data URLs
    let mainImageUrl = mainImagePreview.value
    let bannerImageUrl = bannerImagePreview.value

    // Get the selected event options
    const selectedEventOptions = [...form.selectedEventOptions, ...form.customEventOptions].filter(
      Boolean,
    ) // Remove any falsy values

    // Prepare the event data
    const eventData = {
      title: form.title,
      description: form.description,
      category: form.category,
      subCategories: validSubCategories,
      date: fullDateTime.value,
      location: form.location,
      price: parseFloat(form.price),
      totalTickets: parseInt(form.totalTickets),
      organizer: form.organizer,
      duration: form.duration,
      featured: form.featured,
      imageIndex: form.imageIndex,
      mainImage: mainImageUrl,
      bannerImage: bannerImageUrl,
      eventOptions: selectedEventOptions, // Add event options to the event data
      selectedEventOptions: form.selectedEventOptions, // Store the original selected options
      customEventOptions: form.customEventOptions, // Store the custom options
      ticketTypes: processedTickets,
      faqs: form.faqs.filter((faq) => faq.question.trim() && faq.answer.trim()), // Only include FAQs with content
    }

    // Create the event
    const newEvent = await eventStore.createEvent(eventData)

    success.value = true

    // Redirect to the event page after a brief delay
    setTimeout(() => {
      router.push({ path: `/event/${newEvent.id}` })
    }, 2000)
  } catch (err) {
    error.value = err.message || 'Failed to create event'
    window.scrollTo({ top: 0, behavior: 'smooth' })
  } finally {
    isSubmitting.value = false
  }
}

// Reset form
const resetForm = () => {
  Object.keys(form).forEach((key) => {
    if (key === 'price') {
      form[key] = 0
    } else if (key === 'totalTickets') {
      form[key] = 100
    } else if (key === 'featured') {
      form[key] = false
    } else if (key === 'imageIndex') {
      form[key] = Math.floor(Math.random() * 4)
    } else if (key === 'time') {
      form[key] = '19:00'
    } else if (key === 'subCategories') {
      form[key] = []
    } else if (key === 'ticketTypes') {
      form[key] = [
        {
          name: 'General Admission',
          price: 0,
          quantity: 100,
          description: '',
          salesEndDate: '',
          salesEndTime: '23:59',
          isFeatured: false,
        },
      ]
    } else {
      form[key] = ''
    }
  })

  Object.keys(validation).forEach((key) => {
    validation[key].valid = true
    validation[key].message = ''
  })

  error.value = null
  success.value = false

  // Also reset custom subcategories
  customSubCategories.value = []

  // Reset custom event options
  form.customEventOptions = []

  // Reset event options to defaults
  form.selectedEventOptions = ['Live performance', 'Food & drinks available', 'Indoor event']

  // Reset FAQs to defaults
  form.faqs = [
    {
      question: "What's included in the ticket price?",
      answer:
        'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
    },
    {
      question: "What's the refund policy?",
      answer:
        'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
    },
    {
      question: 'Is there parking available?',
      answer:
        'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
    },
    {
      question: 'What should I bring with me?',
      answer:
        'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
    },
    {
      question: 'Are there age restrictions for this event?',
      answer:
        'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
    },
  ]
}

// Set min date to today for date picker
// const today = new Date().toISOString().split('T')[0]

// Open template modal for a specific ticket
const openTemplateModal = (index) => {
  activeTicketIndex.value = index
  showTemplateModal.value = true
  document.body.style.overflow = 'hidden' // Prevent background scrolling
}

// Close template modal
const closeTemplateModal = () => {
  showTemplateModal.value = false
  document.body.style.overflow = '' // Re-enable scrolling
}

// Apply template from modal and close the modal
const applyTemplateFromModal = (index, template) => {
  applyTemplate(index, template)
  closeTemplateModal()
}

// Add FAQ
const addFaq = () => {
  form.faqs.push({
    question: '',
    answer: '',
  })
}

// Remove FAQ
const removeFaq = (index) => {
  form.faqs.splice(index, 1)
}

// Handle main image upload
const handleMainImageUpload = (event) => {
  let file

  // Check if it's a drop event
  if (event.dataTransfer) {
    file = event.dataTransfer.files[0]
  } else if (event.target.files) {
    file = event.target.files[0]
  }

  if (file) {
    form.mainImage = file
    validation.mainImage.valid = true

    // Create a preview URL
    const reader = new FileReader()
    reader.onload = (e) => {
      mainImagePreview.value = e.target.result
    }
    reader.readAsDataURL(file)
  }
}

// Handle banner image upload
const handleBannerImageUpload = (event) => {
  let file

  // Check if it's a drop event
  if (event.dataTransfer) {
    file = event.dataTransfer.files[0]
  } else if (event.target.files) {
    file = event.target.files[0]
  }

  if (file) {
    form.bannerImage = file
    validation.bannerImage.valid = true

    // Create a preview URL
    const reader = new FileReader()
    reader.onload = (e) => {
      bannerImagePreview.value = e.target.result
    }
    reader.readAsDataURL(file)
  }
}

// Remove main image - could be added to the UI if needed
const removeMainImage = () => {
  form.mainImage = null
  mainImagePreview.value = null
  validation.mainImage.valid = false
  validation.mainImage.message = 'Please upload a main image'
}

// Remove banner image - could be added to the UI if needed
const removeBannerImage = () => {
  form.bannerImage = null
  bannerImagePreview.value = null
  validation.bannerImage.valid = false
  validation.bannerImage.message = 'Please upload a banner image'
}

// Trigger main image upload
const triggerMainImageUpload = () => {
  const input = document.getElementById('mainImage')
  input.click()
}

// Trigger banner image upload
const triggerBannerImageUpload = () => {
  const input = document.getElementById('bannerImage')
  input.click()
}

// Add custom subcategory
const addCustomSubCategory = () => {
  const trimmed = newCustomSubCategory.value.trim()
  if (
    trimmed &&
    customSubCategories.value.length < 5 &&
    !customSubCategories.value.includes(trimmed)
  ) {
    customSubCategories.value.push(trimmed)
    newCustomSubCategory.value = ''
  }
}

// Remove custom subcategory
const removeCustomSubCategory = (index) => {
  customSubCategories.value.splice(index, 1)
}

// Get all displayed subcategories (selected + custom)
const displayedSubCategories = computed(() => {
  return [...form.subCategories, ...customSubCategories.value]
})

// Get subcategory name by id
const getSubCategoryName = (subCatId) => {
  // If it's a predefined subcategory
  if (typeof subCatId === 'string' && subCatId.startsWith('sub')) {
    const subCat = availableSubCategories.value.find((sc) => sc.id === subCatId)
    return subCat ? subCat.name : subCatId
  }
  // If it's a custom subcategory
  return subCatId
}

// Filter subcategories based on search term
const filteredSubCategories = computed(() => {
  if (!subCategorySearchTerm.value) return availableSubCategories.value

  const searchTerm = subCategorySearchTerm.value.toLowerCase()
  return availableSubCategories.value.filter((sc) => sc.name.toLowerCase().includes(searchTerm))
})

// Count selected subcategories
const selectedSubCategoriesCount = computed(() => {
  return tempSelectedSubCategories.value.length + customSubCategories.value.length
})

// Remove a subcategory from the form
const removeSubCategoryById = (subCat) => {
  if (typeof subCat === 'string' && subCat.startsWith('sub')) {
    // If it's a predefined subcategory
    form.subCategories = form.subCategories.filter((sc) => sc !== subCat)
  } else {
    // If it's a custom subcategory
    customSubCategories.value = customSubCategories.value.filter((sc) => sc !== subCat)
  }
}

// Toggle subcategory selection
const toggleSubCategory = (id) => {
  if (isSubCategorySelected(id)) {
    tempSelectedSubCategories.value = tempSelectedSubCategories.value.filter(
      (subCatId) => subCatId !== id,
    )
  } else {
    if (selectedSubCategoriesCount.value < 5) {
      tempSelectedSubCategories.value.push(id)
    }
  }
}

// Check if subcategory is selected
const isSubCategorySelected = (id) => {
  return tempSelectedSubCategories.value.includes(id)
}

// Open subcategory modal
const openSubCategoryModal = () => {
  if (form.category === '') {
    validation.category.valid = false
    validation.category.message = 'Select a category first'
    // Focus category dropdown
    const categoryElement = document.getElementById('category')
    if (categoryElement) categoryElement.focus()
    return
  }

  // Initialize the temp selection with current selection
  tempSelectedSubCategories.value = [...form.subCategories]
  showSubCategoryModal.value = true
  document.body.style.overflow = 'hidden' // Prevent background scrolling
}

// Close subcategory modal
const closeSubCategoryModal = () => {
  showSubCategoryModal.value = false
  document.body.style.overflow = '' // Re-enable scrolling
  subCategorySearchTerm.value = ''
  newCustomSubCategory.value = ''
}

// Confirm subcategory selections
const confirmSubCategories = () => {
  form.subCategories = [...tempSelectedSubCategories.value]
  closeSubCategoryModal()
}

// Handle main image drop
const handleMainImageDrop = (event) => {
  event.preventDefault()
  handleMainImageUpload(event)
}

// Handle banner image drop
const handleBannerImageDrop = (event) => {
  event.preventDefault()
  handleBannerImageUpload(event)
}

// Add custom event option
const addCustomEventOption = () => {
  const trimmed = newCustomEventOption.value.trim()
  if (trimmed && form.customEventOptions.length < 5 && !form.customEventOptions.includes(trimmed)) {
    form.customEventOptions.push(trimmed)
    newCustomEventOption.value = ''
  }
}

// Remove custom event option
const removeCustomEventOption = (index) => {
  form.customEventOptions.splice(index, 1)
}

// Toggle event option
const toggleEventOption = (option) => {
  if (form.selectedEventOptions.includes(option)) {
    form.selectedEventOptions = form.selectedEventOptions.filter((opt) => opt !== option)
  } else {
    // Allow selecting more options - remove limit
    form.selectedEventOptions.push(option)
  }
}

// Check if event option is selected
const isEventOptionSelected = (option) => {
  return form.selectedEventOptions.includes(option)
}

// Predefined event options
const predefinedEventOptions = [
  'Live performance',
  'Food & drinks available',
  'Indoor event',
  'Outdoor event',
  'Accessible venue',
  'Family friendly',
  'Free parking',
  'VIP access',
  'Professional networking',
  'Photo opportunities',
  'Live streaming',
  'Q&A session',
  'Merchandise available',
  'Meet & greet',
  'Seating provided',
]

const showDateTip = ref(false)
const showTimeTip = ref(false)

// Time picker variables
const isTimePickerOpen = ref(false)
const selectedTime = ref('07:00')
const selectedPeriod = ref('AM')

const timeOptions = [
  '01:00',
  '01:30',
  '02:00',
  '02:30',
  '03:00',
  '03:30',
  '04:00',
  '04:30',
  '05:00',
  '05:30',
  '06:00',
  '06:30',
  '07:00',
  '07:30',
  '08:00',
  '08:30',
  '09:00',
  '09:30',
  '10:00',
  '10:30',
  '11:00',
  '11:30',
  '12:00',
  '12:30',
]

const openTimePicker = () => {
  // If there's already a time, parse it to 12-hour format for the picker
  if (form.time) {
    const [hours, minutes] = form.time.split(':')
    const hour = parseInt(hours)

    if (hour > 12) {
      // Convert from 24-hour to 12-hour format for PM
      selectedTime.value = `${(hour - 12).toString().padStart(2, '0')}:${minutes}`
      selectedPeriod.value = 'PM'
    } else if (hour === 12) {
      // 12 PM
      selectedTime.value = `12:${minutes}`
      selectedPeriod.value = 'PM'
    } else if (hour === 0) {
      // 12 AM
      selectedTime.value = `12:${minutes}`
      selectedPeriod.value = 'AM'
    } else {
      // Regular AM hours
      selectedTime.value = `${hour.toString().padStart(2, '0')}:${minutes}`
      selectedPeriod.value = 'AM'
    }
  } else {
    // Default to 7:00 AM if no time selected
    selectedTime.value = '07:00'
    selectedPeriod.value = 'AM'
  }

  isTimePickerOpen.value = true
}

const closeTimePicker = () => {
  isTimePickerOpen.value = false
}

const selectTime = (time) => {
  selectedTime.value = time
}

const selectPeriod = (period) => {
  selectedPeriod.value = period
}

const applyTimeSelection = () => {
  // Convert to 24-hour format if PM is selected
  if (selectedPeriod.value === 'PM') {
    const [hours, minutes] = selectedTime.value.split(':')
    const hour = parseInt(hours)

    // Only adjust hours that aren't already in PM format (12 PM stays as 12)
    const adjustedHour = hour === 12 ? 12 : hour + 12
    form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
  } else {
    // For AM, make sure 12 AM becomes 00:00
    const [hours, minutes] = selectedTime.value.split(':')
    const hour = parseInt(hours)
    const adjustedHour = hour === 12 ? 0 : hour
    form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
  }

  closeTimePicker()
}

// Date picker variables
const isDatePickerOpen = ref(false)
const currentYear = ref(new Date().getFullYear())
const currentMonth = ref(new Date().getMonth())
const selectedDate = ref(new Date())
const tempSelectedDate = ref(null)

// Custom time input variables
const customHours = ref('07')
const customMinutes = ref('00')

// Define weekdays and month names for the calendar
const weekdays = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
const monthNames = [
  'January',
  'February',
  'March',
  'April',
  'May',
  'June',
  'July',
  'August',
  'September',
  'October',
  'November',
  'December',
]

// Format time inputs when focus is lost
const formatTimeInputs = () => {
  // Validate and format hours
  let formattedHours = parseInt(customHours.value) || 1
  if (formattedHours < 1) formattedHours = 1
  if (formattedHours > 12) formattedHours = 12

  // Validate and format minutes
  let formattedMinutes = parseInt(customMinutes.value) || 0
  if (formattedMinutes < 0) formattedMinutes = 0
  if (formattedMinutes > 59) formattedMinutes = 59

  // Update the ref values with formatted strings
  customHours.value = formattedHours.toString().padStart(2, '0')
  customMinutes.value = formattedMinutes.toString().padStart(2, '0')

  // Update selectedTime with formatted values
  selectedTime.value = `${formattedHours.toString().padStart(2, '0')}:${formattedMinutes.toString().padStart(2, '0')}`
}

// Function to prefill the form with test data
const prefillForm = () => {
  // Generate a random event title to avoid duplicates
  const eventTypes = [
    'Workshop',
    'Conference',
    'Meetup',
    'Concert',
    'Festival',
    'Webinar',
    'Hackathon',
  ]
}


import { ref, computed, reactive, watch, onMounted } from 'vue'
import { useRouter } from 'vue-router'
import { useEventStore } from '@/stores/events'

// Initialize references
const router = useRouter()
const eventStore = useEventStore()
const error = ref(null)
const success = ref(false)
const isSubmitting = ref(false)
const today = ref(new Date().toISOString().split('T')[0]) // Today's date in YYYY-MM-DD format
const showTemplateModal = ref(false)
const activeTicketIndex = ref(0)
const showSubCategoryModal = ref(false)
const tempSelectedSubCategories = ref([]) // Temporary storage for selected subcategories in modal
const subCategorySearchTerm = ref('')
const customSubCategories = ref([])
const newCustomSubCategory = ref('')
const categories = ref([])
const availableSubCategories = ref([])
const mainImagePreview = ref(null)
const bannerImagePreview = ref(null)
const newCustomEventOption = ref('')

// Also initialize form with image fields
const form = reactive({
  title: '',
  description: '',
  category: '',
  subCategories: [],
  date: '',
  time: '19:00',
  location: '',
  price: 0,
  totalTickets: 100,
  organizer: '',
  duration: '',
  featured: false,
  imageIndex: Math.floor(Math.random() * 4), // Random image from available set
  mainImage: null,
  bannerImage: null,
  selectedEventOptions: [], // Start with no options selected
  customEventOptions: [], // For user-added custom options
  ticketTypes: [
    {
      name: 'General Admission',
      price: 0,
      quantity: 100,
      description: '',
      salesEndDate: '',
      salesEndTime: '23:59',
      isFeatured: false,
    },
  ],
  // Add FAQs to the form data
  faqs: [
    {
      question: "What's included in the ticket price?",
      answer:
        'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
    },
    {
      question: "What's the refund policy?",
      answer:
        'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
    },
    {
      question: 'Is there parking available?',
      answer:
        'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
    },
    {
      question: 'What should I bring with me?',
      answer:
        'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
    },
    {
      question: 'Are there age restrictions for this event?',
      answer:
        'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
    },
  ],
})

// Form validation
const validation = reactive({
  title: { valid: true, message: '' },
  description: { valid: true, message: '' },
  category: { valid: true, message: '' },
  subCategories: { valid: true, message: '' },
  date: { valid: true, message: '' },
  time: { valid: true, message: '' },
  location: { valid: true, message: '' },
  price: { valid: true, message: '' },
  totalTickets: { valid: true, message: '' },
  organizer: { valid: true, message: '' },
  ticketTypes: { valid: true, message: '' },
  mainImage: { valid: true, message: '' },
  bannerImage: { valid: true, message: '' },
})

// Fetch categories on mount
onMounted(async () => {
  try {
    // This will be replaced with API call later
    const eventService = (await import('@/services/eventService')).default
    categories.value = await eventService.getAllCategories()

    // Get sub-categories or initialize with mock data if the service doesn't provide them
    try {
      availableSubCategories.value = await eventService.getAllSubCategories()
    } catch {
      // If the service doesn't have getAllSubCategories method yet, use mock data
      availableSubCategories.value = [
        { id: 'sub1', name: 'Workshop' },
        { id: 'sub2', name: 'Conference' },
        { id: 'sub3', name: 'Meetup' },
        { id: 'sub4', name: 'Webinar' },
        { id: 'sub5', name: 'Party' },
        { id: 'sub6', name: 'Exhibition' },
        { id: 'sub7', name: 'Concert' },
        { id: 'sub8', name: 'Sport Event' },
      ]
    }
  } catch (err) {
    error.value = 'Failed to load categories'
    console.error('Error loading categories:', err)
  }
})

// Add ticket type
const addTicketType = () => {
  form.ticketTypes.push({
    name: '',
    price: 0,
    quantity: 50,
    description: '',
    salesEndDate: '',
    salesEndTime: '23:59',
    isFeatured: false,
  })
}

// Remove ticket type
const removeTicketType = (index) => {
  form.ticketTypes.splice(index, 1)
}

// Duplicate ticket type
const duplicateTicketType = (index) => {
  const ticketToDuplicate = { ...form.ticketTypes[index] }
  ticketToDuplicate.name = `${ticketToDuplicate.name} (Copy)`
  form.ticketTypes.splice(index + 1, 0, ticketToDuplicate)
}

// Available ticket type templates
const ticketTemplates = [
  { name: 'Standard', description: 'Regular entry ticket for most guests', isFeatured: false },
  { name: 'Early Bird', description: 'Limited time offer at a discounted price', isFeatured: true },
  { name: 'VIP', description: 'Premium experience with exclusive benefits', isFeatured: true },
  { name: 'Table for 4', description: 'Reserved table seating for 4 guests' },
  { name: 'Table for 8', description: 'Reserved table seating for 8 guests' },
  { name: 'Table for 12', description: 'Reserved table seating for a large group of 12' },
  {
    name: 'Gold',
    description: 'Elite experience with exclusive perks and priority service',
    isFeatured: true,
  },
  { name: 'Student', description: 'Discounted ticket with valid student ID' },
  { name: 'Group (5+)', description: 'Discounted rate for groups of 5 or more' },
]

// Apply template to ticket
const applyTemplate = (index, template) => {
  form.ticketTypes[index].name = template.name
  form.ticketTypes[index].description = template.description
  if (template.isFeatured) {
    form.ticketTypes[index].isFeatured = true
  }
}

// Calculate total tickets
const calculateTotalTickets = computed(() => {
  return form.ticketTypes.reduce((sum, ticket) => sum + ticket.quantity, 0)
})

// Update total tickets when ticket quantities change
watch(calculateTotalTickets, (newTotal) => {
  form.totalTickets = newTotal
})

// Computed combined date and time
const fullDateTime = computed(() => {
  if (!form.date || !form.time) return null
  const [year, month, day] = form.date.split('-')
  const [hours, minutes] = form.time.split(':')
  return new Date(year, month - 1, day, hours, minutes).toISOString()
})

// Duration options
const durationOptions = [
  '1 hour',
  '2 hours',
  '3 hours',
  '4 hours',
  '5 hours',
  '1 day',
  '2 days',
  '3 days',
  'Multiple days',
]

// Define stronger password regex if using authentication
const sanitizeInput = (input) => {
  if (typeof input !== 'string') return input
  // Basic sanitization - replaces potentially harmful characters
  return input.replace(/[<>&"'`=/]/g, '')
}

// Validate form with enhanced security
const validateForm = () => {
  let isValid = true

  // Title validation with sanitization
  const sanitizedTitle = sanitizeInput(form.title.trim())
  if (!sanitizedTitle) {
    validation.title.valid = false
    validation.title.message = 'Add a name for your event'
    isValid = false
  } else if (sanitizedTitle.length < 5) {
    validation.title.valid = false
    validation.title.message = 'Name needs at least 5 letters'
    isValid = false
  } else if (sanitizedTitle.length > 100) {
    validation.title.valid = false
    validation.title.message = 'Name is too long (100 letters max)'
    isValid = false
  } else {
    validation.title.valid = true
    // Update the form with sanitized value
    form.title = sanitizedTitle
  }

  // Description validation with sanitization
  const sanitizedDescription = sanitizeInput(form.description.trim())
  if (!sanitizedDescription) {
    validation.description.valid = false
    validation.description.message = 'Add a description'
    isValid = false
  } else if (sanitizedDescription.length < 20) {
    validation.description.valid = false
    validation.description.message = 'Write at least 20 letters'
    isValid = false
  } else if (sanitizedDescription.length > 5000) {
    validation.description.valid = false
    validation.description.message = 'Too long! Keep it under 5000 letters'
    isValid = false
  } else {
    validation.description.valid = true
    // Update the form with sanitized value
    form.description = sanitizedDescription
  }

  // Category validation
  if (!form.category) {
    validation.category.valid = false
    validation.category.message = 'Pick a category'
    isValid = false
  } else {
    // Validate category ID exists in valid categories
    const categoryExists = categories.value.some((cat) => cat.id === form.category)
    if (!categoryExists) {
      validation.category.valid = false
      validation.category.message = 'Pick a category from the list'
      isValid = false
    } else {
      validation.category.valid = true
    }
  }

  // Sub-categories validation
  const nonEmptySubCategories = form.subCategories.filter((cat) => cat !== '')
  const uniqueSubCategories = [...new Set(nonEmptySubCategories)]

  if (nonEmptySubCategories.length !== uniqueSubCategories.length) {
    validation.subCategories.valid = false
    validation.subCategories.message = 'You picked the same tag twice'
    isValid = false
  } else {
    // Validate each subcategory ID exists in valid subcategories
    const invalidSubCat = nonEmptySubCategories.some(
      (subCat) => !availableSubCategories.value.some((validSubCat) => validSubCat.id === subCat),
    )

    if (invalidSubCat) {
      validation.subCategories.valid = false
      validation.subCategories.message = 'Pick tags from the list'
      isValid = false
    } else {
      validation.subCategories.valid = true
    }
  }

  // Date validation
  if (!form.date) {
    validation.date.valid = false
    validation.date.message = 'Pick a date'
    isValid = false
  } else {
    // Validate date format and ensure it's not in the past
    const selectedDate = new Date(form.date)
    const currentDate = new Date()
    currentDate.setHours(0, 0, 0, 0)

    if (isNaN(selectedDate.getTime())) {
      validation.date.valid = false
      validation.date.message = "This date won't work"
      isValid = false
    } else if (selectedDate < currentDate) {
      validation.date.valid = false
      validation.date.message = 'Pick a date in the future'
      isValid = false
    } else {
      validation.date.valid = true
    }
  }

  // Time validation
  if (!form.time) {
    validation.time.valid = false
    validation.time.message = 'Add a start time'
    isValid = false
  } else {
    // Validate time format (HH:MM)
    const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/
    if (!timeRegex.test(form.time)) {
      validation.time.valid = false
      validation.time.message = 'Use hours:minutes format'
      isValid = false
    } else {
      validation.time.valid = true
    }
  }

  // Location validation with sanitization
  const sanitizedLocation = sanitizeInput(form.location.trim())
  if (!sanitizedLocation) {
    validation.location.valid = false
    validation.location.message = 'Add a location'
    isValid = false
  } else if (sanitizedLocation.length < 5) {
    validation.location.valid = false
    validation.location.message = 'Write a longer address'
    isValid = false
  } else {
    validation.location.valid = true
    // Update the form with sanitized value
    form.location = sanitizedLocation
  }

  // Price validation
  if (isNaN(form.price) || form.price === '') {
    validation.price.valid = false
    validation.price.message = 'Price must be a number'
    isValid = false
  } else {
    const price = parseFloat(form.price)
    if (price < 0) {
      validation.price.valid = false
      validation.price.message = "Price can't be negative"
      isValid = false
    } else if (price > 100000) {
      validation.price.valid = false
      validation.price.message = 'Price too high (max $100,000)'
      isValid = false
    } else {
      validation.price.valid = true
      // Ensure price is stored as a number with 2 decimal places
      form.price = parseFloat(price.toFixed(2))
    }
  }

  // Tickets validation
  if (isNaN(form.totalTickets) || form.totalTickets === '') {
    validation.totalTickets.valid = false
    validation.totalTickets.message = 'How many tickets?'
    isValid = false
  } else {
    const tickets = parseInt(form.totalTickets)
    if (tickets <= 0) {
      validation.totalTickets.valid = false
      validation.totalTickets.message = 'You need at least 1 ticket'
      isValid = false
    } else if (tickets > 100000) {
      validation.totalTickets.valid = false
      validation.totalTickets.message = 'Too many tickets (max 100,000)'
      isValid = false
    } else {
      validation.totalTickets.valid = true
      // Ensure tickets is stored as an integer
      form.totalTickets = tickets
    }
  }

  // Organizer validation with sanitization
  const sanitizedOrganizer = sanitizeInput(form.organizer.trim())
  if (!sanitizedOrganizer) {
    validation.organizer.valid = false
    validation.organizer.message = 'Add your name or group name'
    isValid = false
  } else {
    validation.organizer.valid = true
    // Update the form with sanitized value
    form.organizer = sanitizedOrganizer
  }

  // Ticket types validation
  if (form.ticketTypes.length === 0) {
    validation.ticketTypes.valid = false
    validation.ticketTypes.message = 'Add at least one ticket type'
    isValid = false
  } else {
    let ticketTypeValid = true
    form.ticketTypes.forEach((ticket, index) => {
      const sanitizedName = sanitizeInput(ticket.name.trim())
      if (!sanitizedName) {
        validation.ticketTypes.valid = false
        validation.ticketTypes.message = `Ticket #${index + 1} needs a name`
        ticketTypeValid = false
        isValid = false
      }

      if (ticket.quantity <= 0) {
        validation.ticketTypes.valid = false
        validation.ticketTypes.message = `Ticket #${index + 1} needs at least 1`
        ticketTypeValid = false
        isValid = false
      }

      if (ticket.salesEndDate) {
        const endDate = new Date(ticket.salesEndDate)
        const eventDate = new Date(form.date)

        if (isNaN(endDate.getTime())) {
          validation.ticketTypes.valid = false
          validation.ticketTypes.message = `Ticket #${index + 1} has a bad date`
          ticketTypeValid = false
          isValid = false
        } else if (endDate > eventDate) {
          validation.ticketTypes.valid = false
          validation.ticketTypes.message = `Ticket #${index + 1} must stop selling before event starts`
          ticketTypeValid = false
          isValid = false
        }
      }
    })

    if (ticketTypeValid) {
      validation.ticketTypes.valid = true
    }
  }

  // Main image validation
  if (!form.mainImage) {
    validation.mainImage.valid = false
    validation.mainImage.message = 'Upload a main image'
    isValid = false
  }

  // Banner image validation
  if (!form.bannerImage) {
    validation.bannerImage.valid = false
    validation.bannerImage.message = 'Upload a banner image'
    isValid = false
  }

  return isValid
}

// Handle form submission
const handleSubmit = async () => {
  if (!validateForm()) {
    // Scroll to first error
    const firstError = Object.keys(validation).find((key) => !validation[key].valid)
    if (firstError) {
      const element = document.getElementById(firstError)
      if (element) element.scrollIntoView({ behavior: 'smooth', block: 'center' })
    }
    return
  }

  isSubmitting.value = true
  error.value = null

  try {
    // Filter out empty sub-categories and combine with custom subcategories
    const validSubCategories = [
      ...form.subCategories.filter((cat) => cat !== ''),
      ...customSubCategories.value,
    ]

    // Process ticket types
    const processedTickets = form.ticketTypes.map((ticket) => ({
      ...ticket,
      price: parseFloat(ticket.price),
      quantity: parseInt(ticket.quantity),
      name: sanitizeInput(ticket.name.trim()),
      description: sanitizeInput(ticket.description.trim()),
    }))

    // Process images - convert File objects to data URLs
    let mainImageUrl = mainImagePreview.value
    let bannerImageUrl = bannerImagePreview.value

    // Get the selected event options
    const selectedEventOptions = [...form.selectedEventOptions, ...form.customEventOptions].filter(
      Boolean,
    ) // Remove any falsy values

    // Prepare the event data
    const eventData = {
      title: form.title,
      description: form.description,
      category: form.category,
      subCategories: validSubCategories,
      date: fullDateTime.value,
      location: form.location,
      price: parseFloat(form.price),
      totalTickets: parseInt(form.totalTickets),
      organizer: form.organizer,
      duration: form.duration,
      featured: form.featured,
      imageIndex: form.imageIndex,
      mainImage: mainImageUrl,
      bannerImage: bannerImageUrl,
      eventOptions: selectedEventOptions, // Add event options to the event data
      selectedEventOptions: form.selectedEventOptions, // Store the original selected options
      customEventOptions: form.customEventOptions, // Store the custom options
      ticketTypes: processedTickets,
      faqs: form.faqs.filter((faq) => faq.question.trim() && faq.answer.trim()), // Only include FAQs with content
    }

    // Create the event
    const newEvent = await eventStore.createEvent(eventData)

    success.value = true

    // Redirect to the event page after a brief delay
    setTimeout(() => {
      router.push({ path: `/event/${newEvent.id}` })
    }, 2000)
  } catch (err) {
    error.value = err.message || 'Failed to create event'
    window.scrollTo({ top: 0, behavior: 'smooth' })
  } finally {
    isSubmitting.value = false
  }
}

// Reset form
const resetForm = () => {
  Object.keys(form).forEach((key) => {
    if (key === 'price') {
      form[key] = 0
    } else if (key === 'totalTickets') {
      form[key] = 100
    } else if (key === 'featured') {
      form[key] = false
    } else if (key === 'imageIndex') {
      form[key] = Math.floor(Math.random() * 4)
    } else if (key === 'time') {
      form[key] = '19:00'
    } else if (key === 'subCategories') {
      form[key] = []
    } else if (key === 'ticketTypes') {
      form[key] = [
        {
          name: 'General Admission',
          price: 0,
          quantity: 100,
          description: '',
          salesEndDate: '',
          salesEndTime: '23:59',
          isFeatured: false,
        },
      ]
    } else {
      form[key] = ''
    }
  })

  Object.keys(validation).forEach((key) => {
    validation[key].valid = true
    validation[key].message = ''
  })

  error.value = null
  success.value = false

  // Also reset custom subcategories
  customSubCategories.value = []

  // Reset custom event options
  form.customEventOptions = []

  // Reset event options to defaults
  form.selectedEventOptions = ['Live performance', 'Food & drinks available', 'Indoor event']

  // Reset FAQs to defaults
  form.faqs = [
    {
      question: "What's included in the ticket price?",
      answer:
        'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
    },
    {
      question: "What's the refund policy?",
      answer:
        'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
    },
    {
      question: 'Is there parking available?',
      answer:
        'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
    },
    {
      question: 'What should I bring with me?',
      answer:
        'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
    },
    {
      question: 'Are there age restrictions for this event?',
      answer:
        'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
    },
  ]
}

// Set min date to today for date picker
// const today = new Date().toISOString().split('T')[0]

// Open template modal for a specific ticket
const openTemplateModal = (index) => {
  activeTicketIndex.value = index
  showTemplateModal.value = true
  document.body.style.overflow = 'hidden' // Prevent background scrolling
}

// Close template modal
const closeTemplateModal = () => {
  showTemplateModal.value = false
  document.body.style.overflow = '' // Re-enable scrolling
}

// Apply template from modal and close the modal
const applyTemplateFromModal = (index, template) => {
  applyTemplate(index, template)
  closeTemplateModal()
}

// Add FAQ
const addFaq = () => {
  form.faqs.push({
    question: '',
    answer: '',
  })
}

// Remove FAQ
const removeFaq = (index) => {
  form.faqs.splice(index, 1)
}

// Handle main image upload
const handleMainImageUpload = (event) => {
  let file

  // Check if it's a drop event
  if (event.dataTransfer) {
    file = event.dataTransfer.files[0]
  } else if (event.target.files) {
    file = event.target.files[0]
  }

  if (file) {
    form.mainImage = file
    validation.mainImage.valid = true

    // Create a preview URL
    const reader = new FileReader()
    reader.onload = (e) => {
      mainImagePreview.value = e.target.result
    }
    reader.readAsDataURL(file)
  }
}

// Handle banner image upload
const handleBannerImageUpload = (event) => {
  let file

  // Check if it's a drop event
  if (event.dataTransfer) {
    file = event.dataTransfer.files[0]
  } else if (event.target.files) {
    file = event.target.files[0]
  }

  if (file) {
    form.bannerImage = file
    validation.bannerImage.valid = true

    // Create a preview URL
    const reader = new FileReader()
    reader.onload = (e) => {
      bannerImagePreview.value = e.target.result
    }
    reader.readAsDataURL(file)
  }
}

// Remove main image - could be added to the UI if needed
const removeMainImage = () => {
  form.mainImage = null
  mainImagePreview.value = null
  validation.mainImage.valid = false
  validation.mainImage.message = 'Please upload a main image'
}

// Remove banner image - could be added to the UI if needed
const removeBannerImage = () => {
  form.bannerImage = null
  bannerImagePreview.value = null
  validation.bannerImage.valid = false
  validation.bannerImage.message = 'Please upload a banner image'
}

// Trigger main image upload
const triggerMainImageUpload = () => {
  const input = document.getElementById('mainImage')
  input.click()
}

// Trigger banner image upload
const triggerBannerImageUpload = () => {
  const input = document.getElementById('bannerImage')
  input.click()
}

// Add custom subcategory
const addCustomSubCategory = () => {
  const trimmed = newCustomSubCategory.value.trim()
  if (
    trimmed &&
    customSubCategories.value.length < 5 &&
    !customSubCategories.value.includes(trimmed)
  ) {
    customSubCategories.value.push(trimmed)
    newCustomSubCategory.value = ''
  }
}

// Remove custom subcategory
const removeCustomSubCategory = (index) => {
  customSubCategories.value.splice(index, 1)
}

// Get all displayed subcategories (selected + custom)
const displayedSubCategories = computed(() => {
  return [...form.subCategories, ...customSubCategories.value]
})

// Get subcategory name by id
const getSubCategoryName = (subCatId) => {
  // If it's a predefined subcategory
  if (typeof subCatId === 'string' && subCatId.startsWith('sub')) {
    const subCat = availableSubCategories.value.find((sc) => sc.id === subCatId)
    return subCat ? subCat.name : subCatId
  }
  // If it's a custom subcategory
  return subCatId
}

// Filter subcategories based on search term
const filteredSubCategories = computed(() => {
  if (!subCategorySearchTerm.value) return availableSubCategories.value

  const searchTerm = subCategorySearchTerm.value.toLowerCase()
  return availableSubCategories.value.filter((sc) => sc.name.toLowerCase().includes(searchTerm))
})

// Count selected subcategories
const selectedSubCategoriesCount = computed(() => {
  return tempSelectedSubCategories.value.length + customSubCategories.value.length
})

// Remove a subcategory from the form
const removeSubCategoryById = (subCat) => {
  if (typeof subCat === 'string' && subCat.startsWith('sub')) {
    // If it's a predefined subcategory
    form.subCategories = form.subCategories.filter((sc) => sc !== subCat)
  } else {
    // If it's a custom subcategory
    customSubCategories.value = customSubCategories.value.filter((sc) => sc !== subCat)
  }
}

// Toggle subcategory selection
const toggleSubCategory = (id) => {
  if (isSubCategorySelected(id)) {
    tempSelectedSubCategories.value = tempSelectedSubCategories.value.filter(
      (subCatId) => subCatId !== id,
    )
  } else {
    if (selectedSubCategoriesCount.value < 5) {
      tempSelectedSubCategories.value.push(id)
    }
  }
}

// Check if subcategory is selected
const isSubCategorySelected = (id) => {
  return tempSelectedSubCategories.value.includes(id)
}

// Open subcategory modal
const openSubCategoryModal = () => {
  if (form.category === '') {
    validation.category.valid = false
    validation.category.message = 'Select a category first'
    // Focus category dropdown
    const categoryElement = document.getElementById('category')
    if (categoryElement) categoryElement.focus()
    return
  }

  // Initialize the temp selection with current selection
  tempSelectedSubCategories.value = [...form.subCategories]
  showSubCategoryModal.value = true
  document.body.style.overflow = 'hidden' // Prevent background scrolling
}

// Close subcategory modal
const closeSubCategoryModal = () => {
  showSubCategoryModal.value = false
  document.body.style.overflow = '' // Re-enable scrolling
  subCategorySearchTerm.value = ''
  newCustomSubCategory.value = ''
}

// Confirm subcategory selections
const confirmSubCategories = () => {
  form.subCategories = [...tempSelectedSubCategories.value]
  closeSubCategoryModal()
}

// Handle main image drop
const handleMainImageDrop = (event) => {
  event.preventDefault()
  handleMainImageUpload(event)
}

// Handle banner image drop
const handleBannerImageDrop = (event) => {
  event.preventDefault()
  handleBannerImageUpload(event)
}

// Add custom event option
const addCustomEventOption = () => {
  const trimmed = newCustomEventOption.value.trim()
  if (trimmed && form.customEventOptions.length < 5 && !form.customEventOptions.includes(trimmed)) {
    form.customEventOptions.push(trimmed)
    newCustomEventOption.value = ''
  }
}

// Remove custom event option
const removeCustomEventOption = (index) => {
  form.customEventOptions.splice(index, 1)
}

// Toggle event option
const toggleEventOption = (option) => {
  if (form.selectedEventOptions.includes(option)) {
    form.selectedEventOptions = form.selectedEventOptions.filter((opt) => opt !== option)
  } else {
    // Allow selecting more options - remove limit
    form.selectedEventOptions.push(option)
  }
}

// Check if event option is selected
const isEventOptionSelected = (option) => {
  return form.selectedEventOptions.includes(option)
}

// Predefined event options
const predefinedEventOptions = [
  'Live performance',
  'Food & drinks available',
  'Indoor event',
  'Outdoor event',
  'Accessible venue',
  'Family friendly',
  'Free parking',
  'VIP access',
  'Professional networking',
  'Photo opportunities',
  'Live streaming',
  'Q&A session',
  'Merchandise available',
  'Meet & greet',
  'Seating provided',
]

const showDateTip = ref(false)
const showTimeTip = ref(false)

// Time picker variables
const isTimePickerOpen = ref(false)
const selectedTime = ref('07:00')
const selectedPeriod = ref('AM')

const timeOptions = [
  '01:00',
  '01:30',
  '02:00',
  '02:30',
  '03:00',
  '03:30',
  '04:00',
  '04:30',
  '05:00',
  '05:30',
  '06:00',
  '06:30',
  '07:00',
  '07:30',
  '08:00',
  '08:30',
  '09:00',
  '09:30',
  '10:00',
  '10:30',
  '11:00',
  '11:30',
  '12:00',
  '12:30',
]

const openTimePicker = () => {
  // If there's already a time, parse it to 12-hour format for the picker
  if (form.time) {
    const [hours, minutes] = form.time.split(':')
    const hour = parseInt(hours)

    if (hour > 12) {
      // Convert from 24-hour to 12-hour format for PM
      selectedTime.value = `${(hour - 12).toString().padStart(2, '0')}:${minutes}`
      selectedPeriod.value = 'PM'
    } else if (hour === 12) {
      // 12 PM
      selectedTime.value = `12:${minutes}`
      selectedPeriod.value = 'PM'
    } else if (hour === 0) {
      // 12 AM
      selectedTime.value = `12:${minutes}`
      selectedPeriod.value = 'AM'
    } else {
      // Regular AM hours
      selectedTime.value = `${hour.toString().padStart(2, '0')}:${minutes}`
      selectedPeriod.value = 'AM'
    }
  } else {
    // Default to 7:00 AM if no time selected
    selectedTime.value = '07:00'
    selectedPeriod.value = 'AM'
  }

  isTimePickerOpen.value = true
}

const closeTimePicker = () => {
  isTimePickerOpen.value = false
}

const selectTime = (time) => {
  selectedTime.value = time
}

const selectPeriod = (period) => {
  selectedPeriod.value = period
}

const applyTimeSelection = () => {
  // Convert to 24-hour format if PM is selected
  if (selectedPeriod.value === 'PM') {
    const [hours, minutes] = selectedTime.value.split(':')
    const hour = parseInt(hours)

    // Only adjust hours that aren't already in PM format (12 PM stays as 12)
    const adjustedHour = hour === 12 ? 12 : hour + 12
    form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
  } else {
    // For AM, make sure 12 AM becomes 00:00
    const [hours, minutes] = selectedTime.value.split(':')
    const hour = parseInt(hours)
    const adjustedHour = hour === 12 ? 0 : hour
    form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
  }

  closeTimePicker()
}

// Date picker variables
const isDatePickerOpen = ref(false)
const currentYear = ref(new Date().getFullYear())
const currentMonth = ref(new Date().getMonth())
const selectedDate = ref(new Date())
const tempSelectedDate = ref(null)

// Custom time input variables
const customHours = ref('07')
const customMinutes = ref('00')

// Define weekdays and month names for the calendar
const weekdays = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
const monthNames = [
  'January',
  'February',
  'March',
  'April',
  'May',
  'June',
  'July',
  'August',
  'September',
  'October',
  'November',
  'December',
]

// Format time inputs when focus is lost
const formatTimeInputs = () => {
  // Validate and format hours
  let formattedHours = parseInt(customHours.value) || 1
  if (formattedHours < 1) formattedHours = 1
  if (formattedHours > 12) formattedHours = 12

  // Validate and format minutes
  let formattedMinutes = parseInt(customMinutes.value) || 0
  if (formattedMinutes < 0) formattedMinutes = 0
  if (formattedMinutes > 59) formattedMinutes = 59

  // Update the ref values with formatted strings
  customHours.value = formattedHours.toString().padStart(2, '0')
  customMinutes.value = formattedMinutes.toString().padStart(2, '0')

  // Update selectedTime with formatted values
  selectedTime.value = `${formattedHours.toString().padStart(2, '0')}:${formattedMinutes.toString().padStart(2, '0')}`
}

// Function to prefill the form with test data
const prefillForm = () => {
  // Generate a random event title to avoid duplicates
  const eventTypes = ['Workshop', 'Conference', 'Meetup', 'Concert', 'Festival', 'Webinar', 'Hackathon']
  const eventAdjectives = ['Amazing', 'Incredible', 'Ultimate', 'Exclusive', 'Premier', 'Annual', 'Interactive']
  const eventSubjects = ['Tech', 'Music', 'Art', 'Food', 'Business', 'Science', 'Wellness', 'Development']

  const randomTitle = `${eventAdjectives[Math.floor(Math.random() * eventAdjectives.length)]} ${
    eventSubjects[Math.floor(Math.random() * eventSubjects.length)]
  } ${eventTypes[Math.floor(Math.random() * eventTypes.length)]}`

  // Random location
  const cities = ['New York', 'San Francisco', 'Chicago', 'Los Angeles', 'Miami', 'Seattle', 'Austin', 'Boston']
  const venues = ['Convention Center', 'Concert Hall', 'Community Space', 'Hotel Ballroom', 'Outdoor Park', 'Art Gallery']
  const randomLocation = `${venues[Math.floor(Math.random() * venues.length)]}, ${
    cities[Math.floor(Math.random() * cities.length)]
  }`

  // Select a random category
  const randomCategory = categories.value[Math.floor(Math.random() * categories.value.length)].id

  // Generate random date and time (between 1-3 months in the future)
  const futureDate = new Date()
  futureDate.setDate(futureDate.getDate() + 30 + Math.floor(Math.random() * 60)) // 30-90 days in future

  const year = futureDate.getFullYear()
  const month = (futureDate.getMonth() + 1).toString().padStart(2, '0')
  const day = futureDate.getDate().toString().padStart(2, '0')
  const formattedDate = `${year}-${month}-${day}`

  // Random time (morning, afternoon, or evening)
  const hours = [9, 10, 13, 14, 18, 19]
  const randomHour = hours[Math.floor(Math.random() * hours.length)]
  const randomMinutes = ['00', '15', '30', '45'][Math.floor(Math.random() * 4)]
  const formattedTime = `${randomHour.toString().padStart(2, '0')}:${randomMinutes}`

  // Random price (free or $10-$150)
  const randomPrice = Math.random() > 0.2 ? (Math.floor(Math.random() * 14) + 1) * 10 + 0.99 : 0

  // Random ticket count
  const randomTickets = (Math.floor(Math.random() * 10) + 1) * 50

  // Random duration
  const durations = ['2 hours', '3 hours', '4 hours', 'All day', '2 days', 'Weekend']
  const randomDuration = durations[Math.floor(Math.random() * durations.length)]

  // Fill the form with the random data
  form.title = randomTitle
  form.organizer = 'Test Organizer LLC'
  form.description = `Join us for this amazing event where you'll experience the best of ${eventSubjects[Math.floor(Math.random() * eventSubjects.length)]}.

This is a great opportunity to network with like-minded individuals and learn from industry experts. Don't miss out on this incredible experience!

• Professional speakers
• Networking opportunities
• Hands-on activities
• Refreshments provided
• Take-home materials`

  form.location = randomLocation
  form.category = randomCategory
  form.date = formattedDate
  form.time = formattedTime
  form.price = randomPrice.toString()
  form.totalTickets = randomTickets.toString()
  form.duration = randomDuration
  form.featured = Math.random() > 0.5 // 50% chance to be featured

  // Select 3-5 random event options
  form.selectedEventOptions = []
  const shuffledOptions = [...predefinedEventOptions].sort(() => 0.5 - Math.random())
  const optionsCount = Math.floor(Math.random() * 3) + 3 // 3-5 options
  form.selectedEventOptions = shuffledOptions.slice(0, optionsCount)

  // Add 1-2 custom options
  form.customEventOptions = []
  const customOptionIdeas = [
    'Free merchandise',
    'After-party included',
    'Video recording available',
    'Certificate provided',
    'Professional photos',
    'Translation services',
    'VIP meet & greet'
  ]

  if (Math.random() > 0.5) {
    const shuffledCustomOptions = [...customOptionIdeas].sort(() => 0.5 - Math.random())
    const customCount = Math.floor(Math.random() * 2) + 1 // 1-2 custom options
    form.customEventOptions = shuffledCustomOptions.slice(0, customCount)
  }

  // Add ticket types
  form.ticketTypes = [
    {
      name: 'General Admission',
      price: randomPrice,
      quantity: Math.floor(randomTickets * 0.7), // 70% of tickets
      description: 'Standard entry ticket with access to all areas.',
      salesEndDate: '',
      salesEndTime: '23:59',
      isFeatured: false
    }
  ]

  if (Math.random() > 0.3) { // 70% chance to have VIP tickets
    form.ticketTypes.push({
      name: 'VIP Experience',
      price: randomPrice * 2.5,
      quantity: Math.floor(randomTickets * 0.3), // 30% of tickets
      description: 'Premium ticket with exclusive perks and priority access.',
      salesEndDate: '',
      salesEndTime: '23:59',
      isFeatured: true
    })
  }

<div class="create-event">
    <div class="container">
      <router-link to="/" class="back-link">
        <svg
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M19 12H5"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
          <path
            d="M12 19L5 12L12 5"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
        <span>BACK</span>
      </router-link>

      <div class="create-event__header">
        <h1 class="create-event__title">Make Your Event dYZ%</h1>
        <p class="create-event__subtitle">Fill out this form to create your event - it's easy!</p>
        <button type="button" @click="prefillForm" class="prefill-button">
          Prefill with Test Data
        </button>
      </div>

      <div v-if="error" class="create-event__alert create-event__alert--error">
        {{ error }}
      </div>

      <div v-if="success" class="create-event__alert create-event__alert--success">
        Event created successfully! Redirecting to event page...
      </div>

      <form @submit.prevent="handleSubmit" class="create-event__form">
        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Event Information
          </h2>

          <div class="form-group">
            <label for="title" class="form-label">Event Name</label>
            <input
              id="title"
              v-model="form.title"
              type="text"
              class="form-input"
              :class="{ 'form-input--error': !validation.title.valid }"
              placeholder="What's your event called?"
            />
            <p v-if="!validation.title.valid" class="form-error">{{ validation.title.message }}</p>
            <p v-else class="form-helper">Name it something people will understand right away</p>
          </div>

          <div class="form-group">
            <label for="organizer" class="form-label">Organizer Name</label>
            <input
              id="organizer"
              v-model="form.organizer"
              type="text"
              class="form-input"
              :class="{ 'form-input--error': !validation.organizer.valid }"
              placeholder="Who's hosting this?"
            />
            <p v-if="!validation.organizer.valid" class="form-error">
              {{ validation.organizer.message }}
            </p>
          </div>

          <div class="form-group">
            <label for="category" class="form-label">Event Category</label>
            <select
              id="category"
              v-model="form.category"
              class="form-select"
              :class="{ 'form-input--error': !validation.category.valid }"
            >
              <option value="" disabled>Select a category</option>
              <option v-for="category in categories" :key="category.id" :value="category.id">
                {{ category.name }}
              </option>
            </select>
            <p v-if="!validation.category.valid" class="form-error">
              {{ validation.category.message }}
            </p>
            <p v-else class="form-helper">The right category helps people find your event</p>
          </div>

          <div class="form-group">
            <label class="form-label">Sub Categories</label>
            <div class="subcategories-display">
              <div class="selected-subcategories">
                <div v-if="displayedSubCategories.length === 0" class="no-subcategories">
                  No subcategories selected
                </div>
                <div
                  v-for="(subCat, index) in displayedSubCategories"
                  :key="index"
                  class="selected-subcategory"
                >
                  <span>{{ getSubCategoryName(subCat) }}</span>
                  <button
                    type="button"
                    @click="removeSubCategoryById(subCat)"
                    class="remove-subcategory-btn"
                    aria-label="Remove subcategory"
                  >
                    <svg
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>
              <button
                type="button"
                @click="openSubCategoryModal"
                class="manage-subcategories-btn"
                :disabled="form.category === ''"
              >
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M12 5V19"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  <path
                    d="M5 12H19"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
                <span>{{ displayedSubCategories.length ? 'Edit' : 'Add' }} Subcategories</span>
              </button>
            </div>
            <p v-if="!validation.subCategories.valid" class="form-error">
              {{ validation.subCategories.message }}
            </p>
            <p v-else class="form-helper">
              Add up to 5 subcategories to describe your event better
            </p>
          </div>

          <div class="form-group">
            <label for="description" class="form-label">Event Description</label>
            <textarea
              id="description"
              v-model="form.description"
              class="form-textarea"
              :class="{ 'form-input--error': !validation.description.valid }"
              placeholder="Tell people what makes your event special..."
              rows="5"
            ></textarea>
            <p v-if="!validation.description.valid" class="form-error">
              {{ validation.description.message }}
            </p>
            <p v-else class="form-helper">Tell people what will happen at your event</p>
          </div>

          <div class="form-group">
            <label class="form-label">Event Images</label>
            <div class="image-upload-container">
              <div class="image-upload-row">
                <div
                  class="image-upload-dropzone"
                  :class="{ 'has-image': mainImagePreview }"
                  @click="triggerMainImageUpload"
                  @dragover.prevent
                  @drop.prevent="handleMainImageDrop"
                >
                  <img
                    v-if="mainImagePreview"
                    :src="mainImagePreview"
                    alt="Main image preview"
                    class="preview-image"
                  />
                  <div v-if="mainImagePreview" class="image-overlay">
                    <button type="button" class="remove-image-btn" @click.stop="removeMainImage">
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                      <span>Remove</span>
                    </button>
                  </div>
                  <div v-else class="upload-placeholder">
                    <div class="upload-icon">
                      <svg
                        width="32"
                        height="32"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <rect
                          x="3"
                          y="3"
                          width="18"
                          height="18"
                          rx="2"
                          stroke="currentColor"
                          stroke-width="1.5"
                        />
                        <path
                          d="M3 16L7 12C7.94 11.06 9.44 11.06 10.38 12L16.5 18"
                          stroke="currentColor"
                          stroke-width="1.5"
                          stroke-linecap="round"
                        />
                        <path
                          d="M14 16L16 14C16.94 13.06 18.44 13.06 19.38 14L21 15.5"
                          stroke="currentColor"
                          stroke-width="1.5"
                          stroke-linecap="round"
                        />
                        <circle cx="9" cy="8" r="2" stroke="currentColor" stroke-width="1.5" />
                      </svg>
                    </div>
                    <div class="upload-text">
                      <span class="primary-text">Main Event Image</span>
                      <span class="secondary-text">Drag & drop or click to upload</span>
                    </div>
                  </div>
                </div>

                <div
                  class="image-upload-dropzone banner-dropzone"
                  :class="{ 'has-image': bannerImagePreview }"
                  @click="triggerBannerImageUpload"
                  @dragover.prevent
                  @drop.prevent="handleBannerImageDrop"
                >
                  <img
                    v-if="bannerImagePreview"
                    :src="bannerImagePreview"
                    alt="Banner image preview"
                    class="preview-image"
                  />
                  <div v-if="bannerImagePreview" class="image-overlay">
                    <button type="button" class="remove-image-btn" @click.stop="removeBannerImage">
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M18 6L6 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 6L18 18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                      <span>Remove</span>
                    </button>
                  </div>
                  <div v-else class="upload-placeholder">
                    <div class="upload-icon">
                      <svg
                        width="32"
                        height="32"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <rect
                          x="2"
                          y="4"
                          width="20"
                          height="13"
                          rx="2"
                          stroke="currentColor"
                          stroke-width="1.5"
                        />
                        <path
                          d="M2 13L6 9C6.94 8.06 8.44 8.06 9.38 9L15.5 15"
                          stroke="currentColor"
                          stroke-width="1.5"
                          stroke-linecap="round"
                        />
                        <path
                          d="M14 13L16 11C16.94 10.06 18.44 10.06 19.38 11L22 13.5"
                          stroke="currentColor"
                          stroke-width="1.5"
                          stroke-linecap="round"
                        />
                        <circle cx="8" cy="7" r="1.5" stroke="currentColor" stroke-width="1.5" />
                      </svg>
                    </div>
                    <div class="upload-text">
                      <span class="primary-text">Banner Image</span>
                      <span class="secondary-text">Drag & drop or click to upload</span>
                    </div>
                  </div>
                </div>
              </div>

              <div class="image-inputs">
                <input
                  id="mainImage"
                  ref="mainImageInput"
                  type="file"
                  class="image-input"
                  accept="image/*"
                  @change="handleMainImageUpload"
                />
                <input
                  id="bannerImage"
                  ref="bannerImageInput"
                  type="file"
                  class="image-input"
                  accept="image/*"
                  @change="handleBannerImageUpload"
                />
              </div>
            </div>
            <p
              v-if="!validation.mainImage.valid || !validation.bannerImage.valid"
              class="form-error"
            >
              {{
                !validation.mainImage.valid
                  ? validation.mainImage.message
                  : validation.bannerImage.message
              }}
            </p>
            <p v-else class="form-helper">
              Upload images for your event. The main image will appear on cards throughout the site,
              while the banner will be displayed on your event's detail page.
            </p>
          </div>
        </div>

        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Date & Time
          </h2>

          <div class="form-row">
            <div class="form-group">
              <label for="date" class="form-label">Event Date</label>
              <div class="date-picker-wrapper">
                <input
                  id="date"
                  v-model="form.date"
                  type="text"
                  readonly
                  class="form-input date-input"
                  :class="{ 'form-input--error': !validation.date.valid }"
                  :min="today"
                  @click="openDatePicker"
                />
                <div v-if="showDateTip" class="picker-tip">
                  <div class="tip-arrow"></div>
                  <div class="tip-content">
                    <p>Click to open calendar</p>
                    <span>Select a date for your event</span>
                  </div>
                </div>
              </div>
              <p v-if="!validation.date.valid" class="form-error">{{ validation.date.message }}</p>
              <p v-else class="form-helper">Click to open the calendar</p>
            </div>

            <div class="form-group">
              <label for="time" class="form-label">Start Time</label>
              <div class="time-picker-wrapper">
                <input
                  id="time"
                  v-model="form.time"
                  type="text"
                  readonly
                  class="form-input time-input"
                  :class="{ 'form-input--error': !validation.time.valid }"
                  @click="openTimePicker"
                  placeholder="Select a time"
                />
                <div v-if="showTimeTip" class="picker-tip">
                  <div class="tip-arrow"></div>
                  <div class="tip-content">
                    <p>Click to select time</p>
                    <span>Use our easy time selector</span>
                  </div>
                </div>
              </div>
              <p v-if="!validation.time.valid" class="form-error">{{ validation.time.message }}</p>
              <p v-else class="form-helper">Click to open time selector</p>
            </div>
          </div>

          <div class="form-group">
            <label for="duration" class="form-label">Event Duration</label>
            <select id="duration" v-model="form.duration" class="form-select">
              <option value="" disabled>Select duration</option>
              <option v-for="option in durationOptions" :key="option" :value="option">
                {{ option }}
              </option>
            </select>
            <p class="form-helper">Tell people how long your event will last</p>
          </div>
        </div>

        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Location Details
          </h2>

          <div class="form-group">
            <label for="location" class="form-label">Venue Name & Address</label>
            <input
              id="location"
              v-model="form.location"
              type="text"
              class="form-input"
              :class="{ 'form-input--error': !validation.location.valid }"
              placeholder="Where is your event happening?"
            />
            <p v-if="!validation.location.valid" class="form-error">
              {{ validation.location.message }}
            </p>
            <p v-else class="form-helper">Add the full address so people can find your event</p>
          </div>

          <div class="location-map-placeholder">
            <div class="location-map-content">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                <circle cx="12" cy="10" r="3"></circle>
              </svg>
              <p>Maps coming soon</p>
            </div>
          </div>
        </div>

        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Ticket Information
          </h2>

          <div v-if="!validation.ticketTypes.valid" class="form-error ticket-types-error">
            {{ validation.ticketTypes.message }}
          </div>

          <div class="ticket-types-container">
            <div v-for="(ticket, index) in form.ticketTypes" :key="index" class="ticket-type-card">
              <div class="ticket-type-header">
                <h3 class="ticket-type-title">Ticket #{{ index + 1 }}</h3>
                <div class="ticket-type-actions">
                  <button
                    type="button"
                    @click="duplicateTicketType(index)"
                    class="ticket-action-btn ticket-action-duplicate"
                    title="Duplicate ticket"
                  >
                    <svg
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <rect
                        x="9"
                        y="9"
                        width="13"
                        height="13"
                        rx="2"
                        stroke="currentColor"
                        stroke-width="2"
                      />
                      <path
                        d="M5 15H4C2.89543 15 2 14.1046 2 13V4C2 2.89543 2.89543 2 4 2H13C14.1046 2 15 2.89543 15 4V5"
                        stroke="currentColor"
                        stroke-width="2"
                      />
                    </svg>
                  </button>
                  <button
                    type="button"
                    @click="removeTicketType(index)"
                    class="ticket-action-btn ticket-action-remove"
                    title="Remove ticket"
                    :disabled="form.ticketTypes.length <= 1"
                  >
                    <svg
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>

              <div class="form-group">
                <label :for="'ticket-name-' + index" class="form-label">Ticket Name</label>
                <div class="ticket-name-input-wrapper">
                  <input
                    :id="'ticket-name-' + index"
                    v-model="ticket.name"
                    type="text"
                    class="form-input"
                    placeholder="e.g. Early Bird, VIP, General Admission"
                  />
                  <div class="ticket-template-dropdown">
                    <button
                      type="button"
                      class="ticket-template-btn"
                      @click="openTemplateModal(index)"
                    >
                      <span>Templates</span>
                      <svg
                        width="14"
                        height="14"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M6 9L12 15L18 9"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                    <div class="ticket-template-options">
                      <button
                        v-for="template in ticketTemplates"
                        :key="template.name"
                        type="button"
                        class="ticket-template-option"
                        @click="applyTemplate(index, template)"
                      >
                        {{ template.name }}
                      </button>
                    </div>
                  </div>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <label :for="'ticket-price-' + index" class="form-label">Price ($)</label>
                  <input
                    :id="'ticket-price-' + index"
                    v-model.number="ticket.price"
                    type="number"
                    min="0"
                    step="0.01"
                    class="form-input"
                    placeholder="0.00"
                  />
                </div>

                <div class="form-group">
                  <label :for="'ticket-quantity-' + index" class="form-label">Quantity</label>
                  <input
                    :id="'ticket-quantity-' + index"
                    v-model.number="ticket.quantity"
                    type="number"
                    min="1"
                    class="form-input"
                    placeholder="10"
                  />
                </div>
              </div>

              <div class="form-group">
                <label :for="'ticket-description-' + index" class="form-label"
                  >Description (Optional)</label
                >
                <textarea
                  :id="'ticket-description-' + index"
                  v-model="ticket.description"
                  class="form-textarea ticket-description"
                  rows="2"
                  placeholder="Describe what's included with this ticket"
                ></textarea>
              </div>

              <div class="ticket-sales-period">
                <h4 class="ticket-section-subtitle">Sales End Date</h4>
                <p class="ticket-section-helper">
                  Should this ticket type have a deadline? If yes, tell us when sales should stop.
                  This is optional.
                </p>

                <div class="form-row">
                  <div class="form-group">
                    <label :for="'ticket-end-date-' + index" class="form-label">Date</label>
                    <input
                      :id="'ticket-end-date-' + index"
                      v-model="ticket.salesEndDate"
                      type="date"
                      class="form-input"
                      :min="today"
                      :max="form.date"
                    />
                  </div>

                  <div class="form-group">
                    <label :for="'ticket-end-time-' + index" class="form-label">Time</label>
                    <input
                      :id="'ticket-end-time-' + index"
                      v-model="ticket.salesEndTime"
                      type="time"
                      class="form-input"
                    />
                  </div>
                </div>
              </div>

              <div class="form-checkbox-wrapper">
                <input
                  :id="'ticket-featured-' + index"
                  v-model="ticket.isFeatured"
                  type="checkbox"
                  class="form-checkbox"
                />
                <label :for="'ticket-featured-' + index" class="form-checkbox-label">
                  Feature this ticket (highlighted in the ticket selection)
                </label>
              </div>
            </div>

            <button type="button" @click="addTicketType" class="add-ticket-type-btn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M12 5V19"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
                <path
                  d="M5 12H19"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
              <span>Add Another Ticket Type</span>
            </button>
          </div>
        </div>

        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Event Options
          </h2>

          <p class="section-intro">
            Select features and amenities that your event offers to help attendees know what to
            expect.
          </p>

          <div class="event-options-container">
            <div class="event-options-grid">
              <!-- Predefined event options -->
              <div
                v-for="option in predefinedEventOptions"
                :key="'predefined-' + option"
                class="event-option-item"
                @click="toggleEventOption(option)"
              >
                <div
                  class="event-option-checkbox"
                  :class="{ 'event-option-checkbox--selected': isEventOptionSelected(option) }"
                >
                  <div class="event-option-label">{{ option }}</div>
                  <svg
                    v-if="isEventOptionSelected(option)"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                    class="event-option-checkmark"
                  >
                    <path
                      d="M20 6L9 17L4 12"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                </div>
              </div>

              <!-- Custom event options -->
              <div
                v-for="(option, index) in form.customEventOptions"
                :key="'custom-' + index"
                class="event-option-item"
              >
                <div class="event-option-checkbox event-option-checkbox--selected">
                  <div class="event-option-label">{{ option }}</div>
                  <button
                    type="button"
                    @click="removeCustomEventOption(index)"
                    class="remove-option-btn"
                    aria-label="Remove option"
                  >
                    <svg
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>
            </div>

            <div class="add-event-option">
              <div class="custom-event-option-input">
                <input
                  type="text"
                  v-model="newCustomEventOption"
                  placeholder="Add your own event option..."
                  class="form-input custom-option-input"
                  @keyup.enter="addCustomEventOption"
                />
                <button
                  type="button"
                  class="add-custom-option-btn"
                  @click="addCustomEventOption"
                  :disabled="!newCustomEventOption.trim()"
                >
                  Add
                </button>
              </div>
            </div>
          </div>

          <div class="form-checkbox-wrapper mt-4">
            <input id="featured" v-model="form.featured" type="checkbox" class="form-checkbox" />
            <label for="featured" class="form-checkbox-label">
              Feature this event (additional promotion fee may apply)
            </label>
          </div>
          <p class="form-helper">Featured events show up on the homepage</p>
        </div>

        <!-- Add new FAQ section -->
        <div class="form-section">
          <h2 class="section-title">
            <span class="diamond"></span>
            Frequently Asked Questions
            <span class="section-optional">(Optional)</span>
          </h2>

          <p class="section-intro">
            Help attendees by answering common questions about your event. You can edit these
            defaults or add your own.
          </p>

          <div class="faq-container">
            <div v-for="(faq, index) in form.faqs" :key="index" class="faq-item">
              <div class="faq-header">
                <h3 class="faq-number">Q{{ index + 1 }}</h3>
                <div class="faq-actions">
                  <button
                    type="button"
                    @click="removeFaq(index)"
                    class="faq-action-btn faq-action-remove"
                    title="Remove question"
                  >
                    <svg
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>

              <div class="faq-content">
                <div class="form-group">
                  <label :for="'faq-question-' + index" class="form-label">Question</label>
                  <input
                    :id="'faq-question-' + index"
                    v-model="faq.question"
                    type="text"
                    class="form-input"
                    placeholder="Enter a question guests might ask"
                  />
                </div>

                <div class="form-group">
                  <label :for="'faq-answer-' + index" class="form-label">Answer</label>
                  <textarea
                    :id="'faq-answer-' + index"
                    v-model="faq.answer"
                    class="form-textarea faq-answer"
                    rows="3"
                    placeholder="Provide a clear answer to the question"
                  ></textarea>
                </div>
              </div>
            </div>

            <button type="button" @click="addFaq" class="add-faq-btn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M12 5V19"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
                <path
                  d="M5 12H19"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
              <span>Add Another Question</span>
            </button>
          </div>
        </div>

        <div class="form-actions">
          <button type="button" @click="resetForm" class="btn-secondary" :disabled="isSubmitting">
            Reset Form
          </button>
          <button type="submit" class="btn-primary" :disabled="isSubmitting">
            <span v-if="isSubmitting">
              <svg class="spinner" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <circle cx="12" cy="12" r="10" fill="none" stroke-width="3" />
              </svg>
              Creating Event...
            </span>
            <span v-else>Create Event</span>
          </button>
        </div>
      </form>

      <div class="create-event__note">
        <p>
          <strong>Note:</strong> Your event data is saved locally for now. Online saving coming
          soon.
        </p>
      </div>
    </div>

    <div
      v-if="showTemplateModal"
      class="ticket-template-modal-overlay"
      @click.self="closeTemplateModal"
    >
      <div class="ticket-template-modal">
        <div class="ticket-template-modal-header">
          <h3>Choose a Ticket Template</h3>
          <button @click="closeTemplateModal" class="modal-close-btn" aria-label="Close">
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18 6L6 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M6 6L18 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </div>
        <div class="ticket-template-modal-body">
          <div
            v-for="template in ticketTemplates"
            :key="template.name"
            class="template-card"
            @click="applyTemplateFromModal(activeTicketIndex, template)"
          >
            <div class="template-card-content">
              <h4 class="template-name">{{ template.name }}</h4>
              <p class="template-description">{{ template.description }}</p>
            </div>
            <div class="template-card-icon">
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M20 6L9 17L4 12"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Add subcategory modal -->
    <div
      v-if="showSubCategoryModal"
      class="subcategory-modal-overlay"
      @click.self="closeSubCategoryModal"
    >
      <div class="subcategory-modal">
        <div class="subcategory-modal-header">
          <h3>Select or Add Subcategories</h3>
          <button @click="closeSubCategoryModal" class="modal-close-btn" aria-label="Close">
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18 6L6 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M6 6L18 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </div>
        <div class="subcategory-modal-body">
          <p class="subcategory-modal-info">Select up to 5 subcategories or add your own</p>

          <div class="subcategory-search">
            <input
              type="text"
              v-model="subcategorySearchTerm"
              placeholder="Search subcategories..."
              class="subcategory-search-input"
            />
          </div>

          <div class="subcategory-options">
            <div class="subcategory-section">
              <h4 class="subcategory-section-title">Available Subcategories</h4>
              <div class="subcategory-chips">
                <div
                  v-for="subCategory in filteredSubCategories"
                  :key="subCategory.id"
                  class="subcategory-chip"
                  :class="{ 'subcategory-chip--selected': isSubCategorySelected(subCategory.id) }"
                  @click="toggleSubCategory(subCategory.id)"
                >
                  <span>{{ subCategory.name }}</span>
                  <svg
                    v-if="isSubCategorySelected(subCategory.id)"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M20 6L9 17L4 12"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                </div>
              </div>
            </div>

            <div class="subcategory-section">
              <h4 class="subcategory-section-title">Custom Subcategories</h4>
              <div class="custom-subcategory-input">
                <input
                  type="text"
                  v-model="newCustomSubCategory"
                  placeholder="Enter your own subcategory..."
                  class="form-input custom-input"
                  @keyup.enter="addCustomSubCategory"
                />
                <button
                  type="button"
                  class="add-custom-btn"
                  @click="addCustomSubCategory"
                  :disabled="!newCustomSubCategory.trim()"
                >
                  Add
                </button>
              </div>

              <div class="subcategory-chips custom-chips">
                <div
                  v-for="(custom, index) in customSubCategories"
                  :key="'custom-' + index"
                  class="subcategory-chip subcategory-chip--custom"
                >
                  <span>{{ custom }}</span>
                  <button
                    class="remove-custom-btn"
                    @click="removeCustomSubCategory(index)"
                    aria-label="Remove"
                  >
                    <svg
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M18 6L6 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M6 6L18 18"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          </div>

          <div class="subcategory-modal-footer">
            <div class="subcategory-summary">
              <span class="subcategory-count">{{ selectedSubCategoriesCount }}/5 selected</span>
            </div>
            <div class="subcategory-actions">
              <button type="button" class="btn-secondary" @click="closeSubCategoryModal">
                Cancel
              </button>
              <button type="button" class="btn-primary" @click="confirmSubCategories">Apply</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Custom Time Picker Modal -->
    <div v-if="isTimePickerOpen" class="time-picker-overlay" @click.self="closeTimePicker">
      <div class="time-picker-modal">
        <div class="time-picker-header">
          <h3>Select Time</h3>
          <button type="button" class="time-picker-close" @click="closeTimePicker">
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18 6L6 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M6 6L18 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </div>
        <div class="time-picker-body">
          <!-- Custom time input -->
          <div class="custom-time-input">
            <div class="time-input-group">
              <input
                type="text"
                v-model="customHours"
                class="time-input-field"
                maxlength="2"
                @focus="$event.target.select()"
                @blur="formatTimeInputs"
                @keydown="handleTimeInput"
                placeholder="HH"
              />
              <span class="time-divider">:</span>
              <input
                type="text"
                v-model="customMinutes"
                class="time-input-field"
                maxlength="2"
                @focus="$event.target.select()"
                @blur="formatTimeInputs"
                @keydown="handleTimeInput"
                placeholder="MM"
              />
            </div>
          </div>

          <div class="time-picker-grid">
            <div
              v-for="time in timeOptions"
              :key="time"
              class="time-option"
              :class="{ selected: selectedTime === time }"
              @click="selectTime(time)"
            >
              {{ time }}
            </div>
          </div>
          <div class="time-period-selector">
            <button
              type="button"
              class="time-period-btn"
              :class="{ selected: selectedPeriod === 'AM' }"
              @click="selectPeriod('AM')"
            >
              AM
            </button>
            <button
              type="button"
              class="time-period-btn"
              :class="{ selected: selectedPeriod === 'PM' }"
              @click="selectPeriod('PM')"
            >
              PM
            </button>
          </div>
        </div>
        <div class="time-picker-actions">
          <button type="button" class="time-picker-btn time-picker-cancel" @click="closeTimePicker">
            Cancel
          </button>
          <button
            type="button"
            class="time-picker-btn time-picker-apply"
            @click="applyTimeSelection"
          >
            Apply
          </button>
        </div>
      </div>
    </div>

    <!-- Custom Date Picker Modal -->
    <div v-if="isDatePickerOpen" class="date-picker-overlay" @click.self="closeDatePicker">
      <div class="date-picker-modal">
        <div class="date-picker-header">
          <h3>Select Date</h3>
          <button type="button" class="date-picker-close" @click="closeDatePicker">
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M18 6L6 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M6 6L18 18"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </div>
        <div class="date-picker-body">
          <div class="date-picker-month-nav">
            <button class="month-nav-btn" @click="previousMonth">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M15 18L9 12L15 6"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </button>
            <div class="month-display">{{ monthNames[currentMonth] }} {{ currentYear }}</div>
            <button class="month-nav-btn" @click="nextMonth">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M9 18L15 12L9 6"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </button>
          </div>

          <div class="date-picker-weekdays">
            <div class="weekday" v-for="day in weekdays" :key="day">{{ day }}</div>
          </div>

          <div class="date-picker-days">
            <div
              v-for="(day, index) in calendarDays"
              :key="index"
              class="calendar-day"
              :class="{
                'other-month': !day.inCurrentMonth,
                today: day.isToday,
                selected: day.isSelected,
                disabled: day.isDisabled,
              }"
              @click="!day.isDisabled && selectDate(day.date)"
            >
              {{ day.day }}
            </div>
          </div>
        </div>
        <div class="date-picker-actions">
          <button type="button" class="date-picker-btn date-picker-cancel" @click="closeDatePicker">
            Cancel
          </button>
          <button
            type="button"
            class="date-picker-btn date-picker-apply"
            @click="applyDateSelection"
          >
            Apply
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, reactive, watch, onMounted } from 'vue'
import { useRouter } from 'vue-router'
import { useEventStore } from '@/stores/events'

// Initialize references
const router = useRouter()
const eventStore = useEventStore()
const error = ref(null)
const success = ref(false)
const isSubmitting = ref(false)
const today = ref(new Date().toISOString().split('T')[0]) // Today's date in YYYY-MM-DD format
const showTemplateModal = ref(false)
const activeTicketIndex = ref(0)
const showSubCategoryModal = ref(false)
const tempSelectedSubCategories = ref([]) // Temporary storage for selected subcategories in modal
const subCategorySearchTerm = ref('')
const customSubCategories = ref([])
const newCustomSubCategory = ref('')
const categories = ref([])
const availableSubCategories = ref([])
const mainImagePreview = ref(null)
const bannerImagePreview = ref(null)
const newCustomEventOption = ref('')

// Also initialize form with image fields
const form = reactive({
  title: '',
  description: '',
  category: '',
  subCategories: [],
  date: '',
  time: '19:00',
  location: '',
  price: 0,
  totalTickets: 100,
  organizer: '',
  duration: '',
  featured: false,
  imageIndex: Math.floor(Math.random() * 4), // Random image from available set
  mainImage: null,
  bannerImage: null,
  selectedEventOptions: [], // Start with no options selected
  customEventOptions: [], // For user-added custom options
  ticketTypes: [
    {
      name: 'General Admission',
      price: 0,
      quantity: 100,
      description: '',
      salesEndDate: '',
      salesEndTime: '23:59',
      isFeatured: false,
    },
  ],
  // Add FAQs to the form data
  faqs: [
    {
      question: "What's included in the ticket price?",
      answer:
        'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
    },
    {
      question: "What's the refund policy?",
      answer:
        'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
    },
    {
      question: 'Is there parking available?',
      answer:
        'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
    },
    {
      question: 'What should I bring with me?',
      answer:
        'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
    },
    {
      question: 'Are there age restrictions for this event?',
      answer:
        'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
    },
  ],
})

// Form validation
const validation = reactive({
  title: { valid: true, message: '' },
  description: { valid: true, message: '' },
  category: { valid: true, message: '' },
  subCategories: { valid: true, message: '' },
  date: { valid: true, message: '' },
  time: { valid: true, message: '' },
  location: { valid: true, message: '' },
  price: { valid: true, message: '' },
  totalTickets: { valid: true, message: '' },
  organizer: { valid: true, message: '' },
  ticketTypes: { valid: true, message: '' },
  mainImage: { valid: true, message: '' },
  bannerImage: { valid: true, message: '' },
})

// Fetch categories on mount
onMounted(async () => {
  try {
    // This will be replaced with API call later
    const eventService = (await import('@/services/eventService')).default
    categories.value = await eventService.getAllCategories()

    // Get sub-categories or initialize with mock data if the service doesn't provide them
    try {
      availableSubCategories.value = await eventService.getAllSubCategories()
    } catch {
      // If the service doesn't have getAllSubCategories method yet, use mock data
      availableSubCategories.value = [
        { id: 'sub1', name: 'Workshop' },
        { id: 'sub2', name: 'Conference' },
        { id: 'sub3', name: 'Meetup' },
        { id: 'sub4', name: 'Webinar' },
        { id: 'sub5', name: 'Party' },
        { id: 'sub6', name: 'Exhibition' },
        { id: 'sub7', name: 'Concert' },
        { id: 'sub8', name: 'Sport Event' },
      ]
    }
  } catch (err) {
    error.value = 'Failed to load categories'
    console.error('Error loading categories:', err)
  }
})

// Add ticket type
const addTicketType = () => {
  form.ticketTypes.push({
    name: '',
    price: 0,
    quantity: 50,
    description: '',
    salesEndDate: '',
    salesEndTime: '23:59',
    isFeatured: false,
  })
}

// Remove ticket type
const removeTicketType = (index) => {
  form.ticketTypes.splice(index, 1)
}

// Duplicate ticket type
const duplicateTicketType = (index) => {
  const ticketToDuplicate = { ...form.ticketTypes[index] }
  ticketToDuplicate.name = `${ticketToDuplicate.name} (Copy)`
  form.ticketTypes.splice(index + 1, 0, ticketToDuplicate)
}

// Available ticket type templates
const ticketTemplates = [
  { name: 'Standard', description: 'Regular entry ticket for most guests', isFeatured: false },
  { name: 'Early Bird', description: 'Limited time offer at a discounted price', isFeatured: true },
  { name: 'VIP', description: 'Premium experience with exclusive benefits', isFeatured: true },
  { name: 'Table for 4', description: 'Reserved table seating for 4 guests' },
  { name: 'Table for 8', description: 'Reserved table seating for 8 guests' },
  { name: 'Table for 12', description: 'Reserved table seating for a large group of 12' },
  {
    name: 'Gold',
    description: 'Elite experience with exclusive perks and priority service',
    isFeatured: true,
  },
  { name: 'Student', description: 'Discounted ticket with valid student ID' },
  { name: 'Group (5+)', description: 'Discounted rate for groups of 5 or more' },
]

// Apply template to ticket
const applyTemplate = (index, template) => {
  form.ticketTypes[index].name = template.name
  form.ticketTypes[index].description = template.description
  if (template.isFeatured) {
    form.ticketTypes[index].isFeatured = true
  }
}

// Calculate total tickets
const calculateTotalTickets = computed(() => {
  return form.ticketTypes.reduce((sum, ticket) => sum + ticket.quantity, 0)
})

// Update total tickets when ticket quantities change
watch(calculateTotalTickets, (newTotal) => {
  form.totalTickets = newTotal
})

// Computed combined date and time
const fullDateTime = computed(() => {
  if (!form.date || !form.time) return null
  const [year, month, day] = form.date.split('-')
  const [hours, minutes] = form.time.split(':')
  return new Date(year, month - 1, day, hours, minutes).toISOString()
})

// Duration options
const durationOptions = [
  '1 hour',
  '2 hours',
  '3 hours',
  '4 hours',
  '5 hours',
  '1 day',
  '2 days',
  '3 days',
  'Multiple days',
]

// Define stronger password regex if using authentication
const sanitizeInput = (input) => {
  if (typeof input !== 'string') return input
  // Basic sanitization - replaces potentially harmful characters
  return input.replace(/[<>&"'`=/]/g, '')
}

// Validate form with enhanced security
const validateForm = () => {
  let isValid = true

  // Title validation with sanitization
  const sanitizedTitle = sanitizeInput(form.title.trim())
  if (!sanitizedTitle) {
    validation.title.valid = false
    validation.title.message = 'Add a name for your event'
    isValid = false
  } else if (sanitizedTitle.length < 5) {
    validation.title.valid = false
    validation.title.message = 'Name needs at least 5 letters'
    isValid = false
  } else if (sanitizedTitle.length > 100) {
    validation.title.valid = false
    validation.title.message = 'Name is too long (100 letters max)'
    isValid = false
  } else {
    validation.title.valid = true
    // Update the form with sanitized value
    form.title = sanitizedTitle
  }

  // Description validation with sanitization
  const sanitizedDescription = sanitizeInput(form.description.trim())
  if (!sanitizedDescription) {
    validation.description.valid = false
    validation.description.message = 'Add a description'
    isValid = false
  } else if (sanitizedDescription.length < 20) {
    validation.description.valid = false
    validation.description.message = 'Write at least 20 letters'
    isValid = false
  } else if (sanitizedDescription.length > 5000) {
    validation.description.valid = false
    validation.description.message = 'Too long! Keep it under 5000 letters'
    isValid = false
  } else {
    validation.description.valid = true
    // Update the form with sanitized value
    form.description = sanitizedDescription
  }

  // Category validation
  if (!form.category) {
    validation.category.valid = false
    validation.category.message = 'Pick a category'
    isValid = false
  } else {
    // Validate category ID exists in valid categories
    const categoryExists = categories.value.some((cat) => cat.id === form.category)
    if (!categoryExists) {
      validation.category.valid = false
      validation.category.message = 'Pick a category from the list'
      isValid = false
    } else {
      validation.category.valid = true
    }
  }

  // Sub-categories validation
  const nonEmptySubCategories = form.subCategories.filter((cat) => cat !== '')
  const uniqueSubCategories = [...new Set(nonEmptySubCategories)]

  if (nonEmptySubCategories.length !== uniqueSubCategories.length) {
    validation.subCategories.valid = false
    validation.subCategories.message = 'You picked the same tag twice'
    isValid = false
  } else {
    // Validate each subcategory ID exists in valid subcategories
    const invalidSubCat = nonEmptySubCategories.some(
      (subCat) => !availableSubCategories.value.some((validSubCat) => validSubCat.id === subCat),
    )

    if (invalidSubCat) {
      validation.subCategories.valid = false
      validation.subCategories.message = 'Pick tags from the list'
      isValid = false
    } else {
      validation.subCategories.valid = true
    }
  }

  // Date validation
  if (!form.date) {
    validation.date.valid = false
    validation.date.message = 'Pick a date'
    isValid = false
  } else {
    // Validate date format and ensure it's not in the past
    const selectedDate = new Date(form.date)
    const currentDate = new Date()
    currentDate.setHours(0, 0, 0, 0)

    if (isNaN(selectedDate.getTime())) {
      validation.date.valid = false
      validation.date.message = "This date won't work"
      isValid = false
    } else if (selectedDate < currentDate) {
      validation.date.valid = false
      validation.date.message = 'Pick a date in the future'
      isValid = false
    } else {
      validation.date.valid = true
    }
  }

  // Time validation
  if (!form.time) {
    validation.time.valid = false
    validation.time.message = 'Add a start time'
    isValid = false
  } else {
    // Validate time format (HH:MM)
    const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/
    if (!timeRegex.test(form.time)) {
      validation.time.valid = false
      validation.time.message = 'Use hours:minutes format'
      isValid = false
    } else {
      validation.time.valid = true
    }
  }

  // Location validation with sanitization
  const sanitizedLocation = sanitizeInput(form.location.trim())
  if (!sanitizedLocation) {
    validation.location.valid = false
    validation.location.message = 'Add a location'
    isValid = false
  } else if (sanitizedLocation.length < 5) {
    validation.location.valid = false
    validation.location.message = 'Write a longer address'
    isValid = false
  } else {
    validation.location.valid = true
    // Update the form with sanitized value
    form.location = sanitizedLocation
  }

  // Price validation
  if (isNaN(form.price) || form.price === '') {
    validation.price.valid = false
    validation.price.message = 'Price must be a number'
    isValid = false
  } else {
    const price = parseFloat(form.price)
    if (price < 0) {
      validation.price.valid = false
      validation.price.message = "Price can't be negative"
      isValid = false
    } else if (price > 100000) {
      validation.price.valid = false
      validation.price.message = 'Price too high (max $100,000)'
      isValid = false
    } else {
      validation.price.valid = true
      // Ensure price is stored as a number with 2 decimal places
      form.price = parseFloat(price.toFixed(2))
    }
  }

  // Tickets validation
  if (isNaN(form.totalTickets) || form.totalTickets === '') {
    validation.totalTickets.valid = false
    validation.totalTickets.message = 'How many tickets?'
    isValid = false
  } else {
    const tickets = parseInt(form.totalTickets)
    if (tickets <= 0) {
      validation.totalTickets.valid = false
      validation.totalTickets.message = 'You need at least 1 ticket'
      isValid = false
    } else if (tickets > 100000) {
      validation.totalTickets.valid = false
      validation.totalTickets.message = 'Too many tickets (max 100,000)'
      isValid = false
    } else {
      validation.totalTickets.valid = true
      // Ensure tickets is stored as an integer
      form.totalTickets = tickets
    }
  }

  // Organizer validation with sanitization
  const sanitizedOrganizer = sanitizeInput(form.organizer.trim())
  if (!sanitizedOrganizer) {
    validation.organizer.valid = false
    validation.organizer.message = 'Add your name or group name'
    isValid = false
  } else {
    validation.organizer.valid = true
    // Update the form with sanitized value
    form.organizer = sanitizedOrganizer
  }

  // Ticket types validation
  if (form.ticketTypes.length === 0) {
    validation.ticketTypes.valid = false
    validation.ticketTypes.message = 'Add at least one ticket type'
    isValid = false
  } else {
    let ticketTypeValid = true
    form.ticketTypes.forEach((ticket, index) => {
      const sanitizedName = sanitizeInput(ticket.name.trim())
      if (!sanitizedName) {
        validation.ticketTypes.valid = false
        validation.ticketTypes.message = `Ticket #${index + 1} needs a name`
        ticketTypeValid = false
        isValid = false
      }

      if (ticket.quantity <= 0) {
        validation.ticketTypes.valid = false
        validation.ticketTypes.message = `Ticket #${index + 1} needs at least 1`
        ticketTypeValid = false
        isValid = false
      }

      if (ticket.salesEndDate) {
        const endDate = new Date(ticket.salesEndDate)
        const eventDate = new Date(form.date)

        if (isNaN(endDate.getTime())) {
          validation.ticketTypes.valid = false
          validation.ticketTypes.message = `Ticket #${index + 1} has a bad date`
          ticketTypeValid = false
          isValid = false
        } else if (endDate > eventDate) {
          validation.ticketTypes.valid = false
          validation.ticketTypes.message = `Ticket #${index + 1} must stop selling before event starts`
          ticketTypeValid = false
          isValid = false
        }
      }
    })

    if (ticketTypeValid) {
      validation.ticketTypes.valid = true
    }
  }

  // Main image validation
  if (!form.mainImage) {
    validation.mainImage.valid = false
    validation.mainImage.message = 'Upload a main image'
    isValid = false
  }

  // Banner image validation
  if (!form.bannerImage) {
    validation.bannerImage.valid = false
    validation.bannerImage.message = 'Upload a banner image'
    isValid = false
  }

  return isValid
}

// Handle form submission
const handleSubmit = async () => {
  if (!validateForm()) {
    // Scroll to first error
    const firstError = Object.keys(validation).find((key) => !validation[key].valid)
    if (firstError) {
      const element = document.getElementById(firstError)
      if (element) element.scrollIntoView({ behavior: 'smooth', block: 'center' })
    }
    return
  }

  isSubmitting.value = true
  error.value = null

  try {
    // Filter out empty sub-categories and combine with custom subcategories
    const validSubCategories = [
      ...form.subCategories.filter((cat) => cat !== ''),
      ...customSubCategories.value,
    ]

    // Process ticket types
    const processedTickets = form.ticketTypes.map((ticket) => ({
      ...ticket,
      price: parseFloat(ticket.price),
      quantity: parseInt(ticket.quantity),
      name: sanitizeInput(ticket.name.trim()),
      description: sanitizeInput(ticket.description.trim()),
    }))

    // Process images - convert File objects to data URLs
    let mainImageUrl = mainImagePreview.value
    let bannerImageUrl = bannerImagePreview.value

    // Get the selected event options
    const selectedEventOptions = [...form.selectedEventOptions, ...form.customEventOptions].filter(
      Boolean,
    ) // Remove any falsy values

    // Prepare the event data
    const eventData = {
      title: form.title,
      description: form.description,
      category: form.category,
      subCategories: validSubCategories,
      date: fullDateTime.value,
      location: form.location,
      price: parseFloat(form.price),
      totalTickets: parseInt(form.totalTickets),
      organizer: form.organizer,
      duration: form.duration,
      featured: form.featured,
      imageIndex: form.imageIndex,
      mainImage: mainImageUrl,
      bannerImage: bannerImageUrl,
      eventOptions: selectedEventOptions, // Add event options to the event data
      selectedEventOptions: form.selectedEventOptions, // Store the original selected options
      customEventOptions: form.customEventOptions, // Store the custom options
      ticketTypes: processedTickets,
      faqs: form.faqs.filter((faq) => faq.question.trim() && faq.answer.trim()), // Only include FAQs with content
    }

    // Create the event
    const newEvent = await eventStore.createEvent(eventData)

    success.value = true

    // Redirect to the event page after a brief delay
    setTimeout(() => {
      router.push({ path: `/event/${newEvent.id}` })
    }, 2000)
  } catch (err) {
    error.value = err.message || 'Failed to create event'
    window.scrollTo({ top: 0, behavior: 'smooth' })
  } finally {
    isSubmitting.value = false
  }
}

// Reset form
const resetForm = () => {
  Object.keys(form).forEach((key) => {
    if (key === 'price') {
      form[key] = 0
    } else if (key === 'totalTickets') {
      form[key] = 100
    } else if (key === 'featured') {
      form[key] = false
    } else if (key === 'imageIndex') {
      form[key] = Math.floor(Math.random() * 4)
    } else if (key === 'time') {
      form[key] = '19:00'
    } else if (key === 'subCategories') {
      form[key] = []
    } else if (key === 'ticketTypes') {
      form[key] = [
        {
          name: 'General Admission',
          price: 0,
          quantity: 100,
          description: '',
          salesEndDate: '',
          salesEndTime: '23:59',
          isFeatured: false,
        },
      ]
    } else {
      form[key] = ''
    }
  })

  Object.keys(validation).forEach((key) => {
    validation[key].valid = true
    validation[key].message = ''
  })

  error.value = null
  success.value = false

  // Also reset custom subcategories
  customSubCategories.value = []

  // Reset custom event options
  form.customEventOptions = []

  // Reset event options to defaults
  form.selectedEventOptions = ['Live performance', 'Food & drinks available', 'Indoor event']

  // Reset FAQs to defaults
  form.faqs = [
    {
      question: "What's included in the ticket price?",
      answer:
        'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
    },
    {
      question: "What's the refund policy?",
      answer:
        'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
    },
    {
      question: 'Is there parking available?',
      answer:
        'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
    },
    {
      question: 'What should I bring with me?',
      answer:
        'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
    },
    {
      question: 'Are there age restrictions for this event?',
      answer:
        'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
    },
  ]
}

// Set min date to today for date picker
// const today = new Date().toISOString().split('T')[0]

// Open template modal for a specific ticket
const openTemplateModal = (index) => {
  activeTicketIndex.value = index
  showTemplateModal.value = true
  document.body.style.overflow = 'hidden' // Prevent background scrolling
}

// Close template modal
const closeTemplateModal = () => {
  showTemplateModal.value = false
  document.body.style.overflow = '' // Re-enable scrolling
}

// Apply template from modal and close the modal
const applyTemplateFromModal = (index, template) => {
  applyTemplate(index, template)
  closeTemplateModal()
}

// Add FAQ
const addFaq = () => {
  form.faqs.push({
    question: '',
    answer: '',
  })
}

// Remove FAQ
const removeFaq = (index) => {
  form.faqs.splice(index, 1)
}

// Handle main image upload
const handleMainImageUpload = (event) => {
  let file

  // Check if it's a drop event
  if (event.dataTransfer) {
    file = event.dataTransfer.files[0]
  } else if (event.target.files) {
    file = event.target.files[0]
  }

  if (file) {
    form.mainImage = file
    validation.mainImage.valid = true

    // Create a preview URL
    const reader = new FileReader()
    reader.onload = (e) => {
      mainImagePreview.value = e.target.result
    }
    reader.readAsDataURL(file)
  }
}

// Handle banner image upload
const handleBannerImageUpload = (event) => {
  let file

  // Check if it's a drop event
  if (event.dataTransfer) {
    file = event.dataTransfer.files[0]
  } else if (event.target.files) {
    file = event.target.files[0]
  }

  if (file) {
    form.bannerImage = file
    validation.bannerImage.valid = true

    // Create a preview URL
    const reader = new FileReader()
    reader.onload = (e) => {
      bannerImagePreview.value = e.target.result
    }
    reader.readAsDataURL(file)
  }
}

// Remove main image - could be added to the UI if needed
const removeMainImage = () => {
  form.mainImage = null
  mainImagePreview.value = null
  validation.mainImage.valid = false
  validation.mainImage.message = 'Please upload a main image'
}

// Remove banner image - could be added to the UI if needed
const removeBannerImage = () => {
  form.bannerImage = null
  bannerImagePreview.value = null
  validation.bannerImage.valid = false
  validation.bannerImage.message = 'Please upload a banner image'
}

// Trigger main image upload
const triggerMainImageUpload = () => {
  const input = document.getElementById('mainImage')
  input.click()
}

// Trigger banner image upload
const triggerBannerImageUpload = () => {
  const input = document.getElementById('bannerImage')
  input.click()
}

// Add custom subcategory
const addCustomSubCategory = () => {
  const trimmed = newCustomSubCategory.value.trim()
  if (
    trimmed &&
    customSubCategories.value.length < 5 &&
    !customSubCategories.value.includes(trimmed)
  ) {
    customSubCategories.value.push(trimmed)
    newCustomSubCategory.value = ''
  }
}

// Remove custom subcategory
const removeCustomSubCategory = (index) => {
  customSubCategories.value.splice(index, 1)
}

// Get all displayed subcategories (selected + custom)
const displayedSubCategories = computed(() => {
  return [...form.subCategories, ...customSubCategories.value]
})

// Get subcategory name by id
const getSubCategoryName = (subCatId) => {
  // If it's a predefined subcategory
  if (typeof subCatId === 'string' && subCatId.startsWith('sub')) {
    const subCat = availableSubCategories.value.find((sc) => sc.id === subCatId)
    return subCat ? subCat.name : subCatId
  }
  // If it's a custom subcategory
  return subCatId
}

// Filter subcategories based on search term
const filteredSubCategories = computed(() => {
  if (!subCategorySearchTerm.value) return availableSubCategories.value

  const searchTerm = subCategorySearchTerm.value.toLowerCase()
  return availableSubCategories.value.filter((sc) => sc.name.toLowerCase().includes(searchTerm))
})

// Count selected subcategories
const selectedSubCategoriesCount = computed(() => {
  return tempSelectedSubCategories.value.length + customSubCategories.value.length
})

// Remove a subcategory from the form
const removeSubCategoryById = (subCat) => {
  if (typeof subCat === 'string' && subCat.startsWith('sub')) {
    // If it's a predefined subcategory
    form.subCategories = form.subCategories.filter((sc) => sc !== subCat)
  } else {
    // If it's a custom subcategory
    customSubCategories.value = customSubCategories.value.filter((sc) => sc !== subCat)
  }
}

// Toggle subcategory selection
const toggleSubCategory = (id) => {
  if (isSubCategorySelected(id)) {
    tempSelectedSubCategories.value = tempSelectedSubCategories.value.filter(
      (subCatId) => subCatId !== id,
    )
  } else {
    if (selectedSubCategoriesCount.value < 5) {
      tempSelectedSubCategories.value.push(id)
    }
  }
}

// Check if subcategory is selected
const isSubCategorySelected = (id) => {
  return tempSelectedSubCategories.value.includes(id)
}

// Open subcategory modal
const openSubCategoryModal = () => {
  if (form.category === '') {
    validation.category.valid = false
    validation.category.message = 'Select a category first'
    // Focus category dropdown
    const categoryElement = document.getElementById('category')
    if (categoryElement) categoryElement.focus()
    return
  }

  // Initialize the temp selection with current selection
  tempSelectedSubCategories.value = [...form.subCategories]
  showSubCategoryModal.value = true
  document.body.style.overflow = 'hidden' // Prevent background scrolling
}

// Close subcategory modal
const closeSubCategoryModal = () => {
  showSubCategoryModal.value = false
  document.body.style.overflow = '' // Re-enable scrolling
  subCategorySearchTerm.value = ''
  newCustomSubCategory.value = ''
}

// Confirm subcategory selections
const confirmSubCategories = () => {
  form.subCategories = [...tempSelectedSubCategories.value]
  closeSubCategoryModal()
}

// Handle main image drop
const handleMainImageDrop = (event) => {
  event.preventDefault()
  handleMainImageUpload(event)
}

// Handle banner image drop
const handleBannerImageDrop = (event) => {
  event.preventDefault()
  handleBannerImageUpload(event)
}

// Add custom event option
const addCustomEventOption = () => {
  const trimmed = newCustomEventOption.value.trim()
  if (trimmed && form.customEventOptions.length < 5 && !form.customEventOptions.includes(trimmed)) {
    form.customEventOptions.push(trimmed)
    newCustomEventOption.value = ''
  }
}

// Remove custom event option
const removeCustomEventOption = (index) => {
  form.customEventOptions.splice(index, 1)
}

// Toggle event option
const toggleEventOption = (option) => {
  if (form.selectedEventOptions.includes(option)) {
    form.selectedEventOptions = form.selectedEventOptions.filter((opt) => opt !== option)
  } else {
    // Allow selecting more options - remove limit
    form.selectedEventOptions.push(option)
  }
}

// Check if event option is selected
const isEventOptionSelected = (option) => {
  return form.selectedEventOptions.includes(option)
}

// Predefined event options
const predefinedEventOptions = [
  'Live performance',
  'Food & drinks available',
  'Indoor event',
  'Outdoor event',
  'Accessible venue',
  'Family friendly',
  'Free parking',
  'VIP access',
  'Professional networking',
  'Photo opportunities',
  'Live streaming',
  'Q&A session',
  'Merchandise available',
  'Meet & greet',
  'Seating provided',
]

const showDateTip = ref(false)
const showTimeTip = ref(false)

// Time picker variables
const isTimePickerOpen = ref(false)
const selectedTime = ref('07:00')
const selectedPeriod = ref('AM')

const timeOptions = [
  '01:00',
  '01:30',
  '02:00',
  '02:30',
  '03:00',
  '03:30',
  '04:00',
  '04:30',
  '05:00',
  '05:30',
  '06:00',
  '06:30',
  '07:00',
  '07:30',
  '08:00',
  '08:30',
  '09:00',
  '09:30',
  '10:00',
  '10:30',
  '11:00',
  '11:30',
  '12:00',
  '12:30',
]

const openTimePicker = () => {
  // If there's already a time, parse it to 12-hour format for the picker
  if (form.time) {
    const [hours, minutes] = form.time.split(':')
    const hour = parseInt(hours)

    if (hour > 12) {
      // Convert from 24-hour to 12-hour format for PM
      selectedTime.value = `${(hour - 12).toString().padStart(2, '0')}:${minutes}`
      selectedPeriod.value = 'PM'
    } else if (hour === 12) {
      // 12 PM
      selectedTime.value = `12:${minutes}`
      selectedPeriod.value = 'PM'
    } else if (hour === 0) {
      // 12 AM
      selectedTime.value = `12:${minutes}`
      selectedPeriod.value = 'AM'
    } else {
      // Regular AM hours
      selectedTime.value = `${hour.toString().padStart(2, '0')}:${minutes}`
      selectedPeriod.value = 'AM'
    }
  } else {
    // Default to 7:00 AM if no time selected
    selectedTime.value = '07:00'
    selectedPeriod.value = 'AM'
  }

  isTimePickerOpen.value = true
}

const closeTimePicker = () => {
  isTimePickerOpen.value = false
}

const selectTime = (time) => {
  selectedTime.value = time
}

const selectPeriod = (period) => {
  selectedPeriod.value = period
}

const applyTimeSelection = () => {
  // Convert to 24-hour format if PM is selected
  if (selectedPeriod.value === 'PM') {
    const [hours, minutes] = selectedTime.value.split(':')
    const hour = parseInt(hours)

    // Only adjust hours that aren't already in PM format (12 PM stays as 12)
    const adjustedHour = hour === 12 ? 12 : hour + 12
    form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
  } else {
    // For AM, make sure 12 AM becomes 00:00
    const [hours, minutes] = selectedTime.value.split(':')
    const hour = parseInt(hours)
    const adjustedHour = hour === 12 ? 0 : hour
    form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
  }

  closeTimePicker()
}

// Date picker variables
const isDatePickerOpen = ref(false)
const currentYear = ref(new Date().getFullYear())
const currentMonth = ref(new Date().getMonth())
const selectedDate = ref(new Date())
const tempSelectedDate = ref(null)

// Custom time input variables
const customHours = ref('07')
const customMinutes = ref('00')

// Define weekdays and month names for the calendar
const weekdays = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
const monthNames = [
  'January',
  'February',
  'March',
  'April',
  'May',
  'June',
  'July',
  'August',
  'September',
  'October',
  'November',
  'December',
]

// Format time inputs when focus is lost
const formatTimeInputs = () => {
  // Validate and format hours
  let formattedHours = parseInt(customHours.value) || 1
  if (formattedHours < 1) formattedHours = 1
  if (formattedHours > 12) formattedHours = 12

  // Validate and format minutes
  let formattedMinutes = parseInt(customMinutes.value) || 0
  if (formattedMinutes < 0) formattedMinutes = 0
  if (formattedMinutes > 59) formattedMinutes = 59

  // Update the ref values with formatted strings
  customHours.value = formattedHours.toString().padStart(2, '0')
  customMinutes.value = formattedMinutes.toString().padStart(2, '0')

  // Update selectedTime with formatted values
  selectedTime.value = `${formattedHours.toString().padStart(2, '0')}:${formattedMinutes.toString().padStart(2, '0')}`
}

// Function to prefill the form with test data
const prefillForm = () => {
  // Generate a random event title to avoid duplicates
  const eventTypes = [
    'Workshop',
    'Conference',
    'Meetup',
    'Concert',
    'Festival',
    'Webinar',
    'Hackathon',
  ]
}


import { ref, computed, reactive, watch, onMounted } from 'vue'
import { useRouter } from 'vue-router'
import { useEventStore } from '@/stores/events'

// Initialize references
const router = useRouter()
const eventStore = useEventStore()
const error = ref(null)
const success = ref(false)
const isSubmitting = ref(false)
const today = ref(new Date().toISOString().split('T')[0]) // Today's date in YYYY-MM-DD format
const showTemplateModal = ref(false)
const activeTicketIndex = ref(0)
const showSubCategoryModal = ref(false)
const tempSelectedSubCategories = ref([]) // Temporary storage for selected subcategories in modal
const subCategorySearchTerm = ref('')
const customSubCategories = ref([])
const newCustomSubCategory = ref('')
const categories = ref([])
const availableSubCategories = ref([])
const mainImagePreview = ref(null)
const bannerImagePreview = ref(null)
const newCustomEventOption = ref('')

// Also initialize form with image fields
const form = reactive({
  title: '',
  description: '',
  category: '',
  subCategories: [],
  date: '',
  time: '19:00',
  location: '',
  price: 0,
  totalTickets: 100,
  organizer: '',
  duration: '',
  featured: false,
  imageIndex: Math.floor(Math.random() * 4), // Random image from available set
  mainImage: null,
  bannerImage: null,
  selectedEventOptions: [], // Start with no options selected
  customEventOptions: [], // For user-added custom options
  ticketTypes: [
    {
      name: 'General Admission',
      price: 0,
      quantity: 100,
      description: '',
      salesEndDate: '',
      salesEndTime: '23:59',
      isFeatured: false,
    },
  ],
  // Add FAQs to the form data
  faqs: [
    {
      question: "What's included in the ticket price?",
      answer:
        'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
    },
    {
      question: "What's the refund policy?",
      answer:
        'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
    },
    {
      question: 'Is there parking available?',
      answer:
        'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
    },
    {
      question: 'What should I bring with me?',
      answer:
        'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
    },
    {
      question: 'Are there age restrictions for this event?',
      answer:
        'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
    },
  ],
})

// Form validation
const validation = reactive({
  title: { valid: true, message: '' },
  description: { valid: true, message: '' },
  category: { valid: true, message: '' },
  subCategories: { valid: true, message: '' },
  date: { valid: true, message: '' },
  time: { valid: true, message: '' },
  location: { valid: true, message: '' },
  price: { valid: true, message: '' },
  totalTickets: { valid: true, message: '' },
  organizer: { valid: true, message: '' },
  ticketTypes: { valid: true, message: '' },
  mainImage: { valid: true, message: '' },
  bannerImage: { valid: true, message: '' },
})

// Fetch categories on mount
onMounted(async () => {
  try {
    // This will be replaced with API call later
    const eventService = (await import('@/services/eventService')).default
    categories.value = await eventService.getAllCategories()

    // Get sub-categories or initialize with mock data if the service doesn't provide them
    try {
      availableSubCategories.value = await eventService.getAllSubCategories()
    } catch {
      // If the service doesn't have getAllSubCategories method yet, use mock data
      availableSubCategories.value = [
        { id: 'sub1', name: 'Workshop' },
        { id: 'sub2', name: 'Conference' },
        { id: 'sub3', name: 'Meetup' },
        { id: 'sub4', name: 'Webinar' },
        { id: 'sub5', name: 'Party' },
        { id: 'sub6', name: 'Exhibition' },
        { id: 'sub7', name: 'Concert' },
        { id: 'sub8', name: 'Sport Event' },
      ]
    }
  } catch (err) {
    error.value = 'Failed to load categories'
    console.error('Error loading categories:', err)
  }
})

// Add ticket type
const addTicketType = () => {
  form.ticketTypes.push({
    name: '',
    price: 0,
    quantity: 50,
    description: '',
    salesEndDate: '',
    salesEndTime: '23:59',
    isFeatured: false,
  })
}

// Remove ticket type
const removeTicketType = (index) => {
  form.ticketTypes.splice(index, 1)
}

// Duplicate ticket type
const duplicateTicketType = (index) => {
  const ticketToDuplicate = { ...form.ticketTypes[index] }
  ticketToDuplicate.name = `${ticketToDuplicate.name} (Copy)`
  form.ticketTypes.splice(index + 1, 0, ticketToDuplicate)
}

// Available ticket type templates
const ticketTemplates = [
  { name: 'Standard', description: 'Regular entry ticket for most guests', isFeatured: false },
  { name: 'Early Bird', description: 'Limited time offer at a discounted price', isFeatured: true },
  { name: 'VIP', description: 'Premium experience with exclusive benefits', isFeatured: true },
  { name: 'Table for 4', description: 'Reserved table seating for 4 guests' },
  { name: 'Table for 8', description: 'Reserved table seating for 8 guests' },
  { name: 'Table for 12', description: 'Reserved table seating for a large group of 12' },
  {
    name: 'Gold',
    description: 'Elite experience with exclusive perks and priority service',
    isFeatured: true,
  },
  { name: 'Student', description: 'Discounted ticket with valid student ID' },
  { name: 'Group (5+)', description: 'Discounted rate for groups of 5 or more' },
]

// Apply template to ticket
const applyTemplate = (index, template) => {
  form.ticketTypes[index].name = template.name
  form.ticketTypes[index].description = template.description
  if (template.isFeatured) {
    form.ticketTypes[index].isFeatured = true
  }
}

// Calculate total tickets
const calculateTotalTickets = computed(() => {
  return form.ticketTypes.reduce((sum, ticket) => sum + ticket.quantity, 0)
})

// Update total tickets when ticket quantities change
watch(calculateTotalTickets, (newTotal) => {
  form.totalTickets = newTotal
})

// Computed combined date and time
const fullDateTime = computed(() => {
  if (!form.date || !form.time) return null
  const [year, month, day] = form.date.split('-')
  const [hours, minutes] = form.time.split(':')
  return new Date(year, month - 1, day, hours, minutes).toISOString()
})

// Duration options
const durationOptions = [
  '1 hour',
  '2 hours',
  '3 hours',
  '4 hours',
  '5 hours',
  '1 day',
  '2 days',
  '3 days',
  'Multiple days',
]

// Define stronger password regex if using authentication
const sanitizeInput = (input) => {
  if (typeof input !== 'string') return input
  // Basic sanitization - replaces potentially harmful characters
  return input.replace(/[<>&"'`=/]/g, '')
}

// Validate form with enhanced security
const validateForm = () => {
  let isValid = true

  // Title validation with sanitization
  const sanitizedTitle = sanitizeInput(form.title.trim())
  if (!sanitizedTitle) {
    validation.title.valid = false
    validation.title.message = 'Add a name for your event'
    isValid = false
  } else if (sanitizedTitle.length < 5) {
    validation.title.valid = false
    validation.title.message = 'Name needs at least 5 letters'
    isValid = false
  } else if (sanitizedTitle.length > 100) {
    validation.title.valid = false
    validation.title.message = 'Name is too long (100 letters max)'
    isValid = false
  } else {
    validation.title.valid = true
    // Update the form with sanitized value
    form.title = sanitizedTitle
  }

  // Description validation with sanitization
  const sanitizedDescription = sanitizeInput(form.description.trim())
  if (!sanitizedDescription) {
    validation.description.valid = false
    validation.description.message = 'Add a description'
    isValid = false
  } else if (sanitizedDescription.length < 20) {
    validation.description.valid = false
    validation.description.message = 'Write at least 20 letters'
    isValid = false
  } else if (sanitizedDescription.length > 5000) {
    validation.description.valid = false
    validation.description.message = 'Too long! Keep it under 5000 letters'
    isValid = false
  } else {
    validation.description.valid = true
    // Update the form with sanitized value
    form.description = sanitizedDescription
  }

  // Category validation
  if (!form.category) {
    validation.category.valid = false
    validation.category.message = 'Pick a category'
    isValid = false
  } else {
    // Validate category ID exists in valid categories
    const categoryExists = categories.value.some((cat) => cat.id === form.category)
    if (!categoryExists) {
      validation.category.valid = false
      validation.category.message = 'Pick a category from the list'
      isValid = false
    } else {
      validation.category.valid = true
    }
  }

  // Sub-categories validation
  const nonEmptySubCategories = form.subCategories.filter((cat) => cat !== '')
  const uniqueSubCategories = [...new Set(nonEmptySubCategories)]

  if (nonEmptySubCategories.length !== uniqueSubCategories.length) {
    validation.subCategories.valid = false
    validation.subCategories.message = 'You picked the same tag twice'
    isValid = false
  } else {
    // Validate each subcategory ID exists in valid subcategories
    const invalidSubCat = nonEmptySubCategories.some(
      (subCat) => !availableSubCategories.value.some((validSubCat) => validSubCat.id === subCat),
    )

    if (invalidSubCat) {
      validation.subCategories.valid = false
      validation.subCategories.message = 'Pick tags from the list'
      isValid = false
    } else {
      validation.subCategories.valid = true
    }
  }

  // Date validation
  if (!form.date) {
    validation.date.valid = false
    validation.date.message = 'Pick a date'
    isValid = false
  } else {
    // Validate date format and ensure it's not in the past
    const selectedDate = new Date(form.date)
    const currentDate = new Date()
    currentDate.setHours(0, 0, 0, 0)

    if (isNaN(selectedDate.getTime())) {
      validation.date.valid = false
      validation.date.message = "This date won't work"
      isValid = false
    } else if (selectedDate < currentDate) {
      validation.date.valid = false
      validation.date.message = 'Pick a date in the future'
      isValid = false
    } else {
      validation.date.valid = true
    }
  }

  // Time validation
  if (!form.time) {
    validation.time.valid = false
    validation.time.message = 'Add a start time'
    isValid = false
  } else {
    // Validate time format (HH:MM)
    const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/
    if (!timeRegex.test(form.time)) {
      validation.time.valid = false
      validation.time.message = 'Use hours:minutes format'
      isValid = false
    } else {
      validation.time.valid = true
    }
  }

  // Location validation with sanitization
  const sanitizedLocation = sanitizeInput(form.location.trim())
  if (!sanitizedLocation) {
    validation.location.valid = false
    validation.location.message = 'Add a location'
    isValid = false
  } else if (sanitizedLocation.length < 5) {
    validation.location.valid = false
    validation.location.message = 'Write a longer address'
    isValid = false
  } else {
    validation.location.valid = true
    // Update the form with sanitized value
    form.location = sanitizedLocation
  }

  // Price validation
  if (isNaN(form.price) || form.price === '') {
    validation.price.valid = false
    validation.price.message = 'Price must be a number'
    isValid = false
  } else {
    const price = parseFloat(form.price)
    if (price < 0) {
      validation.price.valid = false
      validation.price.message = "Price can't be negative"
      isValid = false
    } else if (price > 100000) {
      validation.price.valid = false
      validation.price.message = 'Price too high (max $100,000)'
      isValid = false
    } else {
      validation.price.valid = true
      // Ensure price is stored as a number with 2 decimal places
      form.price = parseFloat(price.toFixed(2))
    }
  }

  // Tickets validation
  if (isNaN(form.totalTickets) || form.totalTickets === '') {
    validation.totalTickets.valid = false
    validation.totalTickets.message = 'How many tickets?'
    isValid = false
  } else {
    const tickets = parseInt(form.totalTickets)
    if (tickets <= 0) {
      validation.totalTickets.valid = false
      validation.totalTickets.message = 'You need at least 1 ticket'
      isValid = false
    } else if (tickets > 100000) {
      validation.totalTickets.valid = false
      validation.totalTickets.message = 'Too many tickets (max 100,000)'
      isValid = false
    } else {
      validation.totalTickets.valid = true
      // Ensure tickets is stored as an integer
      form.totalTickets = tickets
    }
  }

  // Organizer validation with sanitization
  const sanitizedOrganizer = sanitizeInput(form.organizer.trim())
  if (!sanitizedOrganizer) {
    validation.organizer.valid = false
    validation.organizer.message = 'Add your name or group name'
    isValid = false
  } else {
    validation.organizer.valid = true
    // Update the form with sanitized value
    form.organizer = sanitizedOrganizer
  }

  // Ticket types validation
  if (form.ticketTypes.length === 0) {
    validation.ticketTypes.valid = false
    validation.ticketTypes.message = 'Add at least one ticket type'
    isValid = false
  } else {
    let ticketTypeValid = true
    form.ticketTypes.forEach((ticket, index) => {
      const sanitizedName = sanitizeInput(ticket.name.trim())
      if (!sanitizedName) {
        validation.ticketTypes.valid = false
        validation.ticketTypes.message = `Ticket #${index + 1} needs a name`
        ticketTypeValid = false
        isValid = false
      }

      if (ticket.quantity <= 0) {
        validation.ticketTypes.valid = false
        validation.ticketTypes.message = `Ticket #${index + 1} needs at least 1`
        ticketTypeValid = false
        isValid = false
      }

      if (ticket.salesEndDate) {
        const endDate = new Date(ticket.salesEndDate)
        const eventDate = new Date(form.date)

        if (isNaN(endDate.getTime())) {
          validation.ticketTypes.valid = false
          validation.ticketTypes.message = `Ticket #${index + 1} has a bad date`
          ticketTypeValid = false
          isValid = false
        } else if (endDate > eventDate) {
          validation.ticketTypes.valid = false
          validation.ticketTypes.message = `Ticket #${index + 1} must stop selling before event starts`
          ticketTypeValid = false
          isValid = false
        }
      }
    })

    if (ticketTypeValid) {
      validation.ticketTypes.valid = true
    }
  }

  // Main image validation
  if (!form.mainImage) {
    validation.mainImage.valid = false
    validation.mainImage.message = 'Upload a main image'
    isValid = false
  }

  // Banner image validation
  if (!form.bannerImage) {
    validation.bannerImage.valid = false
    validation.bannerImage.message = 'Upload a banner image'
    isValid = false
  }

  return isValid
}

// Handle form submission
const handleSubmit = async () => {
  if (!validateForm()) {
    // Scroll to first error
    const firstError = Object.keys(validation).find((key) => !validation[key].valid)
    if (firstError) {
      const element = document.getElementById(firstError)
      if (element) element.scrollIntoView({ behavior: 'smooth', block: 'center' })
    }
    return
  }

  isSubmitting.value = true
  error.value = null

  try {
    // Filter out empty sub-categories and combine with custom subcategories
    const validSubCategories = [
      ...form.subCategories.filter((cat) => cat !== ''),
      ...customSubCategories.value,
    ]

    // Process ticket types
    const processedTickets = form.ticketTypes.map((ticket) => ({
      ...ticket,
      price: parseFloat(ticket.price),
      quantity: parseInt(ticket.quantity),
      name: sanitizeInput(ticket.name.trim()),
      description: sanitizeInput(ticket.description.trim()),
    }))

    // Process images - convert File objects to data URLs
    let mainImageUrl = mainImagePreview.value
    let bannerImageUrl = bannerImagePreview.value

    // Get the selected event options
    const selectedEventOptions = [...form.selectedEventOptions, ...form.customEventOptions].filter(
      Boolean,
    ) // Remove any falsy values

    // Prepare the event data
    const eventData = {
      title: form.title,
      description: form.description,
      category: form.category,
      subCategories: validSubCategories,
      date: fullDateTime.value,
      location: form.location,
      price: parseFloat(form.price),
      totalTickets: parseInt(form.totalTickets),
      organizer: form.organizer,
      duration: form.duration,
      featured: form.featured,
      imageIndex: form.imageIndex,
      mainImage: mainImageUrl,
      bannerImage: bannerImageUrl,
      eventOptions: selectedEventOptions, // Add event options to the event data
      selectedEventOptions: form.selectedEventOptions, // Store the original selected options
      customEventOptions: form.customEventOptions, // Store the custom options
      ticketTypes: processedTickets,
      faqs: form.faqs.filter((faq) => faq.question.trim() && faq.answer.trim()), // Only include FAQs with content
    }

    // Create the event
    const newEvent = await eventStore.createEvent(eventData)

    success.value = true

    // Redirect to the event page after a brief delay
    setTimeout(() => {
      router.push({ path: `/event/${newEvent.id}` })
    }, 2000)
  } catch (err) {
    error.value = err.message || 'Failed to create event'
    window.scrollTo({ top: 0, behavior: 'smooth' })
  } finally {
    isSubmitting.value = false
  }
}

// Reset form
const resetForm = () => {
  Object.keys(form).forEach((key) => {
    if (key === 'price') {
      form[key] = 0
    } else if (key === 'totalTickets') {
      form[key] = 100
    } else if (key === 'featured') {
      form[key] = false
    } else if (key === 'imageIndex') {
      form[key] = Math.floor(Math.random() * 4)
    } else if (key === 'time') {
      form[key] = '19:00'
    } else if (key === 'subCategories') {
      form[key] = []
    } else if (key === 'ticketTypes') {
      form[key] = [
        {
          name: 'General Admission',
          price: 0,
          quantity: 100,
          description: '',
          salesEndDate: '',
          salesEndTime: '23:59',
          isFeatured: false,
        },
      ]
    } else {
      form[key] = ''
    }
  })

  Object.keys(validation).forEach((key) => {
    validation[key].valid = true
    validation[key].message = ''
  })

  error.value = null
  success.value = false

  // Also reset custom subcategories
  customSubCategories.value = []

  // Reset custom event options
  form.customEventOptions = []

  // Reset event options to defaults
  form.selectedEventOptions = ['Live performance', 'Food & drinks available', 'Indoor event']

  // Reset FAQs to defaults
  form.faqs = [
    {
      question: "What's included in the ticket price?",
      answer:
        'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
    },
    {
      question: "What's the refund policy?",
      answer:
        'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
    },
    {
      question: 'Is there parking available?',
      answer:
        'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
    },
    {
      question: 'What should I bring with me?',
      answer:
        'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
    },
    {
      question: 'Are there age restrictions for this event?',
      answer:
        'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
    },
  ]
}

// Set min date to today for date picker
// const today = new Date().toISOString().split('T')[0]

// Open template modal for a specific ticket
const openTemplateModal = (index) => {
  activeTicketIndex.value = index
  showTemplateModal.value = true
  document.body.style.overflow = 'hidden' // Prevent background scrolling
}

// Close template modal
const closeTemplateModal = () => {
  showTemplateModal.value = false
  document.body.style.overflow = '' // Re-enable scrolling
}

// Apply template from modal and close the modal
const applyTemplateFromModal = (index, template) => {
  applyTemplate(index, template)
  closeTemplateModal()
}

// Add FAQ
const addFaq = () => {
  form.faqs.push({
    question: '',
    answer: '',
  })
}

// Remove FAQ
const removeFaq = (index) => {
  form.faqs.splice(index, 1)
}

// Handle main image upload
const handleMainImageUpload = (event) => {
  let file

  // Check if it's a drop event
  if (event.dataTransfer) {
    file = event.dataTransfer.files[0]
  } else if (event.target.files) {
    file = event.target.files[0]
  }

  if (file) {
    form.mainImage = file
    validation.mainImage.valid = true

    // Create a preview URL
    const reader = new FileReader()
    reader.onload = (e) => {
      mainImagePreview.value = e.target.result
    }
    reader.readAsDataURL(file)
  }
}

// Handle banner image upload
const handleBannerImageUpload = (event) => {
  let file

  // Check if it's a drop event
  if (event.dataTransfer) {
    file = event.dataTransfer.files[0]
  } else if (event.target.files) {
    file = event.target.files[0]
  }

  if (file) {
    form.bannerImage = file
    validation.bannerImage.valid = true

    // Create a preview URL
    const reader = new FileReader()
    reader.onload = (e) => {
      bannerImagePreview.value = e.target.result
    }
    reader.readAsDataURL(file)
  }
}

// Remove main image - could be added to the UI if needed
const removeMainImage = () => {
  form.mainImage = null
  mainImagePreview.value = null
  validation.mainImage.valid = false
  validation.mainImage.message = 'Please upload a main image'
}

// Remove banner image - could be added to the UI if needed
const removeBannerImage = () => {
  form.bannerImage = null
  bannerImagePreview.value = null
  validation.bannerImage.valid = false
  validation.bannerImage.message = 'Please upload a banner image'
}

// Trigger main image upload
const triggerMainImageUpload = () => {
  const input = document.getElementById('mainImage')
  input.click()
}

// Trigger banner image upload
const triggerBannerImageUpload = () => {
  const input = document.getElementById('bannerImage')
  input.click()
}

// Add custom subcategory
const addCustomSubCategory = () => {
  const trimmed = newCustomSubCategory.value.trim()
  if (
    trimmed &&
    customSubCategories.value.length < 5 &&
    !customSubCategories.value.includes(trimmed)
  ) {
    customSubCategories.value.push(trimmed)
    newCustomSubCategory.value = ''
  }
}

// Remove custom subcategory
const removeCustomSubCategory = (index) => {
  customSubCategories.value.splice(index, 1)
}

// Get all displayed subcategories (selected + custom)
const displayedSubCategories = computed(() => {
  return [...form.subCategories, ...customSubCategories.value]
})

// Get subcategory name by id
const getSubCategoryName = (subCatId) => {
  // If it's a predefined subcategory
  if (typeof subCatId === 'string' && subCatId.startsWith('sub')) {
    const subCat = availableSubCategories.value.find((sc) => sc.id === subCatId)
    return subCat ? subCat.name : subCatId
  }
  // If it's a custom subcategory
  return subCatId
}

// Filter subcategories based on search term
const filteredSubCategories = computed(() => {
  if (!subCategorySearchTerm.value) return availableSubCategories.value

  const searchTerm = subCategorySearchTerm.value.toLowerCase()
  return availableSubCategories.value.filter((sc) => sc.name.toLowerCase().includes(searchTerm))
})

// Count selected subcategories
const selectedSubCategoriesCount = computed(() => {
  return tempSelectedSubCategories.value.length + customSubCategories.value.length
})

// Remove a subcategory from the form
const removeSubCategoryById = (subCat) => {
  if (typeof subCat === 'string' && subCat.startsWith('sub')) {
    // If it's a predefined subcategory
    form.subCategories = form.subCategories.filter((sc) => sc !== subCat)
  } else {
    // If it's a custom subcategory
    customSubCategories.value = customSubCategories.value.filter((sc) => sc !== subCat)
  }
}

// Toggle subcategory selection
const toggleSubCategory = (id) => {
  if (isSubCategorySelected(id)) {
    tempSelectedSubCategories.value = tempSelectedSubCategories.value.filter(
      (subCatId) => subCatId !== id,
    )
  } else {
    if (selectedSubCategoriesCount.value < 5) {
      tempSelectedSubCategories.value.push(id)
    }
  }
}

// Check if subcategory is selected
const isSubCategorySelected = (id) => {
  return tempSelectedSubCategories.value.includes(id)
}

// Open subcategory modal
const openSubCategoryModal = () => {
  if (form.category === '') {
    validation.category.valid = false
    validation.category.message = 'Select a category first'
    // Focus category dropdown
    const categoryElement = document.getElementById('category')
    if (categoryElement) categoryElement.focus()
    return
  }

  // Initialize the temp selection with current selection
  tempSelectedSubCategories.value = [...form.subCategories]
  showSubCategoryModal.value = true
  document.body.style.overflow = 'hidden' // Prevent background scrolling
}

// Close subcategory modal
const closeSubCategoryModal = () => {
  showSubCategoryModal.value = false
  document.body.style.overflow = '' // Re-enable scrolling
  subCategorySearchTerm.value = ''
  newCustomSubCategory.value = ''
}

// Confirm subcategory selections
const confirmSubCategories = () => {
  form.subCategories = [...tempSelectedSubCategories.value]
  closeSubCategoryModal()
}

// Handle main image drop
const handleMainImageDrop = (event) => {
  event.preventDefault()
  handleMainImageUpload(event)
}

// Handle banner image drop
const handleBannerImageDrop = (event) => {
  event.preventDefault()
  handleBannerImageUpload(event)
}

// Add custom event option
const addCustomEventOption = () => {
  const trimmed = newCustomEventOption.value.trim()
  if (trimmed && form.customEventOptions.length < 5 && !form.customEventOptions.includes(trimmed)) {
    form.customEventOptions.push(trimmed)
    newCustomEventOption.value = ''
  }
}

// Remove custom event option
const removeCustomEventOption = (index) => {
  form.customEventOptions.splice(index, 1)
}

// Toggle event option
const toggleEventOption = (option) => {
  if (form.selectedEventOptions.includes(option)) {
    form.selectedEventOptions = form.selectedEventOptions.filter((opt) => opt !== option)
  } else {
    // Allow selecting more options - remove limit
    form.selectedEventOptions.push(option)
  }
}

// Check if event option is selected
const isEventOptionSelected = (option) => {
  return form.selectedEventOptions.includes(option)
}

// Predefined event options
const predefinedEventOptions = [
  'Live performance',
  'Food & drinks available',
  'Indoor event',
  'Outdoor event',
  'Accessible venue',
  'Family friendly',
  'Free parking',
  'VIP access',
  'Professional networking',
  'Photo opportunities',
  'Live streaming',
  'Q&A session',
  'Merchandise available',
  'Meet & greet',
  'Seating provided',
]

const showDateTip = ref(false)
const showTimeTip = ref(false)

// Time picker variables
const isTimePickerOpen = ref(false)
const selectedTime = ref('07:00')
const selectedPeriod = ref('AM')

const timeOptions = [
  '01:00',
  '01:30',
  '02:00',
  '02:30',
  '03:00',
  '03:30',
  '04:00',
  '04:30',
  '05:00',
  '05:30',
  '06:00',
  '06:30',
  '07:00',
  '07:30',
  '08:00',
  '08:30',
  '09:00',
  '09:30',
  '10:00',
  '10:30',
  '11:00',
  '11:30',
  '12:00',
  '12:30',
]

const openTimePicker = () => {
  // If there's already a time, parse it to 12-hour format for the picker
  if (form.time) {
    const [hours, minutes] = form.time.split(':')
    const hour = parseInt(hours)

    if (hour > 12) {
      // Convert from 24-hour to 12-hour format for PM
      selectedTime.value = `${(hour - 12).toString().padStart(2, '0')}:${minutes}`
      selectedPeriod.value = 'PM'
    } else if (hour === 12) {
      // 12 PM
      selectedTime.value = `12:${minutes}`
      selectedPeriod.value = 'PM'
    } else if (hour === 0) {
      // 12 AM
      selectedTime.value = `12:${minutes}`
      selectedPeriod.value = 'AM'
    } else {
      // Regular AM hours
      selectedTime.value = `${hour.toString().padStart(2, '0')}:${minutes}`
      selectedPeriod.value = 'AM'
    }
  } else {
    // Default to 7:00 AM if no time selected
    selectedTime.value = '07:00'
    selectedPeriod.value = 'AM'
  }

  isTimePickerOpen.value = true
}

const closeTimePicker = () => {
  isTimePickerOpen.value = false
}

const selectTime = (time) => {
  selectedTime.value = time
}

const selectPeriod = (period) => {
  selectedPeriod.value = period
}

const applyTimeSelection = () => {
  // Convert to 24-hour format if PM is selected
  if (selectedPeriod.value === 'PM') {
    const [hours, minutes] = selectedTime.value.split(':')
    const hour = parseInt(hours)

    // Only adjust hours that aren't already in PM format (12 PM stays as 12)
    const adjustedHour = hour === 12 ? 12 : hour + 12
    form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
  } else {
    // For AM, make sure 12 AM becomes 00:00
    const [hours, minutes] = selectedTime.value.split(':')
    const hour = parseInt(hours)
    const adjustedHour = hour === 12 ? 0 : hour
    form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
  }

  closeTimePicker()
}

// Date picker variables
const isDatePickerOpen = ref(false)
const currentYear = ref(new Date().getFullYear())
const currentMonth = ref(new Date().getMonth())
const selectedDate = ref(new Date())
const tempSelectedDate = ref(null)

// Custom time input variables
const customHours = ref('07')
const customMinutes = ref('00')

// Define weekdays and month names for the calendar
const weekdays = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
const monthNames = [
  'January',
  'February',
  'March',
  'April',
  'May',
  'June',
  'July',
  'August',
  'September',
  'October',
  'November',
  'December',
]

// Format time inputs when focus is lost
const formatTimeInputs = () => {
  // Validate and format hours
  let formattedHours = parseInt(customHours.value) || 1
  if (formattedHours < 1) formattedHours = 1
  if (formattedHours > 12) formattedHours = 12

  // Validate and format minutes
  let formattedMinutes = parseInt(customMinutes.value) || 0
  if (formattedMinutes < 0) formattedMinutes = 0
  if (formattedMinutes > 59) formattedMinutes = 59

  // Update the ref values with formatted strings
  customHours.value = formattedHours.toString().padStart(2, '0')
  customMinutes.value = formattedMinutes.toString().padStart(2, '0')

  // Update selectedTime with formatted values
  selectedTime.value = `${formattedHours.toString().padStart(2, '0')}:${formattedMinutes.toString().padStart(2, '0')}`
}

// Function to prefill the form with test data
const prefillForm = () => {
  // Generate a random event title to avoid duplicates
  const eventTypes = [
    'Workshop',
    'Conference',
    'Meetup',
    'Concert',
    'Festival',
    'Webinar',
    'Hackathon',
  ]
  const eventAdjectives = [
    'Amazing',
    'Incredible',
    'Ultimate',
    'Exclusive',
    'Premier',
    'Annual',
    'Interactive',
  ]
  const eventSubjects = [
    'Tech',
    'Music',
    'Art',
    'Food',
    'Business',
    'Science',
    'Wellness',
    'Development',
  ]

  const randomTitle = `${eventAdjectives[Math.floor(Math.random() * eventAdjectives.length)]} ${
    eventSubjects[Math.floor(Math.random() * eventSubjects.length)]
  } ${eventTypes[Math.floor(Math.random() * eventTypes.length)]}`

  // Random location
  const cities = [
    'New York',
    'San Francisco',
    'Chicago',
    'Los Angeles',
    'Miami',
    'Seattle',
    'Austin',
    'Boston',
  ]
  const venues = [
    'Convention Center',
    'Concert Hall',
    'Community Space',
    'Hotel Ballroom',
    'Outdoor Park',
    'Art Gallery',
  ]
  const randomLocation = `${venues[Math.floor(Math.random() * venues.length)]}, ${
    cities[Math.floor(Math.random() * cities.length)]
  }`

  // Select a random category
  const randomCategory = categories.value[Math.floor(Math.random() * categories.value.length)].id

  // Generate random date and time (between 1-3 months in the future)
  const futureDate = new Date()
  futureDate.setDate(futureDate.getDate() + 30 + Math.floor(Math.random() * 60)) // 30-90 days in future

  const year = futureDate.getFullYear()
  const month = (futureDate.getMonth() + 1).toString().padStart(2, '0')
  const day = futureDate.getDate().toString().padStart(2, '0')
  const formattedDate = `${year}-${month}-${day}`

  // Random time (morning, afternoon, or evening)
  const hours = [9, 10, 13, 14, 18, 19]
  const randomHour = hours[Math.floor(Math.random() * hours.length)]
  const randomMinutes = ['00', '15', '30', '45'][Math.floor(Math.random() * 4)]
  const formattedTime = `${randomHour.toString().padStart(2, '0')}:${randomMinutes}`

  // Random price (free or $10-$150)
  const randomPrice = Math.random() > 0.2 ? (Math.floor(Math.random() * 14) + 1) * 10 + 0.99 : 0

  // Random ticket count
  const randomTickets = (Math.floor(Math.random() * 10) + 1) * 50

  // Random duration
  const durations = ['2 hours', '3 hours', '4 hours', 'All day', '2 days', 'Weekend']
  const randomDuration = durations[Math.floor(Math.random() * durations.length)]

  // Fill the form with the random data
  form.title = randomTitle
  form.organizer = 'Test Organizer LLC'
  form.description = `Join us for this amazing event where you'll experience the best of ${eventSubjects[Math.floor(Math.random() * eventSubjects.length)]}.

This is a great opportunity to network with like-minded individuals and learn from industry experts. Don't miss out on this incredible experience!

• Professional speakers
• Networking opportunities
• Hands-on activities
• Refreshments provided
• Take-home materials`

  form.location = randomLocation
  form.category = randomCategory
  form.date = formattedDate
  form.time = formattedTime
  form.price = randomPrice.toString()
  form.totalTickets = randomTickets.toString()
  form.duration = randomDuration
  form.featured = Math.random() > 0.5 // 50% chance to be featured

  // Select 3-5 random event options
  form.selectedEventOptions = []
  const shuffledOptions = [...predefinedEventOptions].sort(() => 0.5 - Math.random())
  const optionsCount = Math.floor(Math.random() * 3) + 3 // 3-5 options
  form.selectedEventOptions = shuffledOptions.slice(0, optionsCount)

  // Add 1-2 custom options
  form.customEventOptions = []
  const customOptionIdeas = [
    'Free merchandise',
    'After-party included',
    'Video recording available',
    'Certificate provided',
    'Professional photos',
    'Translation services',
    'VIP meet & greet',
  ]

  if (Math.random() > 0.5) {
    const shuffledCustomOptions = [...customOptionIdeas].sort(() => 0.5 - Math.random())
    const customCount = Math.floor(Math.random() * 2) + 1 // 1-2 custom options
    form.customEventOptions = shuffledCustomOptions.slice(0, customCount)
  }

  // Add ticket types
  form.ticketTypes = [
    {
      name: 'General Admission',
      price: randomPrice,
      quantity: Math.floor(randomTickets * 0.7), // 70% of tickets
      description: 'Standard entry ticket with access to all areas.',
      salesEndDate: '',
      salesEndTime: '23:59',
      isFeatured: false,
    },
  ]

  if (Math.random() > 0.3) {
    // 70% chance to have VIP tickets
    form.ticketTypes.push({
      name: 'VIP Experience',
      price: randomPrice * 2.5,
      quantity: Math.floor(randomTickets * 0.3), // 30% of tickets
      description: 'Premium ticket with exclusive perks and priority access.',
      salesEndDate: '',
      salesEndTime: '23:59',
      isFeatured: true,
    })
  }
}

// Ticket templates
const ticketTemplates = [
  {
    name: 'General Admission',
    price: 0,
    quantity: 100,
    description: 'Standard entry ticket with access to all areas.',
    salesEndDate: '',
    salesEndTime: '23:59',
    isFeatured: false,
  },
  {
    name: 'VIP Experience',
    price: 100,
    quantity: 50,
    description: 'Premium ticket with exclusive perks and priority access.',
    salesEndDate: '',
    salesEndTime: '23:59',
    isFeatured: true,
  },
]

// Apply template to a specific ticket
const applyTemplate = (index, template) => {
  const ticket = form.ticketTypes[index]
  ticket.name = template.name
  ticket.price = template.price
  ticket.quantity = template.quantity
  ticket.description = template.description
  ticket.salesEndDate = template.salesEndDate
  ticket.salesEndTime = template.salesEndTime
  ticket.isFeatured = template.isFeatured
}

// ... (rest of the code remains unchanged)


            import { ref, computed, reactive, watch, onMounted } from 'vue'
            import { useRouter } from 'vue-router'
            import { useEventStore } from '@/stores/events'

            // Initialize references
            const router = useRouter()
            const eventStore = useEventStore()
            const error = ref(null)
            const success = ref(false)
            const isSubmitting = ref(false)
            const today = ref(new Date().toISOString().split('T')[0]) // Today's date in YYYY-MM-DD format
            const showTemplateModal = ref(false)
            const activeTicketIndex = ref(0)
            const showSubCategoryModal = ref(false)
            const tempSelectedSubCategories = ref([]) // Temporary storage for selected subcategories in modal
            const subCategorySearchTerm = ref('')
            const customSubCategories = ref([])
            const newCustomSubCategory = ref('')
            const categories = ref([])
            const availableSubCategories = ref([])
            const mainImagePreview = ref(null)
            const bannerImagePreview = ref(null)
            const newCustomEventOption = ref('')

            // Also initialize form with image fields
            const form = reactive({
              title: '',
              description: '',
              category: '',
              subCategories: [],
              date: '',
              time: '19:00',
              location: '',
              price: 0,
              totalTickets: 100,
              organizer: '',
              duration: '',
              featured: false,
              imageIndex: Math.floor(Math.random() * 4), // Random image from available set
              mainImage: null,
              bannerImage: null,
              selectedEventOptions: [], // Start with no options selected
              customEventOptions: [], // For user-added custom options
              ticketTypes: [
                {
                  name: 'General Admission',
                  price: 0,
                  quantity: 100,
                  description: '',
                  salesEndDate: '',
                  salesEndTime: '23:59',
                  isFeatured: false,
                },
              ],
              // Add FAQs to the form data
              faqs: [
                {
                  question: "What's included in the ticket price?",
                  answer:
                    'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
                },
                {
                  question: "What's the refund policy?",
                  answer:
                    'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
                },
                {
                  question: 'Is there parking available?',
                  answer:
                    'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
                },
                {
                  question: 'What should I bring with me?',
                  answer:
                    'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
                },
                {
                  question: 'Are there age restrictions for this event?',
                  answer:
                    'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
                },
              ],
            })

            // Form validation
            const validation = reactive({
              title: { valid: true, message: '' },
              description: { valid: true, message: '' },
              category: { valid: true, message: '' },
              subCategories: { valid: true, message: '' },
              date: { valid: true, message: '' },
              time: { valid: true, message: '' },
              location: { valid: true, message: '' },
              price: { valid: true, message: '' },
              totalTickets: { valid: true, message: '' },
              organizer: { valid: true, message: '' },
              ticketTypes: { valid: true, message: '' },
              mainImage: { valid: true, message: '' },
              bannerImage: { valid: true, message: '' },
            })

            // Fetch categories on mount
            onMounted(async () => {
              try {
                // This will be replaced with API call later
                const eventService = (await import('@/services/eventService')).default
                categories.value = await eventService.getAllCategories()

                // Get sub-categories or initialize with mock data if the service doesn't provide them
                try {
                  availableSubCategories.value = await eventService.getAllSubCategories()
                } catch {
                  // If the service doesn't have getAllSubCategories method yet, use mock data
                  availableSubCategories.value = [
                    { id: 'sub1', name: 'Workshop' },
                    { id: 'sub2', name: 'Conference' },
                    { id: 'sub3', name: 'Meetup' },
                    { id: 'sub4', name: 'Webinar' },
                    { id: 'sub5', name: 'Party' },
                    { id: 'sub6', name: 'Exhibition' },
                    { id: 'sub7', name: 'Concert' },
                    { id: 'sub8', name: 'Sport Event' },
                  ]
                }
              } catch (err) {
                error.value = 'Failed to load categories'
                console.error('Error loading categories:', err)
              }
            })

            // Add ticket type
            const addTicketType = () => {
              form.ticketTypes.push({
                name: '',
                price: 0,
                quantity: 50,
                description: '',
                salesEndDate: '',
                salesEndTime: '23:59',
                isFeatured: false,
              })
            }

            // Remove ticket type
            const removeTicketType = (index) => {
              form.ticketTypes.splice(index, 1)
            }

            // Duplicate ticket type
            const duplicateTicketType = (index) => {
              const ticketToDuplicate = { ...form.ticketTypes[index] }
              ticketToDuplicate.name = `${ticketToDuplicate.name} (Copy)`
              form.ticketTypes.splice(index + 1, 0, ticketToDuplicate)
            }

            // Available ticket type templates
            const ticketTemplates = [
              {
                name: 'Standard',
                description: 'Regular entry ticket for most guests',
                isFeatured: false,
              },
              {
                name: 'Early Bird',
                description: 'Limited time offer at a discounted price',
                isFeatured: true,
              },
              {
                name: 'VIP',
                description: 'Premium experience with exclusive benefits',
                isFeatured: true,
              },
              { name: 'Table for 4', description: 'Reserved table seating for 4 guests' },
              { name: 'Table for 8', description: 'Reserved table seating for 8 guests' },
              {
                name: 'Table for 12',
                description: 'Reserved table seating for a large group of 12',
              },
              {
                name: 'Gold',
                description: 'Elite experience with exclusive perks and priority service',
                isFeatured: true,
              },
              { name: 'Student', description: 'Discounted ticket with valid student ID' },
              { name: 'Group (5+)', description: 'Discounted rate for groups of 5 or more' },
            ]

            // Apply template to ticket
            const applyTemplate = (index, template) => {
              form.ticketTypes[index].name = template.name
              form.ticketTypes[index].description = template.description
              if (template.isFeatured) {
                form.ticketTypes[index].isFeatured = true
              }
            }

            // Calculate total tickets
            const calculateTotalTickets = computed(() => {
              return form.ticketTypes.reduce((sum, ticket) => sum + ticket.quantity, 0)
            })

            // Update total tickets when ticket quantities change
            watch(calculateTotalTickets, (newTotal) => {
              form.totalTickets = newTotal
            })

            // Computed combined date and time
            const fullDateTime = computed(() => {
              if (!form.date || !form.time) return null
              const [year, month, day] = form.date.split('-')
              const [hours, minutes] = form.time.split(':')
              return new Date(year, month - 1, day, hours, minutes).toISOString()
            })

            // Duration options
            const durationOptions = [
              '1 hour',
              '2 hours',
              '3 hours',
              '4 hours',
              '5 hours',
              '1 day',
              '2 days',
              '3 days',
              'Multiple days',
            ]

            // Define stronger password regex if using authentication
            const sanitizeInput = (input) => {
              if (typeof input !== 'string') return input
              // Basic sanitization - replaces potentially harmful characters
              return input.replace(/[<>&"'`=/]/g, '')
            }

            // Validate form with enhanced security
            const validateForm = () => {
              let isValid = true

              // Title validation with sanitization
              const sanitizedTitle = sanitizeInput(form.title.trim())
              if (!sanitizedTitle) {
                validation.title.valid = false
                validation.title.message = 'Add a name for your event'
                isValid = false
              } else if (sanitizedTitle.length < 5) {
                validation.title.valid = false
                validation.title.message = 'Name needs at least 5 letters'
                isValid = false
              } else if (sanitizedTitle.length > 100) {
                validation.title.valid = false
                validation.title.message = 'Name is too long (100 letters max)'
                isValid = false
              } else {
                validation.title.valid = true
                // Update the form with sanitized value
                form.title = sanitizedTitle
              }

              // Description validation with sanitization
              const sanitizedDescription = sanitizeInput(form.description.trim())
              if (!sanitizedDescription) {
                validation.description.valid = false
                validation.description.message = 'Add a description'
                isValid = false
              } else if (sanitizedDescription.length < 20) {
                validation.description.valid = false
                validation.description.message = 'Write at least 20 letters'
                isValid = false
              } else if (sanitizedDescription.length > 5000) {
                validation.description.valid = false
                validation.description.message = 'Too long! Keep it under 5000 letters'
                isValid = false
              } else {
                validation.description.valid = true
                // Update the form with sanitized value
                form.description = sanitizedDescription
              }

              // Category validation
              if (!form.category) {
                validation.category.valid = false
                validation.category.message = 'Pick a category'
                isValid = false
              } else {
                // Validate category ID exists in valid categories
                const categoryExists = categories.value.some((cat) => cat.id === form.category)
                if (!categoryExists) {
                  validation.category.valid = false
                  validation.category.message = 'Pick a category from the list'
                  isValid = false
                } else {
                  validation.category.valid = true
                }
              }

              // Sub-categories validation
              const nonEmptySubCategories = form.subCategories.filter((cat) => cat !== '')
              const uniqueSubCategories = [...new Set(nonEmptySubCategories)]

              if (nonEmptySubCategories.length !== uniqueSubCategories.length) {
                validation.subCategories.valid = false
                validation.subCategories.message = 'You picked the same tag twice'
                isValid = false
              } else {
                // Validate each subcategory ID exists in valid subcategories
                const invalidSubCat = nonEmptySubCategories.some(
                  (subCat) =>
                    !availableSubCategories.value.some((validSubCat) => validSubCat.id === subCat),
                )

                if (invalidSubCat) {
                  validation.subCategories.valid = false
                  validation.subCategories.message = 'Pick tags from the list'
                  isValid = false
                } else {
                  validation.subCategories.valid = true
                }
              }

              // Date validation
              if (!form.date) {
                validation.date.valid = false
                validation.date.message = 'Pick a date'
                isValid = false
              } else {
                // Validate date format and ensure it's not in the past
                const selectedDate = new Date(form.date)
                const currentDate = new Date()
                currentDate.setHours(0, 0, 0, 0)

                if (isNaN(selectedDate.getTime())) {
                  validation.date.valid = false
                  validation.date.message = "This date won't work"
                  isValid = false
                } else if (selectedDate < currentDate) {
                  validation.date.valid = false
                  validation.date.message = 'Pick a date in the future'
                  isValid = false
                } else {
                  validation.date.valid = true
                }
              }

              // Time validation
              if (!form.time) {
                validation.time.valid = false
                validation.time.message = 'Add a start time'
                isValid = false
              } else {
                // Validate time format (HH:MM)
                const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/
                if (!timeRegex.test(form.time)) {
                  validation.time.valid = false
                  validation.time.message = 'Use hours:minutes format'
                  isValid = false
                } else {
                  validation.time.valid = true
                }
              }

              // Location validation with sanitization
              const sanitizedLocation = sanitizeInput(form.location.trim())
              if (!sanitizedLocation) {
                validation.location.valid = false
                validation.location.message = 'Add a location'
                isValid = false
              } else if (sanitizedLocation.length < 5) {
                validation.location.valid = false
                validation.location.message = 'Write a longer address'
                isValid = false
              } else {
                validation.location.valid = true
                // Update the form with sanitized value
                form.location = sanitizedLocation
              }

              // Price validation
              if (isNaN(form.price) || form.price === '') {
                validation.price.valid = false
                validation.price.message = 'Price must be a number'
                isValid = false
              } else {
                const price = parseFloat(form.price)
                if (price < 0) {
                  validation.price.valid = false
                  validation.price.message = "Price can't be negative"
                  isValid = false
                } else if (price > 100000) {
                  validation.price.valid = false
                  validation.price.message = 'Price too high (max $100,000)'
                  isValid = false
                } else {
                  validation.price.valid = true
                  // Ensure price is stored as a number with 2 decimal places
                  form.price = parseFloat(price.toFixed(2))
                }
              }

              // Tickets validation
              if (isNaN(form.totalTickets) || form.totalTickets === '') {
                validation.totalTickets.valid = false
                validation.totalTickets.message = 'How many tickets?'
                isValid = false
              } else {
                const tickets = parseInt(form.totalTickets)
                if (tickets <= 0) {
                  validation.totalTickets.valid = false
                  validation.totalTickets.message = 'You need at least 1 ticket'
                  isValid = false
                } else if (tickets > 100000) {
                  validation.totalTickets.valid = false
                  validation.totalTickets.message = 'Too many tickets (max 100,000)'
                  isValid = false
                } else {
                  validation.totalTickets.valid = true
                  // Ensure tickets is stored as an integer
                  form.totalTickets = tickets
                }
              }

              // Organizer validation with sanitization
              const sanitizedOrganizer = sanitizeInput(form.organizer.trim())
              if (!sanitizedOrganizer) {
                validation.organizer.valid = false
                validation.organizer.message = 'Add your name or group name'
                isValid = false
              } else {
                validation.organizer.valid = true
                // Update the form with sanitized value
                form.organizer = sanitizedOrganizer
              }

              // Ticket types validation
              if (form.ticketTypes.length === 0) {
                validation.ticketTypes.valid = false
                validation.ticketTypes.message = 'Add at least one ticket type'
                isValid = false
              } else {
                let ticketTypeValid = true
                form.ticketTypes.forEach((ticket, index) => {
                  const sanitizedName = sanitizeInput(ticket.name.trim())
                  if (!sanitizedName) {
                    validation.ticketTypes.valid = false
                    validation.ticketTypes.message = `Ticket #${index + 1} needs a name`
                    ticketTypeValid = false
                    isValid = false
                  }

                  if (ticket.quantity <= 0) {
                    validation.ticketTypes.valid = false
                    validation.ticketTypes.message = `Ticket #${index + 1} needs at least 1`
                    ticketTypeValid = false
                    isValid = false
                  }

                  if (ticket.salesEndDate) {
                    const endDate = new Date(ticket.salesEndDate)
                    const eventDate = new Date(form.date)

                    if (isNaN(endDate.getTime())) {
                      validation.ticketTypes.valid = false
                      validation.ticketTypes.message = `Ticket #${index + 1} has a bad date`
                      ticketTypeValid = false
                      isValid = false
                    } else if (endDate > eventDate) {
                      validation.ticketTypes.valid = false
                      validation.ticketTypes.message = `Ticket #${index + 1} must stop selling before event starts`
                      ticketTypeValid = false
                      isValid = false
                    }
                  }
                })

                if (ticketTypeValid) {
                  validation.ticketTypes.valid = true
                }
              }

              // Main image validation
              if (!form.mainImage) {
                validation.mainImage.valid = false
                validation.mainImage.message = 'Upload a main image'
                isValid = false
              }

              // Banner image validation
              if (!form.bannerImage) {
                validation.bannerImage.valid = false
                validation.bannerImage.message = 'Upload a banner image'
                isValid = false
              }

              return isValid
            }

            // Handle form submission
            const handleSubmit = async () => {
              if (!validateForm()) {
                // Scroll to first error
                const firstError = Object.keys(validation).find((key) => !validation[key].valid)
                if (firstError) {
                  const element = document.getElementById(firstError)
                  if (element) element.scrollIntoView({ behavior: 'smooth', block: 'center' })
                }
                return
              }

              isSubmitting.value = true
              error.value = null

              try {
                // Filter out empty sub-categories and combine with custom subcategories
                const validSubCategories = [
                  ...form.subCategories.filter((cat) => cat !== ''),
                  ...customSubCategories.value,
                ]

                // Process ticket types
                const processedTickets = form.ticketTypes.map((ticket) => ({
                  ...ticket,
                  price: parseFloat(ticket.price),
                  quantity: parseInt(ticket.quantity),
                  name: sanitizeInput(ticket.name.trim()),
                  description: sanitizeInput(ticket.description.trim()),
                }))

                // Process images - convert File objects to data URLs
                let mainImageUrl = mainImagePreview.value
                let bannerImageUrl = bannerImagePreview.value

                // Get the selected event options
                const selectedEventOptions = [
                  ...form.selectedEventOptions,
                  ...form.customEventOptions,
                ].filter(Boolean) // Remove any falsy values

                // Prepare the event data
                const eventData = {
                  title: form.title,
                  description: form.description,
                  category: form.category,
                  subCategories: validSubCategories,
                  date: fullDateTime.value,
                  location: form.location,
                  price: parseFloat(form.price),
                  totalTickets: parseInt(form.totalTickets),
                  organizer: form.organizer,
                  duration: form.duration,
                  featured: form.featured,
                  imageIndex: form.imageIndex,
                  mainImage: mainImageUrl,
                  bannerImage: bannerImageUrl,
                  eventOptions: selectedEventOptions, // Add event options to the event data
                  selectedEventOptions: form.selectedEventOptions, // Store the original selected options
                  customEventOptions: form.customEventOptions, // Store the custom options
                  ticketTypes: processedTickets,
                  faqs: form.faqs.filter((faq) => faq.question.trim() && faq.answer.trim()), // Only include FAQs with content
                }

                // Create the event
                const newEvent = await eventStore.createEvent(eventData)

                success.value = true

                // Redirect to the event page after a brief delay
                setTimeout(() => {
                  router.push({ path: `/event/${newEvent.id}` })
                }, 2000)
              } catch (err) {
                error.value = err.message || 'Failed to create event'
                window.scrollTo({ top: 0, behavior: 'smooth' })
              } finally {
                isSubmitting.value = false
              }
            }

            // Reset form
            const resetForm = () => {
              Object.keys(form).forEach((key) => {
                if (key === 'price') {
                  form[key] = 0
                } else if (key === 'totalTickets') {
                  form[key] = 100
                } else if (key === 'featured') {
                  form[key] = false
                } else if (key === 'imageIndex') {
                  form[key] = Math.floor(Math.random() * 4)
                } else if (key === 'time') {
                  form[key] = '19:00'
                } else if (key === 'subCategories') {
                  form[key] = []
                } else if (key === 'ticketTypes') {
                  form[key] = [
                    {
                      name: 'General Admission',
                      price: 0,
                      quantity: 100,
                      description: '',
                      salesEndDate: '',
                      salesEndTime: '23:59',
                      isFeatured: false,
                    },
                  ]
                } else {
                  form[key] = ''
                }
              })

              Object.keys(validation).forEach((key) => {
                validation[key].valid = true
                validation[key].message = ''
              })

              error.value = null
              success.value = false

              // Also reset custom subcategories
              customSubCategories.value = []

              // Reset custom event options
              form.customEventOptions = []

              // Reset event options to defaults
              form.selectedEventOptions = [
                'Live performance',
                'Food & drinks available',
                'Indoor event',
              ]

              // Reset FAQs to defaults
              form.faqs = [
                {
                  question: "What's included in the ticket price?",
                  answer:
                    'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
                },
                {
                  question: "What's the refund policy?",
                  answer:
                    'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
                },
                {
                  question: 'Is there parking available?',
                  answer:
                    'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
                },
                {
                  question: 'What should I bring with me?',
                  answer:
                    'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
                },
                {
                  question: 'Are there age restrictions for this event?',
                  answer:
                    'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
                },
              ]
            }

            // Set min date to today for date picker
            // const today = new Date().toISOString().split('T')[0]

            // Open template modal for a specific ticket
            const openTemplateModal = (index) => {
              activeTicketIndex.value = index
              showTemplateModal.value = true
              document.body.style.overflow = 'hidden' // Prevent background scrolling
            }

            // Close template modal
            const closeTemplateModal = () => {
              showTemplateModal.value = false
              document.body.style.overflow = '' // Re-enable scrolling
            }

            // Apply template from modal and close the modal
            const applyTemplateFromModal = (index, template) => {
              applyTemplate(index, template)
              closeTemplateModal()
            }

            // Add FAQ
            const addFaq = () => {
              form.faqs.push({
                question: '',
                answer: '',
              })
            }

            // Remove FAQ
            const removeFaq = (index) => {
              form.faqs.splice(index, 1)
            }

            // Handle main image upload
            const handleMainImageUpload = (event) => {
              let file

              // Check if it's a drop event
              if (event.dataTransfer) {
                file = event.dataTransfer.files[0]
              } else if (event.target.files) {
                file = event.target.files[0]
              }

              if (file) {
                form.mainImage = file
                validation.mainImage.valid = true

                // Create a preview URL
                const reader = new FileReader()
                reader.onload = (e) => {
                  mainImagePreview.value = e.target.result
                }
                reader.readAsDataURL(file)
              }
            }

            // Handle banner image upload
            const handleBannerImageUpload = (event) => {
              let file

              // Check if it's a drop event
              if (event.dataTransfer) {
                file = event.dataTransfer.files[0]
              } else if (event.target.files) {
                file = event.target.files[0]
              }

              if (file) {
                form.bannerImage = file
                validation.bannerImage.valid = true

                // Create a preview URL
                const reader = new FileReader()
                reader.onload = (e) => {
                  bannerImagePreview.value = e.target.result
                }
                reader.readAsDataURL(file)
              }
            }

            // Remove main image - could be added to the UI if needed
            const removeMainImage = () => {
              form.mainImage = null
              mainImagePreview.value = null
              validation.mainImage.valid = false
              validation.mainImage.message = 'Please upload a main image'
            }

            // Remove banner image - could be added to the UI if needed
            const removeBannerImage = () => {
              form.bannerImage = null
              bannerImagePreview.value = null
              validation.bannerImage.valid = false
              validation.bannerImage.message = 'Please upload a banner image'
            }

            // Trigger main image upload
            const triggerMainImageUpload = () => {
              const input = document.getElementById('mainImage')
              input.click()
            }

            // Trigger banner image upload
            const triggerBannerImageUpload = () => {
              const input = document.getElementById('bannerImage')
              input.click()
            }

            // Add custom subcategory
            const addCustomSubCategory = () => {
              const trimmed = newCustomSubCategory.value.trim()
              if (
                trimmed &&
                customSubCategories.value.length < 5 &&
                !customSubCategories.value.includes(trimmed)
              ) {
                customSubCategories.value.push(trimmed)
                newCustomSubCategory.value = ''
              }
            }

            // Remove custom subcategory
            const removeCustomSubCategory = (index) => {
              customSubCategories.value.splice(index, 1)
            }

            // Get all displayed subcategories (selected + custom)
            const displayedSubCategories = computed(() => {
              return [...form.subCategories, ...customSubCategories.value]
            })

            // Get subcategory name by id
            const getSubCategoryName = (subCatId) => {
              // If it's a predefined subcategory
              if (typeof subCatId === 'string' && subCatId.startsWith('sub')) {
                const subCat = availableSubCategories.value.find((sc) => sc.id === subCatId)
                return subCat ? subCat.name : subCatId
              }
              // If it's a custom subcategory
              return subCatId
            }

            // Filter subcategories based on search term
            const filteredSubCategories = computed(() => {
              if (!subCategorySearchTerm.value) return availableSubCategories.value

              const searchTerm = subCategorySearchTerm.value.toLowerCase()
              return availableSubCategories.value.filter((sc) =>
                sc.name.toLowerCase().includes(searchTerm),
              )
            })

            // Count selected subcategories
            const selectedSubCategoriesCount = computed(() => {
              return tempSelectedSubCategories.value.length + customSubCategories.value.length
            })

            // Remove a subcategory from the form
            const removeSubCategoryById = (subCat) => {
              if (typeof subCat === 'string' && subCat.startsWith('sub')) {
                // If it's a predefined subcategory
                form.subCategories = form.subCategories.filter((sc) => sc !== subCat)
              } else {
                // If it's a custom subcategory
                customSubCategories.value = customSubCategories.value.filter((sc) => sc !== subCat)
              }
            }

            // Toggle subcategory selection
            const toggleSubCategory = (id) => {
              if (isSubCategorySelected(id)) {
                tempSelectedSubCategories.value = tempSelectedSubCategories.value.filter(
                  (subCatId) => subCatId !== id,
                )
              } else {
                if (selectedSubCategoriesCount.value < 5) {
                  tempSelectedSubCategories.value.push(id)
                }
              }
            }

            // Check if subcategory is selected
            const isSubCategorySelected = (id) => {
              return tempSelectedSubCategories.value.includes(id)
            }

            // Open subcategory modal
            const openSubCategoryModal = () => {
              if (form.category === '') {
                validation.category.valid = false
                validation.category.message = 'Select a category first'
                // Focus category dropdown
                const categoryElement = document.getElementById('category')
                if (categoryElement) categoryElement.focus()
                return
              }

              // Initialize the temp selection with current selection
              tempSelectedSubCategories.value = [...form.subCategories]
              showSubCategoryModal.value = true
              document.body.style.overflow = 'hidden' // Prevent background scrolling
            }

            // Close subcategory modal
            const closeSubCategoryModal = () => {
              showSubCategoryModal.value = false
              document.body.style.overflow = '' // Re-enable scrolling
              subCategorySearchTerm.value = ''
              newCustomSubCategory.value = ''
            }

            // Confirm subcategory selections
            const confirmSubCategories = () => {
              form.subCategories = [...tempSelectedSubCategories.value]
              closeSubCategoryModal()
            }

            // Handle main image drop
            const handleMainImageDrop = (event) => {
              event.preventDefault()
              handleMainImageUpload(event)
            }

            // Handle banner image drop
            const handleBannerImageDrop = (event) => {
              event.preventDefault()
              handleBannerImageUpload(event)
            }

            // Add custom event option
            const addCustomEventOption = () => {
              const trimmed = newCustomEventOption.value.trim()
              if (
                trimmed &&
                form.customEventOptions.length < 5 &&
                !form.customEventOptions.includes(trimmed)
              ) {
                form.customEventOptions.push(trimmed)
                newCustomEventOption.value = ''
              }
            }

            // Remove custom event option
            const removeCustomEventOption = (index) => {
              form.customEventOptions.splice(index, 1)
            }

            // Toggle event option
            const toggleEventOption = (option) => {
              if (form.selectedEventOptions.includes(option)) {
                form.selectedEventOptions = form.selectedEventOptions.filter(
                  (opt) => opt !== option,
                )
              } else {
                // Allow selecting more options - remove limit
                form.selectedEventOptions.push(option)
              }
            }

            // Check if event option is selected
            const isEventOptionSelected = (option) => {
              return form.selectedEventOptions.includes(option)
            }

            // Predefined event options
            const predefinedEventOptions = [
              'Live performance',
              'Food & drinks available',
              'Indoor event',
              'Outdoor event',
              'Accessible venue',
              'Family friendly',
              'Free parking',
              'VIP access',
              'Professional networking',
              'Photo opportunities',
              'Live streaming',
              'Q&A session',
              'Merchandise available',
              'Meet & greet',
              'Seating provided',
            ]

            const showDateTip = ref(false)
            const showTimeTip = ref(false)

            // Time picker variables
            const isTimePickerOpen = ref(false)
            const selectedTime = ref('07:00')
            const selectedPeriod = ref('AM')

            const timeOptions = [
              '01:00',
              '01:30',
              '02:00',
              '02:30',
              '03:00',
              '03:30',
              '04:00',
              '04:30',
              '05:00',
              '05:30',
              '06:00',
              '06:30',
              '07:00',
              '07:30',
              '08:00',
              '08:30',
              '09:00',
              '09:30',
              '10:00',
              '10:30',
              '11:00',
              '11:30',
              '12:00',
              '12:30',
            ]

            const openTimePicker = () => {
              // If there's already a time, parse it to 12-hour format for the picker
              if (form.time) {
                const [hours, minutes] = form.time.split(':')
                const hour = parseInt(hours)

                if (hour > 12) {
                  // Convert from 24-hour to 12-hour format for PM
                  selectedTime.value = `${(hour - 12).toString().padStart(2, '0')}:${minutes}`
                  selectedPeriod.value = 'PM'
                } else if (hour === 12) {
                  // 12 PM
                  selectedTime.value = `12:${minutes}`
                  selectedPeriod.value = 'PM'
                } else if (hour === 0) {
                  // 12 AM
                  selectedTime.value = `12:${minutes}`
                  selectedPeriod.value = 'AM'
                } else {
                  // Regular AM hours
                  selectedTime.value = `${hour.toString().padStart(2, '0')}:${minutes}`
                  selectedPeriod.value = 'AM'
                }
              } else {
                // Default to 7:00 AM if no time selected
                selectedTime.value = '07:00'
                selectedPeriod.value = 'AM'
              }

              isTimePickerOpen.value = true
            }

            const closeTimePicker = () => {
              isTimePickerOpen.value = false
            }

            const selectTime = (time) => {
              selectedTime.value = time
            }

            const selectPeriod = (period) => {
              selectedPeriod.value = period
            }

            const applyTimeSelection = () => {
              // Convert to 24-hour format if PM is selected
              if (selectedPeriod.value === 'PM') {
                const [hours, minutes] = selectedTime.value.split(':')
                const hour = parseInt(hours)

                // Only adjust hours that aren't already in PM format (12 PM stays as 12)
                const adjustedHour = hour === 12 ? 12 : hour + 12
                form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
              } else {
                // For AM, make sure 12 AM becomes 00:00
                const [hours, minutes] = selectedTime.value.split(':')
                const hour = parseInt(hours)
                const adjustedHour = hour === 12 ? 0 : hour
                form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
              }

              closeTimePicker()
            }

            // Date picker variables
            const isDatePickerOpen = ref(false)
            const currentYear = ref(new Date().getFullYear())
            const currentMonth = ref(new Date().getMonth())
            const selectedDate = ref(new Date())
            const tempSelectedDate = ref(null)

            // Custom time input variables
            const customHours = ref('07')
            const customMinutes = ref('00')

            // Define weekdays and month names for the calendar
            const weekdays = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
            const monthNames = [
              'January',
              'February',
              'March',
              'April',
              'May',
              'June',
              'July',
              'August',
              'September',
              'October',
              'November',
              'December',
            ]

            // Format time inputs when focus is lost
            const formatTimeInputs = () => {
              // Validate and format hours
              let formattedHours = parseInt(customHours.value) || 1
              if (formattedHours < 1) formattedHours = 1
              if (formattedHours > 12) formattedHours = 12

              // Validate and format minutes
              let formattedMinutes = parseInt(customMinutes.value) || 0
              if (formattedMinutes < 0) formattedMinutes = 0
              if (formattedMinutes > 59) formattedMinutes = 59

              // Update the ref values with formatted strings
              customHours.value = formattedHours.toString().padStart(2, '0')
              customMinutes.value = formattedMinutes.toString().padStart(2, '0')

              // Update selectedTime with formatted values
              selectedTime.value = `${formattedHours.toString().padStart(2, '0')}:${formattedMinutes.toString().padStart(2, '0')}`
            }

            // Function to prefill the form with test data
            const prefillForm = () => {
              // Generate a random event title to avoid duplicates
              const eventTypes = [
                'Workshop',
                'Conference',
                'Meetup',
                'Concert',
                'Festival',
                'Webinar',
                'Hackathon',
              ]
            }
          

            import { ref, computed, reactive, watch, onMounted } from 'vue'
            import { useRouter } from 'vue-router'
            import { useEventStore } from '@/stores/events'

            // Initialize references
            const router = useRouter()
            const eventStore = useEventStore()
            const error = ref(null)
            const success = ref(false)
            const isSubmitting = ref(false)
            const today = ref(new Date().toISOString().split('T')[0]) // Today's date in YYYY-MM-DD format
            const showTemplateModal = ref(false)
            const activeTicketIndex = ref(0)
            const showSubCategoryModal = ref(false)
            const tempSelectedSubCategories = ref([]) // Temporary storage for selected subcategories in modal
            const subCategorySearchTerm = ref('')
            const customSubCategories = ref([])
            const newCustomSubCategory = ref('')
            const categories = ref([])
            const availableSubCategories = ref([])
            const mainImagePreview = ref(null)
            const bannerImagePreview = ref(null)
            const newCustomEventOption = ref('')

            // Also initialize form with image fields
            const form = reactive({
              title: '',
              description: '',
              category: '',
              subCategories: [],
              date: '',
              time: '19:00',
              location: '',
              price: 0,
              totalTickets: 100,
              organizer: '',
              duration: '',
              featured: false,
              imageIndex: Math.floor(Math.random() * 4), // Random image from available set
              mainImage: null,
              bannerImage: null,
              selectedEventOptions: [], // Start with no options selected
              customEventOptions: [], // For user-added custom options
              ticketTypes: [
                {
                  name: 'General Admission',
                  price: 0,
                  quantity: 100,
                  description: '',
                  salesEndDate: '',
                  salesEndTime: '23:59',
                  isFeatured: false,
                },
              ],
              // Add FAQs to the form data
              faqs: [
                {
                  question: "What's included in the ticket price?",
                  answer:
                    'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
                },
                {
                  question: "What's the refund policy?",
                  answer:
                    'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
                },
                {
                  question: 'Is there parking available?',
                  answer:
                    'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
                },
                {
                  question: 'What should I bring with me?',
                  answer:
                    'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
                },
                {
                  question: 'Are there age restrictions for this event?',
                  answer:
                    'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
                },
              ],
            })

            // Form validation
            const validation = reactive({
              title: { valid: true, message: '' },
              description: { valid: true, message: '' },
              category: { valid: true, message: '' },
              subCategories: { valid: true, message: '' },
              date: { valid: true, message: '' },
              time: { valid: true, message: '' },
              location: { valid: true, message: '' },
              price: { valid: true, message: '' },
              totalTickets: { valid: true, message: '' },
              organizer: { valid: true, message: '' },
              ticketTypes: { valid: true, message: '' },
              mainImage: { valid: true, message: '' },
              bannerImage: { valid: true, message: '' },
            })

            // Fetch categories on mount
            onMounted(async () => {
              try {
                // This will be replaced with API call later
                const eventService = (await import('@/services/eventService')).default
                categories.value = await eventService.getAllCategories()

                // Get sub-categories or initialize with mock data if the service doesn't provide them
                try {
                  availableSubCategories.value = await eventService.getAllSubCategories()
                } catch {
                  // If the service doesn't have getAllSubCategories method yet, use mock data
                  availableSubCategories.value = [
                    { id: 'sub1', name: 'Workshop' },
                    { id: 'sub2', name: 'Conference' },
                    { id: 'sub3', name: 'Meetup' },
                    { id: 'sub4', name: 'Webinar' },
                    { id: 'sub5', name: 'Party' },
                    { id: 'sub6', name: 'Exhibition' },
                    { id: 'sub7', name: 'Concert' },
                    { id: 'sub8', name: 'Sport Event' },
                  ]
                }
              } catch (err) {
                error.value = 'Failed to load categories'
                console.error('Error loading categories:', err)
              }
            })

            // Add ticket type
            const addTicketType = () => {
              form.ticketTypes.push({
                name: '',
                price: 0,
                quantity: 50,
                description: '',
                salesEndDate: '',
                salesEndTime: '23:59',
                isFeatured: false,
              })
            }

            // Remove ticket type
            const removeTicketType = (index) => {
              form.ticketTypes.splice(index, 1)
            }

            // Duplicate ticket type
            const duplicateTicketType = (index) => {
              const ticketToDuplicate = { ...form.ticketTypes[index] }
              ticketToDuplicate.name = `${ticketToDuplicate.name} (Copy)`
              form.ticketTypes.splice(index + 1, 0, ticketToDuplicate)
            }

            // Available ticket type templates
            const ticketTemplates = [
              { name: 'Standard', description: 'Regular entry ticket for most guests', isFeatured: false },
              { name: 'Early Bird', description: 'Limited time offer at a discounted price', isFeatured: true },
              { name: 'VIP', description: 'Premium experience with exclusive benefits', isFeatured: true },
              { name: 'Table for 4', description: 'Reserved table seating for 4 guests' },
              { name: 'Table for 8', description: 'Reserved table seating for 8 guests' },
              { name: 'Table for 12', description: 'Reserved table seating for a large group of 12' },
              {
                name: 'Gold',
                description: 'Elite experience with exclusive perks and priority service',
                isFeatured: true,
              },
              { name: 'Student', description: 'Discounted ticket with valid student ID' },
              { name: 'Group (5+)', description: 'Discounted rate for groups of 5 or more' },
            ]

            // Apply template to ticket
            const applyTemplate = (index, template) => {
              form.ticketTypes[index].name = template.name
              form.ticketTypes[index].description = template.description
              if (template.isFeatured) {
                form.ticketTypes[index].isFeatured = true
              }
            }

            // Calculate total tickets
            const calculateTotalTickets = computed(() => {
              return form.ticketTypes.reduce((sum, ticket) => sum + ticket.quantity, 0)
            })

            // Update total tickets when ticket quantities change
            watch(calculateTotalTickets, (newTotal) => {
              form.totalTickets = newTotal
            })

            // Computed combined date and time
            const fullDateTime = computed(() => {
              if (!form.date || !form.time) return null
              const [year, month, day] = form.date.split('-')
              const [hours, minutes] = form.time.split(':')
              return new Date(year, month - 1, day, hours, minutes).toISOString()
            })

            // Duration options
            const durationOptions = [
              '1 hour',
              '2 hours',
              '3 hours',
              '4 hours',
              '5 hours',
              '1 day',
              '2 days',
              '3 days',
              'Multiple days',
            ]

            // Define stronger password regex if using authentication
            const sanitizeInput = (input) => {
              if (typeof input !== 'string') return input
              // Basic sanitization - replaces potentially harmful characters
              return input.replace(/[<>&"'`=/]/g, '')
            }

            // Validate form with enhanced security
            const validateForm = () => {
              let isValid = true

              // Title validation with sanitization
              const sanitizedTitle = sanitizeInput(form.title.trim())
              if (!sanitizedTitle) {
                validation.title.valid = false
                validation.title.message = 'Add a name for your event'
                isValid = false
              } else if (sanitizedTitle.length < 5) {
                validation.title.valid = false
                validation.title.message = 'Name needs at least 5 letters'
                isValid = false
              } else if (sanitizedTitle.length > 100) {
                validation.title.valid = false
                validation.title.message = 'Name is too long (100 letters max)'
                isValid = false
              } else {
                validation.title.valid = true
                // Update the form with sanitized value
                form.title = sanitizedTitle
              }

              // Description validation with sanitization
              const sanitizedDescription = sanitizeInput(form.description.trim())
              if (!sanitizedDescription) {
                validation.description.valid = false
                validation.description.message = 'Add a description'
                isValid = false
              } else if (sanitizedDescription.length < 20) {
                validation.description.valid = false
                validation.description.message = 'Write at least 20 letters'
                isValid = false
              } else if (sanitizedDescription.length > 5000) {
                validation.description.valid = false
                validation.description.message = 'Too long! Keep it under 5000 letters'
                isValid = false
              } else {
                validation.description.valid = true
                // Update the form with sanitized value
                form.description = sanitizedDescription
              }

              // Category validation
              if (!form.category) {
                validation.category.valid = false
                validation.category.message = 'Pick a category'
                isValid = false
              } else {
                // Validate category ID exists in valid categories
                const categoryExists = categories.value.some((cat) => cat.id === form.category)
                if (!categoryExists) {
                  validation.category.valid = false
                  validation.category.message = 'Pick a category from the list'
                  isValid = false
                } else {
                  validation.category.valid = true
                }
              }

              // Sub-categories validation
              const nonEmptySubCategories = form.subCategories.filter((cat) => cat !== '')
              const uniqueSubCategories = [...new Set(nonEmptySubCategories)]

              if (nonEmptySubCategories.length !== uniqueSubCategories.length) {
                validation.subCategories.valid = false
                validation.subCategories.message = 'You picked the same tag twice'
                isValid = false
              } else {
                // Validate each subcategory ID exists in valid subcategories
                const invalidSubCat = nonEmptySubCategories.some(
                  (subCat) => !availableSubCategories.value.some((validSubCat) => validSubCat.id === subCat),
                )

                if (invalidSubCat) {
                  validation.subCategories.valid = false
                  validation.subCategories.message = 'Pick tags from the list'
                  isValid = false
                } else {
                  validation.subCategories.valid = true
                }
              }

              // Date validation
              if (!form.date) {
                validation.date.valid = false
                validation.date.message = 'Pick a date'
                isValid = false
              } else {
                // Validate date format and ensure it's not in the past
                const selectedDate = new Date(form.date)
                const currentDate = new Date()
                currentDate.setHours(0, 0, 0, 0)

                if (isNaN(selectedDate.getTime())) {
                  validation.date.valid = false
                  validation.date.message = "This date won't work"
                  isValid = false
                } else if (selectedDate < currentDate) {
                  validation.date.valid = false
                  validation.date.message = 'Pick a date in the future'
                  isValid = false
                } else {
                  validation.date.valid = true
                }
              }

              // Time validation
              if (!form.time) {
                validation.time.valid = false
                validation.time.message = 'Add a start time'
                isValid = false
              } else {
                // Validate time format (HH:MM)
                const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/
                if (!timeRegex.test(form.time)) {
                  validation.time.valid = false
                  validation.time.message = 'Use hours:minutes format'
                  isValid = false
                } else {
                  validation.time.valid = true
                }
              }

              // Location validation with sanitization
              const sanitizedLocation = sanitizeInput(form.location.trim())
              if (!sanitizedLocation) {
                validation.location.valid = false
                validation.location.message = 'Add a location'
                isValid = false
              } else if (sanitizedLocation.length < 5) {
                validation.location.valid = false
                validation.location.message = 'Write a longer address'
                isValid = false
              } else {
                validation.location.valid = true
                // Update the form with sanitized value
                form.location = sanitizedLocation
              }

              // Price validation
              if (isNaN(form.price) || form.price === '') {
                validation.price.valid = false
                validation.price.message = 'Price must be a number'
                isValid = false
              } else {
                const price = parseFloat(form.price)
                if (price < 0) {
                  validation.price.valid = false
                  validation.price.message = "Price can't be negative"
                  isValid = false
                } else if (price > 100000) {
                  validation.price.valid = false
                  validation.price.message = 'Price too high (max $100,000)'
                  isValid = false
                } else {
                  validation.price.valid = true
                  // Ensure price is stored as a number with 2 decimal places
                  form.price = parseFloat(price.toFixed(2))
                }
              }

              // Tickets validation
              if (isNaN(form.totalTickets) || form.totalTickets === '') {
                validation.totalTickets.valid = false
                validation.totalTickets.message = 'How many tickets?'
                isValid = false
              } else {
                const tickets = parseInt(form.totalTickets)
                if (tickets <= 0) {
                  validation.totalTickets.valid = false
                  validation.totalTickets.message = 'You need at least 1 ticket'
                  isValid = false
                } else if (tickets > 100000) {
                  validation.totalTickets.valid = false
                  validation.totalTickets.message = 'Too many tickets (max 100,000)'
                  isValid = false
                } else {
                  validation.totalTickets.valid = true
                  // Ensure tickets is stored as an integer
                  form.totalTickets = tickets
                }
              }

              // Organizer validation with sanitization
              const sanitizedOrganizer = sanitizeInput(form.organizer.trim())
              if (!sanitizedOrganizer) {
                validation.organizer.valid = false
                validation.organizer.message = 'Add your name or group name'
                isValid = false
              } else {
                validation.organizer.valid = true
                // Update the form with sanitized value
                form.organizer = sanitizedOrganizer
              }

              // Ticket types validation
              if (form.ticketTypes.length === 0) {
                validation.ticketTypes.valid = false
                validation.ticketTypes.message = 'Add at least one ticket type'
                isValid = false
              } else {
                let ticketTypeValid = true
                form.ticketTypes.forEach((ticket, index) => {
                  const sanitizedName = sanitizeInput(ticket.name.trim())
                  if (!sanitizedName) {
                    validation.ticketTypes.valid = false
                    validation.ticketTypes.message = `Ticket #${index + 1} needs a name`
                    ticketTypeValid = false
                    isValid = false
                  }

                  if (ticket.quantity <= 0) {
                    validation.ticketTypes.valid = false
                    validation.ticketTypes.message = `Ticket #${index + 1} needs at least 1`
                    ticketTypeValid = false
                    isValid = false
                  }

                  if (ticket.salesEndDate) {
                    const endDate = new Date(ticket.salesEndDate)
                    const eventDate = new Date(form.date)

                    if (isNaN(endDate.getTime())) {
                      validation.ticketTypes.valid = false
                      validation.ticketTypes.message = `Ticket #${index + 1} has a bad date`
                      ticketTypeValid = false
                      isValid = false
                    } else if (endDate > eventDate) {
                      validation.ticketTypes.valid = false
                      validation.ticketTypes.message = `Ticket #${index + 1} must stop selling before event starts`
                      ticketTypeValid = false
                      isValid = false
                    }
                  }
                })

                if (ticketTypeValid) {
                  validation.ticketTypes.valid = true
                }
              }

              // Main image validation
              if (!form.mainImage) {
                validation.mainImage.valid = false
                validation.mainImage.message = 'Upload a main image'
                isValid = false
              }

              // Banner image validation
              if (!form.bannerImage) {
                validation.bannerImage.valid = false
                validation.bannerImage.message = 'Upload a banner image'
                isValid = false
              }

              return isValid
            }

            // Handle form submission
            const handleSubmit = async () => {
              if (!validateForm()) {
                // Scroll to first error
                const firstError = Object.keys(validation).find((key) => !validation[key].valid)
                if (firstError) {
                  const element = document.getElementById(firstError)
                  if (element) element.scrollIntoView({ behavior: 'smooth', block: 'center' })
                }
                return
              }

              isSubmitting.value = true
              error.value = null

              try {
                // Filter out empty sub-categories and combine with custom subcategories
                const validSubCategories = [
                  ...form.subCategories.filter((cat) => cat !== ''),
                  ...customSubCategories.value,
                ]

                // Process ticket types
                const processedTickets = form.ticketTypes.map((ticket) => ({
                  ...ticket,
                  price: parseFloat(ticket.price),
                  quantity: parseInt(ticket.quantity),
                  name: sanitizeInput(ticket.name.trim()),
                  description: sanitizeInput(ticket.description.trim()),
                }))

                // Process images - convert File objects to data URLs
                let mainImageUrl = mainImagePreview.value
                let bannerImageUrl = bannerImagePreview.value

                // Get the selected event options
                const selectedEventOptions = [...form.selectedEventOptions, ...form.customEventOptions].filter(
                  Boolean,
                ) // Remove any falsy values

                // Prepare the event data
                const eventData = {
                  title: form.title,
                  description: form.description,
                  category: form.category,
                  subCategories: validSubCategories,
                  date: fullDateTime.value,
                  location: form.location,
                  price: parseFloat(form.price),
                  totalTickets: parseInt(form.totalTickets),
                  organizer: form.organizer,
                  duration: form.duration,
                  featured: form.featured,
                  imageIndex: form.imageIndex,
                  mainImage: mainImageUrl,
                  bannerImage: bannerImageUrl,
                  eventOptions: selectedEventOptions, // Add event options to the event data
                  selectedEventOptions: form.selectedEventOptions, // Store the original selected options
                  customEventOptions: form.customEventOptions, // Store the custom options
                  ticketTypes: processedTickets,
                  faqs: form.faqs.filter((faq) => faq.question.trim() && faq.answer.trim()), // Only include FAQs with content
                }

                // Create the event
                const newEvent = await eventStore.createEvent(eventData)

                success.value = true

                // Redirect to the event page after a brief delay
                setTimeout(() => {
                  router.push({ path: `/event/${newEvent.id}` })
                }, 2000)
              } catch (err) {
                error.value = err.message || 'Failed to create event'
                window.scrollTo({ top: 0, behavior: 'smooth' })
              } finally {
                isSubmitting.value = false
              }
            }

            // Reset form
            const resetForm = () => {
              Object.keys(form).forEach((key) => {
                if (key === 'price') {
                  form[key] = 0
                } else if (key === 'totalTickets') {
                  form[key] = 100
                } else if (key === 'featured') {
                  form[key] = false
                } else if (key === 'imageIndex') {
                  form[key] = Math.floor(Math.random() * 4)
                } else if (key === 'time') {
                  form[key] = '19:00'
                } else if (key === 'subCategories') {
                  form[key] = []
                } else if (key === 'ticketTypes') {
                  form[key] = [
                    {
                      name: 'General Admission',
                      price: 0,
                      quantity: 100,
                      description: '',
                      salesEndDate: '',
                      salesEndTime: '23:59',
                      isFeatured: false,
                    },
                  ]
                } else {
                  form[key] = ''
                }
              })

              Object.keys(validation).forEach((key) => {
                validation[key].valid = true
                validation[key].message = ''
              })

              error.value = null
              success.value = false

              // Also reset custom subcategories
              customSubCategories.value = []

              // Reset custom event options
              form.customEventOptions = []

              // Reset event options to defaults
              form.selectedEventOptions = ['Live performance', 'Food & drinks available', 'Indoor event']

              // Reset FAQs to defaults
              form.faqs = [
                {
                  question: "What's included in the ticket price?",
                  answer:
                    'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
                },
                {
                  question: "What's the refund policy?",
                  answer:
                    'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
                },
                {
                  question: 'Is there parking available?',
                  answer:
                    'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
                },
                {
                  question: 'What should I bring with me?',
                  answer:
                    'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
                },
                {
                  question: 'Are there age restrictions for this event?',
                  answer:
                    'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
                },
              ]
            }

            // Set min date to today for date picker
            // const today = new Date().toISOString().split('T')[0]

            // Open template modal for a specific ticket
            const openTemplateModal = (index) => {
              activeTicketIndex.value = index
              showTemplateModal.value = true
              document.body.style.overflow = 'hidden' // Prevent background scrolling
            }

            // Close template modal
            const closeTemplateModal = () => {
              showTemplateModal.value = false
              document.body.style.overflow = '' // Re-enable scrolling
            }

            // Apply template from modal and close the modal
            const applyTemplateFromModal = (index, template) => {
              applyTemplate(index, template)
              closeTemplateModal()
            }

            // Add FAQ
            const addFaq = () => {
              form.faqs.push({
                question: '',
                answer: '',
              })
            }

            // Remove FAQ
            const removeFaq = (index) => {
              form.faqs.splice(index, 1)
            }

            // Handle main image upload
            const handleMainImageUpload = (event) => {
              let file

              // Check if it's a drop event
              if (event.dataTransfer) {
                file = event.dataTransfer.files[0]
              } else if (event.target.files) {
                file = event.target.files[0]
              }

              if (file) {
                form.mainImage = file
                validation.mainImage.valid = true

                // Create a preview URL
                const reader = new FileReader()
                reader.onload = (e) => {
                  mainImagePreview.value = e.target.result
                }
                reader.readAsDataURL(file)
              }
            }

            // Handle banner image upload
            const handleBannerImageUpload = (event) => {
              let file

              // Check if it's a drop event
              if (event.dataTransfer) {
                file = event.dataTransfer.files[0]
              } else if (event.target.files) {
                file = event.target.files[0]
              }

              if (file) {
                form.bannerImage = file
                validation.bannerImage.valid = true

                // Create a preview URL
                const reader = new FileReader()
                reader.onload = (e) => {
                  bannerImagePreview.value = e.target.result
                }
                reader.readAsDataURL(file)
              }
            }

            // Remove main image - could be added to the UI if needed
            const removeMainImage = () => {
              form.mainImage = null
              mainImagePreview.value = null
              validation.mainImage.valid = false
              validation.mainImage.message = 'Please upload a main image'
            }

            // Remove banner image - could be added to the UI if needed
            const removeBannerImage = () => {
              form.bannerImage = null
              bannerImagePreview.value = null
              validation.bannerImage.valid = false
              validation.bannerImage.message = 'Please upload a banner image'
            }

            // Trigger main image upload
            const triggerMainImageUpload = () => {
              const input = document.getElementById('mainImage')
              input.click()
            }

            // Trigger banner image upload
            const triggerBannerImageUpload = () => {
              const input = document.getElementById('bannerImage')
              input.click()
            }

            // Add custom subcategory
            const addCustomSubCategory = () => {
              const trimmed = newCustomSubCategory.value.trim()
              if (
                trimmed &&
                customSubCategories.value.length < 5 &&
                !customSubCategories.value.includes(trimmed)
              ) {
                customSubCategories.value.push(trimmed)
                newCustomSubCategory.value = ''
              }
            }

            // Remove custom subcategory
            const removeCustomSubCategory = (index) => {
              customSubCategories.value.splice(index, 1)
            }

            // Get all displayed subcategories (selected + custom)
            const displayedSubCategories = computed(() => {
              return [...form.subCategories, ...customSubCategories.value]
            })

            // Get subcategory name by id
            const getSubCategoryName = (subCatId) => {
              // If it's a predefined subcategory
              if (typeof subCatId === 'string' && subCatId.startsWith('sub')) {
                const subCat = availableSubCategories.value.find((sc) => sc.id === subCatId)
                return subCat ? subCat.name : subCatId
              }
              // If it's a custom subcategory
              return subCatId
            }

            // Filter subcategories based on search term
            const filteredSubCategories = computed(() => {
              if (!subCategorySearchTerm.value) return availableSubCategories.value

              const searchTerm = subCategorySearchTerm.value.toLowerCase()
              return availableSubCategories.value.filter((sc) => sc.name.toLowerCase().includes(searchTerm))
            })

            // Count selected subcategories
            const selectedSubCategoriesCount = computed(() => {
              return tempSelectedSubCategories.value.length + customSubCategories.value.length
            })

            // Remove a subcategory from the form
            const removeSubCategoryById = (subCat) => {
              if (typeof subCat === 'string' && subCat.startsWith('sub')) {
                // If it's a predefined subcategory
                form.subCategories = form.subCategories.filter((sc) => sc !== subCat)
              } else {
                // If it's a custom subcategory
                customSubCategories.value = customSubCategories.value.filter((sc) => sc !== subCat)
              }
            }

            // Toggle subcategory selection
            const toggleSubCategory = (id) => {
              if (isSubCategorySelected(id)) {
                tempSelectedSubCategories.value = tempSelectedSubCategories.value.filter(
                  (subCatId) => subCatId !== id,
                )
              } else {
                if (selectedSubCategoriesCount.value < 5) {
                  tempSelectedSubCategories.value.push(id)
                }
              }
            }

            // Check if subcategory is selected
            const isSubCategorySelected = (id) => {
              return tempSelectedSubCategories.value.includes(id)
            }

            // Open subcategory modal
            const openSubCategoryModal = () => {
              if (form.category === '') {
                validation.category.valid = false
                validation.category.message = 'Select a category first'
                // Focus category dropdown
                const categoryElement = document.getElementById('category')
                if (categoryElement) categoryElement.focus()
                return
              }

              // Initialize the temp selection with current selection
              tempSelectedSubCategories.value = [...form.subCategories]
              showSubCategoryModal.value = true
              document.body.style.overflow = 'hidden' // Prevent background scrolling
            }

            // Close subcategory modal
            const closeSubCategoryModal = () => {
              showSubCategoryModal.value = false
              document.body.style.overflow = '' // Re-enable scrolling
              subCategorySearchTerm.value = ''
              newCustomSubCategory.value = ''
            }

            // Confirm subcategory selections
            const confirmSubCategories = () => {
              form.subCategories = [...tempSelectedSubCategories.value]
              closeSubCategoryModal()
            }

            // Handle main image drop
            const handleMainImageDrop = (event) => {
              event.preventDefault()
              handleMainImageUpload(event)
            }

            // Handle banner image drop
            const handleBannerImageDrop = (event) => {
              event.preventDefault()
              handleBannerImageUpload(event)
            }

            // Add custom event option
            const addCustomEventOption = () => {
              const trimmed = newCustomEventOption.value.trim()
              if (trimmed && form.customEventOptions.length < 5 && !form.customEventOptions.includes(trimmed)) {
                form.customEventOptions.push(trimmed)
                newCustomEventOption.value = ''
              }
            }

            // Remove custom event option
            const removeCustomEventOption = (index) => {
              form.customEventOptions.splice(index, 1)
            }

            // Toggle event option
            const toggleEventOption = (option) => {
              if (form.selectedEventOptions.includes(option)) {
                form.selectedEventOptions = form.selectedEventOptions.filter((opt) => opt !== option)
              } else {
                // Allow selecting more options - remove limit
                form.selectedEventOptions.push(option)
              }
            }

            // Check if event option is selected
            const isEventOptionSelected = (option) => {
              return form.selectedEventOptions.includes(option)
            }

            // Predefined event options
            const predefinedEventOptions = [
              'Live performance',
              'Food & drinks available',
              'Indoor event',
              'Outdoor event',
              'Accessible venue',
              'Family friendly',
              'Free parking',
              'VIP access',
              'Professional networking',
              'Photo opportunities',
              'Live streaming',
              'Q&A session',
              'Merchandise available',
              'Meet & greet',
              'Seating provided',
            ]

            const showDateTip = ref(false)
            const showTimeTip = ref(false)

            // Time picker variables
            const isTimePickerOpen = ref(false)
            const selectedTime = ref('07:00')
            const selectedPeriod = ref('AM')

            const timeOptions = [
              '01:00',
              '01:30',
              '02:00',
              '02:30',
              '03:00',
              '03:30',
              '04:00',
              '04:30',
              '05:00',
              '05:30',
              '06:00',
              '06:30',
              '07:00',
              '07:30',
              '08:00',
              '08:30',
              '09:00',
              '09:30',
              '10:00',
              '10:30',
              '11:00',
              '11:30',
              '12:00',
              '12:30',
            ]

            const openTimePicker = () => {
              // If there's already a time, parse it to 12-hour format for the picker
              if (form.time) {
                const [hours, minutes] = form.time.split(':')
                const hour = parseInt(hours)

                if (hour > 12) {
                  // Convert from 24-hour to 12-hour format for PM
                  selectedTime.value = `${(hour - 12).toString().padStart(2, '0')}:${minutes}`
                  selectedPeriod.value = 'PM'
                } else if (hour === 12) {
                  // 12 PM
                  selectedTime.value = `12:${minutes}`
                  selectedPeriod.value = 'PM'
                } else if (hour === 0) {
                  // 12 AM
                  selectedTime.value = `12:${minutes}`
                  selectedPeriod.value = 'AM'
                } else {
                  // Regular AM hours
                  selectedTime.value = `${hour.toString().padStart(2, '0')}:${minutes}`
                  selectedPeriod.value = 'AM'
                }
              } else {
                // Default to 7:00 AM if no time selected
                selectedTime.value = '07:00'
                selectedPeriod.value = 'AM'
              }

              isTimePickerOpen.value = true
            }

            const closeTimePicker = () => {
              isTimePickerOpen.value = false
            }

            const selectTime = (time) => {
              selectedTime.value = time
            }

            const selectPeriod = (period) => {
              selectedPeriod.value = period
            }

            const applyTimeSelection = () => {
              // Convert to 24-hour format if PM is selected
              if (selectedPeriod.value === 'PM') {
                const [hours, minutes] = selectedTime.value.split(':')
                const hour = parseInt(hours)

                // Only adjust hours that aren't already in PM format (12 PM stays as 12)
                const adjustedHour = hour === 12 ? 12 : hour + 12
                form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
              } else {
                // For AM, make sure 12 AM becomes 00:00
                const [hours, minutes] = selectedTime.value.split(':')
                const hour = parseInt(hours)
                const adjustedHour = hour === 12 ? 0 : hour
                form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
              }

              closeTimePicker()
            }

            // Date picker variables
            const isDatePickerOpen = ref(false)
            const currentYear = ref(new Date().getFullYear())
            const currentMonth = ref(new Date().getMonth())
            const selectedDate = ref(new Date())
            const tempSelectedDate = ref(null)

            // Custom time input variables
            const customHours = ref('07')
            const customMinutes = ref('00')

            // Define weekdays and month names for the calendar
            const weekdays = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
            const monthNames = [
              'January',
              'February',
              'March',
              'April',
              'May',
              'June',
              'July',
              'August',
              'September',
              'October',
              'November',
              'December',
            ]

            // Format time inputs when focus is lost
            const formatTimeInputs = () => {
              // Validate and format hours
              let formattedHours = parseInt(customHours.value) || 1
              if (formattedHours < 1) formattedHours = 1
              if (formattedHours > 12) formattedHours = 12

              // Validate and format minutes
              let formattedMinutes = parseInt(customMinutes.value) || 0
              if (formattedMinutes < 0) formattedMinutes = 0
              if (formattedMinutes > 59) formattedMinutes = 59

              // Update the ref values with formatted strings
              customHours.value = formattedHours.toString().padStart(2, '0')
              customMinutes.value = formattedMinutes.toString().padStart(2, '0')

              // Update selectedTime with formatted values
              selectedTime.value = `${formattedHours.toString().padStart(2, '0')}:${formattedMinutes.toString().padStart(2, '0')}`
            }

            // Function to prefill the form with test data
            const prefillForm = () => {
              // Generate a random event title to avoid duplicates
              const eventTypes = ['Workshop', 'Conference', 'Meetup', 'Concert', 'Festival', 'Webinar', 'Hackathon']
              const eventAdjectives = ['Amazing', 'Incredible', 'Ultimate', 'Exclusive', 'Premier', 'Annual', 'Interactive']
              const eventSubjects = ['Tech', 'Music', 'Art', 'Food', 'Business', 'Science', 'Wellness', 'Development']

              const randomTitle = `${eventAdjectives[Math.floor(Math.random() * eventAdjectives.length)]} ${
                eventSubjects[Math.floor(Math.random() * eventSubjects.length)]
              } ${eventTypes[Math.floor(Math.random() * eventTypes.length)]}`

              // Random location
              const cities = ['New York', 'San Francisco', 'Chicago', 'Los Angeles', 'Miami', 'Seattle', 'Austin', 'Boston']
              const venues = ['Convention Center', 'Concert Hall', 'Community Space', 'Hotel Ballroom', 'Outdoor Park', 'Art Gallery']
              const randomLocation = `${venues[Math.floor(Math.random() * venues.length)]}, ${
                cities[Math.floor(Math.random() * cities.length)]
              }`

              // Select a random category
              const randomCategory = categories.value[Math.floor(Math.random() * categories.value.length)].id

              // Generate random date and time (between 1-3 months in the future)
              const futureDate = new Date()
              futureDate.setDate(futureDate.getDate() + 30 + Math.floor(Math.random() * 60)) // 30-90 days in future

              const year = futureDate.getFullYear()
              const month = (futureDate.getMonth() + 1).toString().padStart(2, '0')
              const day = futureDate.getDate().toString().padStart(2, '0')
              const formattedDate = `${year}-${month}-${day}`

              // Random time (morning, afternoon, or evening)
              const hours = [9, 10, 13, 14, 18, 19]
              const randomHour = hours[Math.floor(Math.random() * hours.length)]
              const randomMinutes = ['00', '15', '30', '45'][Math.floor(Math.random() * 4)]
              const formattedTime = `${randomHour.toString().padStart(2, '0')}:${randomMinutes}`

              // Random price (free or $10-$150)
              const randomPrice = Math.random() > 0.2 ? (Math.floor(Math.random() * 14) + 1) * 10 + 0.99 : 0

              // Random ticket count
              const randomTickets = (Math.floor(Math.random() * 10) + 1) * 50

              // Random duration
              const durations = ['2 hours', '3 hours', '4 hours', 'All day', '2 days', 'Weekend']
              const randomDuration = durations[Math.floor(Math.random() * durations.length)]

              // Fill the form with the random data
              form.title = randomTitle
              form.organizer = 'Test Organizer LLC'
              form.description = `Join us for this amazing event where you'll experience the best of ${eventSubjects[Math.floor(Math.random() * eventSubjects.length)]}.

            This is a great opportunity to network with like-minded individuals and learn from industry experts. Don't miss out on this incredible experience!

            • Professional speakers
            • Networking opportunities
            • Hands-on activities
            • Refreshments provided
            • Take-home materials`

              form.location = randomLocation
              form.category = randomCategory
              form.date = formattedDate
              form.time = formattedTime
              form.price = randomPrice.toString()
              form.totalTickets = randomTickets.toString()
              form.duration = randomDuration
              form.featured = Math.random() > 0.5 // 50% chance to be featured

              // Select 3-5 random event options
              form.selectedEventOptions = []
              const shuffledOptions = [...predefinedEventOptions].sort(() => 0.5 - Math.random())
              const optionsCount = Math.floor(Math.random() * 3) + 3 // 3-5 options
              form.selectedEventOptions = shuffledOptions.slice(0, optionsCount)

              // Add 1-2 custom options
              form.customEventOptions = []
              const customOptionIdeas = [
                'Free merchandise',
                'After-party included',
                'Video recording available',
                'Certificate provided',
                'Professional photos',
                'Translation services',
                'VIP meet & greet'
              ]

              if (Math.random() > 0.5) {
                const shuffledCustomOptions = [...customOptionIdeas].sort(() => 0.5 - Math.random())
                const customCount = Math.floor(Math.random() * 2) + 1 // 1-2 custom options
                form.customEventOptions = shuffledCustomOptions.slice(0, customCount)
              }

              // Add ticket types
              form.ticketTypes = [
                {
                  name: 'General Admission',
                  price: randomPrice,
                  quantity: Math.floor(randomTickets * 0.7), // 70% of tickets
                  description: 'Standard entry ticket with access to all areas.',
                  salesEndDate: '',
                  salesEndTime: '23:59',
                  isFeatured: false
                }
              ]

              if (Math.random() > 0.3) { // 70% chance to have VIP tickets
                form.ticketTypes.push({
                  name: 'VIP Experience',
                  price: randomPrice * 2.5,
                  quantity: Math.floor(randomTickets * 0.3), // 30% of tickets
                  description: 'Premium ticket with exclusive perks and priority access.',
                  salesEndDate: '',
                  salesEndTime: '23:59',
                  isFeatured: true
                })
              }
            }

            // Prevent form submission
            const preventSubmit = (event) => {
              event.preventDefault()
            }

            // Handle form submission
            const handleSubmit = async () => {
              // Validate form
              const isValid = validateForm()

              if (!isValid) {
                // Show error message
                error.value = 'Please fill out all required fields and fix any errors'
                return
              }

              // Show loading spinner
              isSubmitting.value = true

              try {
                // Simulate API call delay
                await new Promise((resolve) => setTimeout(resolve, 1000))

                // Clear error message
                error.value = null

                // Show success message
                success.value = true

                // Reset form
                resetForm()
              } catch (err) {
                // Show error message
                error.value = 'An error occurred while submitting the form'
              } finally {
                // Hide loading spinner
                isSubmitting.value = false
              }
            }

            // Validate form
            const validateForm = () => {
              let isValid = true

              // Validate required fields
              const requiredFields = [
                'title',
                'organizer',
                'description',
                'location',
                'category',
                'date',
                'time',
                'price',
                'totalTickets',
                'duration',
              ]

              requiredFields.forEach((field) => {
                if (!form[field]) {
                  validation[field].valid = false
                  validation[field].message = 'This field is required'
                  isValid = false
                } else {
                  validation[field].valid = true
                  validation[field].message = ''
                }
              })

              // Validate subcategories
              if (form.subCategories.length === 0 && customSubCategories.value.length === 0) {
                validation.subCategories.valid = false
                validation.subCategories.message = 'Select at least one subcategory'
                isValid = false
              } else {
                validation.subCategories.valid = true
                validation.subCategories.message = ''
              }

              // Validate ticket types
              if (form.ticketTypes.length === 0) {
                validation.ticketTypes.valid = false
                validation.ticketTypes.message = 'Add at least one ticket type'
                isValid = false
              } else {
                validation.ticketTypes.valid = true
                validation.ticketTypes.message = ''
              }

              // Validate FAQs
              if (form.faqs.length === 0) {
                validation.faqs.valid = false
                validation.faqs.message = 'Add at least one FAQ'
                isValid = false
              } else {
                validation.faqs.valid = true
                validation.faqs.message = ''
              }

              // Validate images
              if (!form.mainImage) {
                validation.mainImage.valid = false
                validation.mainImage.message = 'Please upload a main image'
                isValid = false
              } else {
                validation.mainImage.valid = true
                validation.mainImage.message = ''
              }

              if (!form.bannerImage) {
                validation.bannerImage.valid = false
                validation.bannerImage.message = 'Please upload a banner image'
                isValid = false
              } else {
                validation.bannerImage.valid = true
                validation.bannerImage.message = ''
              }

              return isValid
            }

            // Apply template to ticket
            const applyTemplate = (index, template) => {
              const ticket = form.ticketTypes[index]

              // Apply template properties
              ticket.name = template.name
              ticket.price = template.price
              ticket.quantity = template.quantity
              ticket.description = template.description
              ticket.salesEndDate = template.salesEndDate
              ticket.salesEndTime = template.salesEndTime
              ticket.isFeatured = template.isFeatured
            }

            // Ticket templates
            const ticketTemplates = [
              {
                name: 'General Admission',
                price: 0,
                quantity: 100,
                description: 'Standard entry ticket with access to all areas.',
                salesEndDate: '',
                salesEndTime: '23:59',
                isFeatured: false,
              },
              {
                name: 'VIP Experience',
                price: 100,
                quantity: 50,
                description: 'Premium ticket with exclusive perks and priority access.',
                salesEndDate: '',
                salesEndTime: '23:59',
                isFeatured: true,
              },
              {
                name: 'Early Bird',
                price: 50,
                quantity: 200,
                description: 'Early access ticket with limited availability.',
                salesEndDate: '',
                salesEndTime: '23:59',
                isFeatured: false,
              },
              {
                name: 'Group Discount',
                price: 20,
                quantity: 100,
                description: 'Discounted ticket for groups of 10 or more.',
                salesEndDate: '',
                salesEndTime: '23:59',
                isFeatured: false,
              },
              {
                name: 'Student',
                price: 15,
                quantity: 200,
                description: 'Discounted ticket for students with valid ID.',
                salesEndDate: '',
                salesEndTime: '23:59',
                isFeatured: false,
              },
            ]

            // Add ticket
            const addTicket = () => {
              form.ticketTypes.push({
                name: 'New Ticket',
                price: 0,
                quantity: 100,
                description: '',
                salesEndDate: '',
                salesEndTime: '23:59',
                isFeatured: false,
              })
            }

            // Remove ticket
            const removeTicket = (index) => {
              form.ticketTypes.splice(index, 1)
            }

            // Open ticket modal
            const openTicketModal = (index) => {
              activeTicketIndex.value = index
              showTicketModal.value = true
              document.body.style.overflow = 'hidden' // Prevent background scrolling
            }

            // Close ticket modal
            const closeTicketModal = () => {
              showTicketModal.value = false
              document.body.style.overflow = '' // Re-enable scrolling
            }

            // Apply ticket changes
            const applyTicketChanges = () => {
              closeTicketModal()
            }

            // Toggle featured ticket
            const toggleFeaturedTicket = (index) => {
              form.ticketTypes[index].isFeatured = !form.ticketTypes[index].isFeatured
            }

            // Toggle featured event
            const toggleFeaturedEvent = () => {
              form.featured = !form.featured
            }

            // Handle date input
            const handleDateInput = (event) => {
              const input = event.target
              const value = input.value

              // Remove non-numeric characters
              const numericValue = value.replace(/[^0-9]/g, '')

              // Limit to 8 characters (YYYYMMDD)
              const truncatedValue = numericValue.slice(0, 8)

              // Format as YYYY-MM-DD
              const formattedValue = truncatedValue.replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3')

              // Update input value
              input.value = formattedValue

              // Update form value
              form.date = formattedValue
            }

            // Handle time input
            const handleTimeInput = (event) => {
              const input = event.target
              const value = input.value

              // Remove non-numeric characters
              const numericValue = value.replace(/[^0-9]/g, '')

              // Limit to 4 characters (HHMM)
              const truncatedValue = numericValue.slice(0, 4)

              // Format as HH:MM
              const formattedValue = truncatedValue.replace(/(\d{2})(\d{2})/, '$1:$2')

              // Update input value
              input.value = formattedValue

              // Update form value
              form.time = formattedValue
            }

            // Handle price input
            const handlePriceInput = (event) => {
              const input = event.target
              const value = input.value

              // Remove non-numeric characters
              const numericValue = value.replace(/[^0-9.]/g, '')

              // Limit to 6 characters (999.99)
              const truncatedValue = numericValue.slice(0, 6)

              // Update input value
              input.value = truncatedValue

              // Update form value
              form.price = truncatedValue
            }

            // Handle total tickets input
            const handleTotalTicketsInput = (event) => {
              const input = event.target
              const value = input.value

              // Remove non-numeric characters
              const numericValue = value.replace(/[^0-9]/g, '')

              // Limit to 5 characters (99999)
              const truncatedValue = numericValue.slice(0, 5)

              // Update input value
              input.value = truncatedValue

              // Update form value
              form.totalTickets = truncatedValue
            }

            // Handle duration input
            const handleDurationInput = (event) => {
              const input = event.target
              const value = input.value

              // Remove non-numeric characters
              const numericValue = value.replace(/[^0-9]/g, '')

              // Limit to 2 characters (99)
              const truncatedValue = numericValue.slice(0, 2)

              // Update input value
              input.value = truncatedValue

              // Update form value
              form.duration = truncatedValue
            }

            // Handle description input
            const handleDescriptionInput = (event) => {
              const input = event.target
              const value = input.value

              // Limit to 500 characters
              const truncatedValue = value.slice(0, 500)

              // Update input value
              input.value = truncatedValue

              // Update form value
              form.description = truncatedValue
            }

            // Handle location input
            const handleLocationInput = (event) => {
              const input = event.target
              const value = input.value

              // Limit to 100 characters
              const truncatedValue = value.slice(0, 100)

              // Update input value
              input.value = truncatedValue

              // Update form value
              form.location = truncatedValue
            }

            // Handle organizer input
            const handleOrganizerInput = (event) => {
              const input = event.target
              const value = input.value

              // Limit to 100 characters
              const truncatedValue = value.slice(0, 100)

              // Update input value
              input.value = truncatedValue

              // Update form value
              form.organizer = truncatedValue
            }

            // Handle title input
            const handleTitleInput = (event) => {
              const input = event.target
              const value = input.value

              // Limit to 100 characters
              const truncatedValue = value.slice(0, 100)

              // Update input value
              input.value = truncatedValue

              // Update form value
              form.title = truncatedValue
            }

            // Handle custom subcategory input
            const handleCustomSubCategoryInput = (event) => {
              const input = event.target
              const value = input.value

              // Limit to 50 characters
              const truncatedValue = value.slice(0, 50)

              // Update input value
              input.value = truncatedValue

              // Update form value
              newCustomSubCategory.value = truncatedValue
            }

            // Handle custom event option input
            const handleCustomEventOptionInput = (event) => {
              const input = event.target
              const value = input.value

              // Limit to 50 characters
              const truncatedValue = value.slice(0, 50)

              // Update input value
              input.value = truncatedValue

              // Update form value
              newCustomEventOption.value = truncatedValue
            }

            // Handle ticket name input
            const handleTicketNameInput = (event, index) => {
              const input = event.target
              const value = input.value

              // Limit to 50 characters
              const truncatedValue = value.slice(0, 50)

              // Update input value
              input.value = truncatedValue

              // Update form value
              form.ticketTypes[index].name = truncatedValue
            }

            // Handle ticket price input
            const handleTicketPriceInput = (event, index) => {
              const input = event.target
              const value = input.value

              // Remove non-numeric characters
              const numericValue = value.replace(/[^0-9.]/g, '')

              // Limit to 6 characters (999.99)
              const truncatedValue = numericValue.slice(0, 6)

              // Update input value
              input.value = truncatedValue

              // Update form value
              form.ticketTypes[index].price = truncatedValue
            }

            // Handle ticket quantity input
            const handleTicketQuantityInput = (event, index) => {
              const input = event.target
              const value = input.value

              // Remove non-numeric characters
              const numericValue = value.replace(/[^0-9]/g, '')

              // Limit to 5 characters (99999)
              const truncatedValue = numericValue.slice(0, 5)

              // Update input value
              input.value = truncatedValue

              // Update form value
              form.ticketTypes[index].quantity = truncatedValue
            }

            // Handle ticket description input
            const handleTicketDescriptionInput = (event, index) => {
              const input = event.target
              const value = input.value

              // Limit to 500 characters
              const truncatedValue = value.slice(0, 500)

              // Update input value
              input.value = truncatedValue

              // Update form value
              form.ticketTypes[index].description = truncatedValue
            }

            // Handle ticket sales end date input
            const handleTicketSalesEndDateInput = (event, index) => {
              const input = event.target
              const value = input.value

              // Remove non-numeric characters
              const numericValue = value.replace(/[^0-9]/g, '')

              // Limit to 8 characters (YYYYMMDD)
              const truncatedValue = numericValue.slice(0, 8)

              // Format as YYYY-MM-DD
              const formattedValue = truncatedValue.replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3')

              // Update input value
              input.value = formattedValue

              // Update form value
              form.ticketTypes[index].salesEndDate = formattedValue
            }

            // Handle ticket sales end time input
            const handleTicketSalesEndTimeInput = (event, index) => {
              const input = event.target
              const value = input.value

              // Remove non-numeric characters
              const numericValue = value.replace(/[^0-9]/g, '')

              // Limit to 4 characters (HHMM)
              const truncatedValue = numericValue.slice(0, 4)

              // Format as HH:MM
              const formattedValue = truncatedValue.replace(/(\d{2})(\d{2})/, '$1:$2')

              // Update input value
              input.value = formattedValue

              // Update form value
              form.ticketTypes[index].salesEndTime = formattedValue
            }

            // Handle FAQ question input
            const handleFaqQuestionInput = (event, index) => {
              const input = event.target
              const value = input.value

              // Limit to 200 characters
              const truncatedValue = value.slice(0, 200)

              // Update input value
              input.value = truncatedValue

              // Update form value
              form.faqs[index].question = truncatedValue
            }

            // Handle FAQ answer input
            const handleFaqAnswerInput = (event, index) => {
              const input = event.target
              const value = input.value

              // Limit to 500 characters
              const truncatedValue = value.slice(0, 500)

              // Update input value
              input.value = truncatedValue

              // Update form value
              form.faqs[index].answer = truncatedValue
            }

            // Handle custom time input
            const handleCustomTimeInput = (event) => {
              const input = event.target
              const value = input.value

              // Remove non-numeric characters
              const numericValue = value.replace(/[^0-9]/g, '')

              // Limit to 4 characters (HHMM)
              const truncatedValue = numericValue.slice(0, 4)

              // Format as HH:MM
              const formattedValue = truncatedValue.replace(/(\d{2})(\d{2})/, '$1:$2')

              // Update input value
              input.value = formattedValue

              // Update selectedTime
              selectedTime.value = formattedValue
            }

            // Handle custom time blur
            const handleCustomTimeBlur = () => {
              // Format time inputs
              formatTimeInputs()

              // Apply time selection
              applyTimeSelection()
            }

            // Handle custom time keydown
            const handleCustomTimeKeydown = (event) => {
              if (event.key === 'Enter') {
                // Format time inputs
                formatTimeInputs()

                // Apply time selection
                applyTimeSelection()
              }
            }

            // Handle custom time colon input
            const handleCustomTimeColonInput = () => {
              // Move focus to minutes input
              customMinutes.value = ''
              const minutesInput = document.getElementById('customMinutes')
              if (minutesInput) minutesInput.focus()
            }

            // Handle custom hours input
            const handleCustomHoursInput = (event) => {
              const input = event.target
              const value = input.value

              // Remove non-numeric characters
              const numericValue = value.replace(/[^0-9]/g, '')

              // Limit to 2 characters (HH)
              const truncatedValue = numericValue.slice(0, 2)

              // Update input value
              input.value = truncatedValue

              // Update customHours
              customHours.value = truncatedValue

              // If 2 digits entered, move focus to minutes
              if (truncatedValue.length === 2) {
                customMinutes.value = ''
                const minutesInput = document.getElementById('customMinutes')
                if (minutesInput) minutesInput.focus()
              }
            }

            // Handle custom minutes input
            const handleCustomMinutesInput = (event) => {
              const input = event.target
              const value = input.value

              // Remove non-numeric characters
              const numericValue = value.replace(/[^0-9]/g, '')

              // Limit to 2 characters (MM)
              const truncatedValue = numericValue.slice(0, 2)

              // Update input value
              input.value = truncatedValue

              // Update customMinutes
              customMinutes.value = truncatedValue

              // If 2 digits entered, format and apply time
              if (truncatedValue.length === 2) {
                formatTimeInputs()
                applyTimeSelection()
              }
            }

            // Handle custom hours blur
            const handleCustomHoursBlur = () => {
              // If only 1 digit, pad with leading zero
              if (customHours.value.length === 1) {
                customHours.value = customHours.value.padStart(2, '0')
              }
            }

            // Handle custom minutes blur
            const handleCustomMinutesBlur = () => {
              // If only 1 digit, pad with leading zero
              if (customMinutes.value.length === 1) {
                customMinutes.value = customMinutes.value.padStart(2, '0')
              }

              // Format and apply time
              formatTimeInputs()
              applyTimeSelection()
            }

            // Handle custom hours focus
            const handleCustomHoursFocus = (event) => {
              const input = event.target
              input.select()
            }

            // Handle custom minutes focus
            const handleCustomMinutesFocus = (event) => {
              const input = event.target
              input.select()
            }

            // Handle custom hours keydown
            const handleCustomHoursKeydown = (event) => {
              if (event.key === ':') {
                event.preventDefault()
                handleCustomTimeColonInput()
              }
            }

            // Handle custom minutes keydown
            const handleCustomMinutesKeydown = (event) => {
              if (event.key === 'Enter') {
                formatTimeInputs()
                applyTimeSelection()
              }
            }

            // Handle custom time input change
            const handleCustomTimeInputChange = () => {
              // If hours or minutes are empty, clear the time
              if (!customHours.value || !customMinutes.value) {
                selectedTime.value = ''
                form.time = ''
              }
            }

            // Handle custom time input click
            const handleCustomTimeInputClick = () => {
              // If time is already set, split it into hours and minutes
              if (form.time) {
                const [hours, minutes] = form.time.split(':')
                customHours.value = hours
                customMinutes.value = minutes
              }
            }

            // Handle custom time period change
            const handleCustomTimePeriodChange = () => {
              // If time is already set, convert it to the selected period
              if (form.time) {
                const [hours, minutes] = form.time.split(':')
                let adjustedHours = parseInt(hours)

                if (selectedPeriod.value === 'PM' && adjustedHours < 12) {
                  adjustedHours += 12
                } else if (selectedPeriod.value === 'AM' && adjustedHours === 12) {
                  adjustedHours = 0
                }

                form.time = `${adjustedHours.toString().padStart(2, '0')}:${minutes}`
              }
            }

            <template>
              <div class="create-event">
                <div class="container">
                  <router-link to="/" class="back-link">
                    <svg
                      width="20"
                      height="20"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M19 12H5"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M12 19L5 12L12 5"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                    <span>BACK</span>
                  </router-link>

                  <div class="create-event__header">
                    <h1 class="create-event__title">Make Your Event dYZ%</h1>
                    <p class="create-event__subtitle">Fill out this form to create your event - it's easy!</p>
                    <button type="button" @click="prefillForm" class="prefill-button">
                      Prefill with Test Data
                    </button>
                  </div>

                  <div v-if="error" class="create-event__alert create-event__alert--error">
                    {{ error }}
                  </div>

                  <div v-if="success" class="create-event__alert create-event__alert--success">
                    Event created successfully! Redirecting to event page...
                  </div>

                  <form @submit.prevent="handleSubmit" class="create-event__form">
                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Event Information
                      </h2>

                      <div class="form-group">
                        <label for="title" class="form-label">Event Name</label>
                        <input
                          id="title"
                          v-model="form.title"
                          type="text"
                          class="form-input"
                          :class="{ 'form-input--error': !validation.title.valid }"
                          placeholder="What's your event called?"
                        />
                        <p v-if="!validation.title.valid" class="form-error">{{ validation.title.message }}</p>
                        <p v-else class="form-helper">Name it something people will understand right away</p>
                      </div>

                      <div class="form-group">
                        <label for="organizer" class="form-label">Organizer Name</label>
                        <input
                          id="organizer"
                          v-model="form.organizer"
                          type="text"
                          class="form-input"
                          :class="{ 'form-input--error': !validation.organizer.valid }"
                          placeholder="Who's hosting this?"
                        />
                        <p v-if="!validation.organizer.valid" class="form-error">
                          {{ validation.organizer.message }}
                        </p>
                      </div>

                      <div class="form-group">
                        <label for="category" class="form-label">Event Category</label>
                        <select
                          id="category"
                          v-model="form.category"
                          class="form-select"
                          :class="{ 'form-input--error': !validation.category.valid }"
                        >
                          <option value="" disabled>Select a category</option>
                          <option v-for="category in categories" :key="category.id" :value="category.id">
                            {{ category.name }}
                          </option>
                        </select>
                        <p v-if="!validation.category.valid" class="form-error">
                          {{ validation.category.message }}
                        </p>
                        <p v-else class="form-helper">The right category helps people find your event</p>
                      </div>

                      <div class="form-group">
                        <label class="form-label">Sub Categories</label>
                        <div class="subcategories-display">
                          <div class="selected-subcategories">
                            <div v-if="displayedSubCategories.length === 0" class="no-subcategories">
                              No subcategories selected
                            </div>
                            <div
                              v-for="(subCat, index) in displayedSubCategories"
                              :key="index"
                              class="selected-subcategory"
                            >
                              <span>{{ getSubCategoryName(subCat) }}</span>
                              <button
                                type="button"
                                @click="removeSubCategoryById(subCat)"
                                class="remove-subcategory-btn"
                                aria-label="Remove subcategory"
                              >
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>
                          <button
                            type="button"
                            @click="openSubCategoryModal"
                            class="manage-subcategories-btn"
                            :disabled="form.category === ''"
                          >
                            <svg
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M12 5V19"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                              />
                              <path
                                d="M5 12H19"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                              />
                            </svg>
                            <span>{{ displayedSubCategories.length ? 'Edit' : 'Add' }} Subcategories</span>
                          </button>
                        </div>
                        <p v-if="!validation.subCategories.valid" class="form-error">
                          {{ validation.subCategories.message }}
                        </p>
                        <p v-else class="form-helper">
                          Add up to 5 subcategories to describe your event better
                        </p>
                      </div>

                      <div class="form-group">
                        <label for="description" class="form-label">Event Description</label>
                        <textarea
                          id="description"
                          v-model="form.description"
                          class="form-textarea"
                          :class="{ 'form-input--error': !validation.description.valid }"
                          placeholder="Tell people what makes your event special..."
                          rows="5"
                        ></textarea>
                        <p v-if="!validation.description.valid" class="form-error">
                          {{ validation.description.message }}
                        </p>
                        <p v-else class="form-helper">Tell people what will happen at your event</p>
                      </div>

                      <div class="form-group">
                        <label class="form-label">Event Images</label>
                        <div class="image-upload-container">
                          <div class="image-upload-row">
                            <div
                              class="image-upload-dropzone"
                              :class="{ 'has-image': mainImagePreview }"
                              @click="triggerMainImageUpload"
                              @dragover.prevent
                              @drop.prevent="handleMainImageDrop"
                            >
                              <img
                                v-if="mainImagePreview"
                                :src="mainImagePreview"
                                alt="Main image preview"
                                class="preview-image"
                              />
                              <div v-if="mainImagePreview" class="image-overlay">
                                <button type="button" class="remove-image-btn" @click.stop="removeMainImage">
                                  <svg
                                    width="20"
                                    height="20"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M18 6L6 18"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                    <path
                                      d="M6 6L18 18"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                  </svg>
                                  <span>Remove</span>
                                </button>
                              </div>
                              <div v-else class="upload-placeholder">
                                <div class="upload-icon">
                                  <svg
                                    width="32"
                                    height="32"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <rect
                                      x="3"
                                      y="3"
                                      width="18"
                                      height="18"
                                      rx="2"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                    />
                                    <path
                                      d="M3 16L7 12C7.94 11.06 9.44 11.06 10.38 12L16.5 18"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                    />
                                    <path
                                      d="M14 16L16 14C16.94 13.06 18.44 13.06 19.38 14L21 15.5"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                    />
                                    <circle cx="9" cy="8" r="2" stroke="currentColor" stroke-width="1.5" />
                                  </svg>
                                </div>
                                <div class="upload-text">
                                  <span class="primary-text">Main Event Image</span>
                                  <span class="secondary-text">Drag & drop or click to upload</span>
                                </div>
                              </div>
                            </div>

                            <div
                              class="image-upload-dropzone banner-dropzone"
                              :class="{ 'has-image': bannerImagePreview }"
                              @click="triggerBannerImageUpload"
                              @dragover.prevent
                              @drop.prevent="handleBannerImageDrop"
                            >
                              <img
                                v-if="bannerImagePreview"
                                :src="bannerImagePreview"
                                alt="Banner image preview"
                                class="preview-image"
                              />
                              <div v-if="bannerImagePreview" class="image-overlay">
                                <button type="button" class="remove-image-btn" @click.stop="removeBannerImage">
                                  <svg
                                    width="20"
                                    height="20"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M18 6L6 18"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                    <path
                                      d="M6 6L18 18"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                  </svg>
                                  <span>Remove</span>
                                </button>
                              </div>
                              <div v-else class="upload-placeholder">
                                <div class="upload-icon">
                                  <svg
                                    width="32"
                                    height="32"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <rect
                                      x="2"
                                      y="4"
                                      width="20"
                                      height="13"
                                      rx="2"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                    />
                                    <path
                                      d="M2 13L6 9C6.94 8.06 8.44 8.06 9.38 9L15.5 15"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                    />
                                    <path
                                      d="M14 13L16 11C16.94 10.06 18.44 10.06 19.38 11L22 13.5"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                    />
                                    <circle cx="8" cy="7" r="1.5" stroke="currentColor" stroke-width="1.5" />
                                  </svg>
                                </div>
                                <div class="upload-text">
                                  <span class="primary-text">Banner Image</span>
                                  <span class="secondary-text">Drag & drop or click to upload</span>
                                </div>
                              </div>
                            </div>
                          </div>

                          <div class="image-inputs">
                            <input
                              id="mainImage"
                              ref="mainImageInput"
                              type="file"
                              class="image-input"
                              accept="image/*"
                              @change="handleMainImageUpload"
                            />
                            <input
                              id="bannerImage"
                              ref="bannerImageInput"
                              type="file"
                              class="image-input"
                              accept="image/*"
                              @change="handleBannerImageUpload"
                            />
                          </div>
                        </div>
                        <p
                          v-if="!validation.mainImage.valid || !validation.bannerImage.valid"
                          class="form-error"
                        >
                          {{
                            !validation.mainImage.valid
                              ? validation.mainImage.message
                              : validation.bannerImage.message
                          }}
                        </p>
                        <p v-else class="form-helper">
                          Upload images for your event. The main image will appear on cards throughout the site,
                          while the banner will be displayed on your event's detail page.
                        </p>
                      </div>
                    </div>

                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Date & Time
                      </h2>

                      <div class="form-row">
                        <div class="form-group">
                          <label for="date" class="form-label">Event Date</label>
                          <div class="date-picker-wrapper">
                            <input
                              id="date"
                              v-model="form.date"
                              type="text"
                              readonly
                              class="form-input date-input"
                              :class="{ 'form-input--error': !validation.date.valid }"
                              :min="today"
                              @click="openDatePicker"
                            />
                            <div v-if="showDateTip" class="picker-tip">
                              <div class="tip-arrow"></div>
                              <div class="tip-content">
                                <p>Click to open calendar</p>
                                <span>Select a date for your event</span>
                              </div>
                            </div>
                          </div>
                          <p v-if="!validation.date.valid" class="form-error">{{ validation.date.message }}</p>
                          <p v-else class="form-helper">Click to open the calendar</p>
                        </div>

                        <div class="form-group">
                          <label for="time" class="form-label">Start Time</label>
                          <div class="time-picker-wrapper">
                            <input
                              id="time"
                              v-model="form.time"
                              type="text"
                              readonly
                              class="form-input time-input"
                              :class="{ 'form-input--error': !validation.time.valid }"
                              @click="openTimePicker"
                              placeholder="Select a time"
                            />
                            <div v-if="showTimeTip" class="picker-tip">
                              <div class="tip-arrow"></div>
                              <div class="tip-content">
                                <p>Click to select time</p>
                                <span>Use our easy time selector</span>
                              </div>
                            </div>
                          </div>
                          <p v-if="!validation.time.valid" class="form-error">{{ validation.time.message }}</p>
                          <p v-else class="form-helper">Click to open time selector</p>
                        </div>
                      </div>

                      <div class="form-group">
                        <label for="duration" class="form-label">Event Duration</label>
                        <select id="duration" v-model="form.duration" class="form-select">
                          <option value="" disabled>Select duration</option>
                          <option v-for="option in durationOptions" :key="option" :value="option">
                            {{ option }}
                          </option>
                        </select>
                        <p class="form-helper">Tell people how long your event will last</p>
                      </div>
                    </div>

                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Location Details
                      </h2>

                      <div class="form-group">
                        <label for="location" class="form-label">Venue Name & Address</label>
                        <input
                          id="location"
                          v-model="form.location"
                          type="text"
                          class="form-input"
                          :class="{ 'form-input--error': !validation.location.valid }"
                          placeholder="Where is your event happening?"
                        />
                        <p v-if="!validation.location.valid" class="form-error">
                          {{ validation.location.message }}
                        </p>
                        <p v-else class="form-helper">Add the full address so people can find your event</p>
                      </div>

                      <div class="location-map-placeholder">
                        <div class="location-map-content">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          >
                            <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                            <circle cx="12" cy="10" r="3"></circle>
                          </svg>
                          <p>Maps coming soon</p>
                        </div>
                      </div>
                    </div>

                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Ticket Information
                      </h2>

                      <div v-if="!validation.ticketTypes.valid" class="form-error ticket-types-error">
                        {{ validation.ticketTypes.message }}
                      </div>

                      <div class="ticket-types-container">
                        <div v-for="(ticket, index) in form.ticketTypes" :key="index" class="ticket-type-card">
                          <div class="ticket-type-header">
                            <h3 class="ticket-type-title">Ticket #{{ index + 1 }}</h3>
                            <div class="ticket-type-actions">
                              <button
                                type="button"
                                @click="duplicateTicketType(index)"
                                class="ticket-action-btn ticket-action-duplicate"
                                title="Duplicate ticket"
                              >
                                <svg
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <rect
                                    x="9"
                                    y="9"
                                    width="13"
                                    height="13"
                                    rx="2"
                                    stroke="currentColor"
                                    stroke-width="2"
                                  />
                                  <path
                                    d="M5 15H4C2.89543 15 2 14.1046 2 13V4C2 2.89543 2.89543 2 4 2H13C14.1046 2 15 2.89543 15 4V5"
                                    stroke="currentColor"
                                    stroke-width="2"
                                  />
                                </svg>
                              </button>
                              <button
                                type="button"
                                @click="removeTicketType(index)"
                                class="ticket-action-btn ticket-action-remove"
                                title="Remove ticket"
                                :disabled="form.ticketTypes.length <= 1"
                              >
                                <svg
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>

                          <div class="form-group">
                            <label :for="'ticket-name-' + index" class="form-label">Ticket Name</label>
                            <div class="ticket-name-input-wrapper">
                              <input
                                :id="'ticket-name-' + index"
                                v-model="ticket.name"
                                type="text"
                                class="form-input"
                                placeholder="e.g. Early Bird, VIP, General Admission"
                              />
                              <div class="ticket-template-dropdown">
                                <button
                                  type="button"
                                  class="ticket-template-btn"
                                  @click="openTemplateModal(index)"
                                >
                                  <span>Templates</span>
                                  <svg
                                    width="14"
                                    height="14"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M6 9L12 15L18 9"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                  </svg>
                                </button>
                                <div class="ticket-template-options">
                                  <button
                                    v-for="template in ticketTemplates"
                                    :key="template.name"
                                    type="button"
                                    class="ticket-template-option"
                                    @click="applyTemplate(index, template)"
                                  >
                                    {{ template.name }}
                                  </button>
                                </div>
                              </div>
                            </div>
                          </div>

                          <div class="form-row">
                            <div class="form-group">
                              <label :for="'ticket-price-' + index" class="form-label">Price ($)</label>
                              <input
                                :id="'ticket-price-' + index"
                                v-model.number="ticket.price"
                                type="number"
                                min="0"
                                step="0.01"
                                class="form-input"
                                placeholder="0.00"
                              />
                            </div>

                            <div class="form-group">
                              <label :for="'ticket-quantity-' + index" class="form-label">Quantity</label>
                              <input
                                :id="'ticket-quantity-' + index"
                                v-model.number="ticket.quantity"
                                type="number"
                                min="1"
                                class="form-input"
                                placeholder="10"
                              />
                            </div>
                          </div>

                          <div class="form-group">
                            <label :for="'ticket-description-' + index" class="form-label"
                              >Description (Optional)</label
                            >
                            <textarea
                              :id="'ticket-description-' + index"
                              v-model="ticket.description"
                              class="form-textarea ticket-description"
                              rows="2"
                              placeholder="Describe what's included with this ticket"
                            ></textarea>
                          </div>

                          <div class="ticket-sales-period">
                            <h4 class="ticket-section-subtitle">Sales End Date</h4>
                            <p class="ticket-section-helper">
                              Should this ticket type have a deadline? If yes, tell us when sales should stop.
                              This is optional.
                            </p>

                            <div class="form-row">
                              <div class="form-group">
                                <label :for="'ticket-end-date-' + index" class="form-label">Date</label>
                                <input
                                  :id="'ticket-end-date-' + index"
                                  v-model="ticket.salesEndDate"
                                  type="date"
                                  class="form-input"
                                  :min="today"
                                  :max="form.date"
                                />
                              </div>

                              <div class="form-group">
                                <label :for="'ticket-end-time-' + index" class="form-label">Time</label>
                                <input
                                  :id="'ticket-end-time-' + index"
                                  v-model="ticket.salesEndTime"
                                  type="time"
                                  class="form-input"
                                />
                              </div>
                            </div>
                          </div>

                          <div class="form-checkbox-wrapper">
                            <input
                              :id="'ticket-featured-' + index"
                              v-model="ticket.isFeatured"
                              type="checkbox"
                              class="form-checkbox"
                            />
                            <label :for="'ticket-featured-' + index" class="form-checkbox-label">
                              Feature this ticket (highlighted in the ticket selection)
                            </label>
                          </div>
                        </div>

                        <button type="button" @click="addTicketType" class="add-ticket-type-btn">
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 5V19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                            <path
                              d="M5 12H19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                          <span>Add Another Ticket Type</span>
                        </button>
                      </div>
                    </div>

                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Event Options
                      </h2>

                      <p class="section-intro">
                        Select features and amenities that your event offers to help attendees know what to
                        expect.
                      </p>

                      <div class="event-options-container">
                        <div class="event-options-grid">
                          <!-- Predefined event options -->
                          <div
                            v-for="option in predefinedEventOptions"
                            :key="'predefined-' + option"
                            class="event-option-item"
                            @click="toggleEventOption(option)"
                          >
                            <div
                              class="event-option-checkbox"
                              :class="{ 'event-option-checkbox--selected': isEventOptionSelected(option) }"
                            >
                              <div class="event-option-label">{{ option }}</div>
                              <svg
                                v-if="isEventOptionSelected(option)"
                                width="16"
                                height="16"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                                class="event-option-checkmark"
                              >
                                <path
                                  d="M20 6L9 17L4 12"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </div>
                          </div>

                          <!-- Custom event options -->
                          <div
                            v-for="(option, index) in form.customEventOptions"
                            :key="'custom-' + index"
                            class="event-option-item"
                          >
                            <div class="event-option-checkbox event-option-checkbox--selected">
                              <div class="event-option-label">{{ option }}</div>
                              <button
                                type="button"
                                @click="removeCustomEventOption(index)"
                                class="remove-option-btn"
                                aria-label="Remove option"
                              >
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>
                        </div>

                        <div class="add-event-option">
                          <div class="custom-event-option-input">
                            <input
                              type="text"
                              v-model="newCustomEventOption"
                              placeholder="Add your own event option..."
                              class="form-input custom-option-input"
                              @keyup.enter="addCustomEventOption"
                            />
                            <button
                              type="button"
                              class="add-custom-option-btn"
                              @click="addCustomEventOption"
                              :disabled="!newCustomEventOption.trim()"
                            >
                              Add
                            </button>
                          </div>
                        </div>
                      </div>

                      <div class="form-checkbox-wrapper mt-4">
                        <input id="featured" v-model="form.featured" type="checkbox" class="form-checkbox" />
                        <label for="featured" class="form-checkbox-label">
                          Feature this event (additional promotion fee may apply)
                        </label>
                      </div>
                      <p class="form-helper">Featured events show up on the homepage</p>
                    </div>

                    <!-- Add new FAQ section -->
                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Frequently Asked Questions
                        <span class="section-optional">(Optional)</span>
                      </h2>

                      <p class="section-intro">
                        Help attendees by answering common questions about your event. You can edit these
                        defaults or add your own.
                      </p>

                      <div class="faq-container">
                        <div v-for="(faq, index) in form.faqs" :key="index" class="faq-item">
                          <div class="faq-header">
                            <h3 class="faq-number">Q{{ index + 1 }}</h3>
                            <div class="faq-actions">
                              <button
                                type="button"
                                @click="removeFaq(index)"
                                class="faq-action-btn faq-action-remove"
                                title="Remove question"
                              >
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>

                          <div class="faq-content">
                            <div class="form-group">
                              <label :for="'faq-question-' + index" class="form-label">Question</label>
                              <input
                                :id="'faq-question-' + index"
                                v-model="faq.question"
                                type="text"
                                class="form-input"
                                placeholder="Enter a question guests might ask"
                              />
                            </div>

                            <div class="form-group">
                              <label :for="'faq-answer-' + index" class="form-label">Answer</label>
                              <textarea
                                :id="'faq-answer-' + index"
                                v-model="faq.answer"
                                class="form-textarea faq-answer"
                                rows="3"
                                placeholder="Provide a clear answer to the question"
                              ></textarea>
                            </div>
                          </div>
                        </div>

                        <button type="button" @click="addFaq" class="add-faq-btn">
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 5V19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                            <path
                              d="M5 12H19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                          <span>Add Another Question</span>
                        </button>
                      </div>
                    </div>

                    <div class="form-actions">
                      <button type="button" @click="resetForm" class="btn-secondary" :disabled="isSubmitting">
                        Reset Form
                      </button>
                      <button type="submit" class="btn-primary" :disabled="isSubmitting">
                        <span v-if="isSubmitting">
                          <svg class="spinner" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="12" cy="12" r="10" fill="none" stroke-width="3" />
                          </svg>
                          Creating Event...
                        </span>
                        <span v-else>Create Event</span>
                      </button>
                    </div>
                  </form>

                  <div class="create-event__note">
                    <p>
                      <strong>Note:</strong> Your event data is saved locally for now. Online saving coming
                      soon.
                    </p>
                  </div>
                </div>

                <div
                  v-if="showTemplateModal"
                  class="ticket-template-modal-overlay"
                  @click.self="closeTemplateModal"
                >
                  <div class="ticket-template-modal">
                    <div class="ticket-template-modal-header">
                      <h3>Choose a Ticket Template</h3>
                      <button @click="closeTemplateModal" class="modal-close-btn" aria-label="Close">
                        <svg
                          width="20"
                          height="20"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M18 6L6 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M6 6L18 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>
                    <div class="ticket-template-modal-body">
                      <div
                        v-for="template in ticketTemplates"
                        :key="template.name"
                        class="template-card"
                        @click="applyTemplateFromModal(activeTicketIndex, template)"
                      >
                        <div class="template-card-content">
                          <h4 class="template-name">{{ template.name }}</h4>
                          <p class="template-description">{{ template.description }}</p>
                        </div>
                        <div class="template-card-icon">
                          <svg
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M20 6L9 17L4 12"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Add subcategory modal -->
                <div
                  v-if="showSubCategoryModal"
                  class="subcategory-modal-overlay"
                  @click.self="closeSubCategoryModal"
                >
                  <div class="subcategory-modal">
                    <div class="subcategory-modal-header">
                      <h3>Select or Add Subcategories</h3>
                      <button @click="closeSubCategoryModal" class="modal-close-btn" aria-label="Close">
                        <svg
                          width="20"
                          height="20"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M18 6L6 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M6 6L18 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>
                    <div class="subcategory-modal-body">
                      <p class="subcategory-modal-info">Select up to 5 subcategories or add your own</p>

                      <div class="subcategory-search">
                        <input
                          type="text"
                          v-model="subcategorySearchTerm"
                          placeholder="Search subcategories..."
                          class="subcategory-search-input"
                        />
                      </div>

                      <div class="subcategory-options">
                        <div class="subcategory-section">
                          <h4 class="subcategory-section-title">Available Subcategories</h4>
                          <div class="subcategory-chips">
                            <div
                              v-for="subCategory in filteredSubCategories"
                              :key="subCategory.id"
                              class="subcategory-chip"
                              :class="{ 'subcategory-chip--selected': isSubCategorySelected(subCategory.id) }"
                              @click="toggleSubCategory(subCategory.id)"
                            >
                              <span>{{ subCategory.name }}</span>
                              <svg
                                v-if="isSubCategorySelected(subCategory.id)"
                                width="16"
                                height="16"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M20 6L9 17L4 12"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </div>
                          </div>
                        </div>

                        <div class="subcategory-section">
                          <h4 class="subcategory-section-title">Custom Subcategories</h4>
                          <div class="custom-subcategory-input">
                            <input
                              type="text"
                              v-model="newCustomSubCategory"
                              placeholder="Enter your own subcategory..."
                              class="form-input custom-input"
                              @keyup.enter="addCustomSubCategory"
                            />
                            <button
                              type="button"
                              class="add-custom-btn"
                              @click="addCustomSubCategory"
                              :disabled="!newCustomSubCategory.trim()"
                            >
                              Add
                            </button>
                          </div>

                          <div class="subcategory-chips custom-chips">
                            <div
                              v-for="(custom, index) in customSubCategories"
                              :key="'custom-' + index"
                              class="subcategory-chip subcategory-chip--custom"
                            >
                              <span>{{ custom }}</span>
                              <button
                                class="remove-custom-btn"
                                @click="removeCustomSubCategory(index)"
                                aria-label="Remove"
                              >
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>

                      <div class="subcategory-modal-footer">
                        <div class="subcategory-summary">
                          <span class="subcategory-count">{{ selectedSubCategoriesCount }}/5 selected</span>
                        </div>
                        <div class="subcategory-actions">
                          <button type="button" class="btn-secondary" @click="closeSubCategoryModal">
                            Cancel
                          </button>
                          <button type="button" class="btn-primary" @click="confirmSubCategories">Apply</button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Custom Time Picker Modal -->
                <div v-if="isTimePickerOpen" class="time-picker-overlay" @click.self="closeTimePicker">
                  <div class="time-picker-modal">
                    <div class="time-picker-header">
                      <h3>Select Time</h3>
                      <button type="button" class="time-picker-close" @click="closeTimePicker">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M18 6L6 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M6 6L18 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>
                    <div class="time-picker-body">
                      <!-- Custom time input -->
                      <div class="custom-time-input">
                        <div class="time-input-group">
                          <input
                            type="text"
                            v-model="customHours"
                            class="time-input-field"
                            maxlength="2"
                            @focus="$event.target.select()"
                            @blur="formatTimeInputs"
                            @keydown="handleTimeInput"
                            placeholder="HH"
                          />
                          <span class="time-divider">:</span>
                          <input
                            type="text"
                            v-model="customMinutes"
                            class="time-input-field"
                            maxlength="2"
                            @focus="$event.target.select()"
                            @blur="formatTimeInputs"
                            @keydown="handleTimeInput"
                            placeholder="MM"
                          />
                        </div>
                      </div>

                      <div class="time-picker-grid">
                        <div
                          v-for="time in timeOptions"
                          :key="time"
                          class="time-option"
                          :class="{ selected: selectedTime === time }"
                          @click="selectTime(time)"
                        >
                          {{ time }}
                        </div>
                      </div>
                      <div class="time-period-selector">
                        <button
                          type="button"
                          class="time-period-btn"
                          :class="{ selected: selectedPeriod === 'AM' }"
                          @click="selectPeriod('AM')"
                        >
                          AM
                        </button>
                        <button
                          type="button"
                          class="time-period-btn"
                          :class="{ selected: selectedPeriod === 'PM' }"
                          @click="selectPeriod('PM')"
                        >
                          PM
                        </button>
                      </div>
                    </div>
                    <div class="time-picker-actions">
                      <button type="button" class="time-picker-btn time-picker-cancel" @click="closeTimePicker">
                        Cancel
                      </button>
                      <button
                        type="button"
                        class="time-picker-btn time-picker-apply"
                        @click="applyTimeSelection"
                      >
                        Apply
                      </button>
                    </div>
                  </div>
                </div>

                <!-- Custom Date Picker Modal -->
                <div v-if="isDatePickerOpen" class="date-picker-overlay" @click.self="closeDatePicker">
                  <div class="date-picker-modal">
                    <div class="date-picker-header">
                      <h3>Select Date</h3>
                      <button type="button" class="date-picker-close" @click="closeDatePicker">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M18 6L6 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M6 6L18 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>
                    <div class="date-picker-body">
                      <div class="date-picker-month-nav">
                        <button class="month-nav-btn" @click="previousMonth">
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M15 18L9 12L15 6"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                        </button>
                        <div class="month-display">{{ monthNames[currentMonth] }} {{ currentYear }}</div>
                        <button class="month-nav-btn" @click="nextMonth">
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M9 18L15 12L9 6"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                        </button>
                      </div>

                      <div class="date-picker-weekdays">
                        <div class="weekday" v-for="day in weekdays" :key="day">{{ day }}</div>
                      </div>

                      <div class="date-picker-days">
                        <div
                          v-for="(day, index) in calendarDays"
                          :key="index"
                          class="calendar-day"
                          :class="{
                            'other-month': !day.inCurrentMonth,
                            today: day.isToday,
                            selected: day.isSelected,
                            disabled: day.isDisabled,
                          }"
                          @click="!day.isDisabled && selectDate(day.date)"
                        >
                          {{ day.day }}
                        </div>
                      </div>
                    </div>
                    <div class="date-picker-actions">
                      <button type="button" class="date-picker-btn date-picker-cancel" @click="closeDatePicker">
                        Cancel
                      </button>
                      <button
                        type="button"
                        class="date-picker-btn date-picker-apply"
                        @click="applyDateSelection"
                      >
                        Apply
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </template>

            <script setup>
            import { ref, computed, reactive, watch, onMounted } from 'vue'
            import { useRouter } from 'vue-router'
            import { useEventStore } from '@/stores/events'

            // Initialize references
            const router = useRouter()
            const eventStore = useEventStore()
            const error = ref(null)
            const success = ref(false)
            const isSubmitting = ref(false)
            const today = ref(new Date().toISOString().split('T')[0]) // Today's date in YYYY-MM-DD format
            const showTemplateModal = ref(false)
            const activeTicketIndex = ref(0)
            const showSubCategoryModal = ref(false)
            const tempSelectedSubCategories = ref([]) // Temporary storage for selected subcategories in modal
            const subCategorySearchTerm = ref('')
            const customSubCategories = ref([])
            const newCustomSubCategory = ref('')
            const categories = ref([])
            const availableSubCategories = ref([])
            const mainImagePreview = ref(null)
            const bannerImagePreview = ref(null)
            const newCustomEventOption = ref('')

            // Also initialize form with image fields
            const form = reactive({
              title: '',
              description: '',
              category: '',
              subCategories: [],
              date: '',
              time: '19:00',
              location: '',
              price: 0,
              totalTickets: 100,
              organizer: '',
              duration: '',
              featured: false,
              imageIndex: Math.floor(Math.random() * 4), // Random image from available set
              mainImage: null,
              bannerImage: null,
              selectedEventOptions: [], // Start with no options selected
              customEventOptions: [], // For user-added custom options
              ticketTypes: [
                {
                  name: 'General Admission',
                  price: 0,
                  quantity: 100,
                  description: '',
                  salesEndDate: '',
                  salesEndTime: '23:59',
                  isFeatured: false,
                },
              ],
              // Add FAQs to the form data
              faqs: [
                {
                  question: "What's included in the ticket price?",
                  answer:
                    'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
                },
                {
                  question: "What's the refund policy?",
                  answer:
                    'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
                },
                {
                  question: 'Is there parking available?',
                  answer:
                    'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
                },
                {
                  question: 'What should I bring with me?',
                  answer:
                    'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
                },
                {
                  question: 'Are there age restrictions for this event?',
                  answer:
                    'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
                },
              ],
            })

            // Form validation
            const validation = reactive({
              title: { valid: true, message: '' },
              description: { valid: true, message: '' },
              category: { valid: true, message: '' },
              subCategories: { valid: true, message: '' },
              date: { valid: true, message: '' },
              time: { valid: true, message: '' },
              location: { valid: true, message: '' },
              price: { valid: true, message: '' },
              totalTickets: { valid: true, message: '' },
              organizer: { valid: true, message: '' },
              ticketTypes: { valid: true, message: '' },
              mainImage: { valid: true, message: '' },
              bannerImage: { valid: true, message: '' },
            })

            // Fetch categories on mount
            onMounted(async () => {
              try {
                // This will be replaced with API call later
                const eventService = (await import('@/services/eventService')).default
                categories.value = await eventService.getAllCategories()

                // Get sub-categories or initialize with mock data if the service doesn't provide them
                try {
                  availableSubCategories.value = await eventService.getAllSubCategories()
                } catch {
                  // If the service doesn't have getAllSubCategories method yet, use mock data
                  availableSubCategories.value = [
                    { id: 'sub1', name: 'Workshop' },
                    { id: 'sub2', name: 'Conference' },
                    { id: 'sub3', name: 'Meetup' },
                    { id: 'sub4', name: 'Webinar' },
                    { id: 'sub5', name: 'Party' },
                    { id: 'sub6', name: 'Exhibition' },
                    { id: 'sub7', name: 'Concert' },
                    { id: 'sub8', name: 'Sport Event' },
                  ]
                }
              } catch (err) {
                error.value = 'Failed to load categories'
                console.error('Error loading categories:', err)
              }
            })

            // Add ticket type
            const addTicketType = () => {
              form.ticketTypes.push({
                name: '',
                price: 0,
                quantity: 50,
                description: '',
                salesEndDate: '',
                salesEndTime: '23:59',
                isFeatured: false,
              })
            }

            // Remove ticket type
            const removeTicketType = (index) => {
              form.ticketTypes.splice(index, 1)
            }

            // Duplicate ticket type
            const duplicateTicketType = (index) => {
              const ticketToDuplicate = { ...form.ticketTypes[index] }
              ticketToDuplicate.name = `${ticketToDuplicate.name} (Copy)`
              form.ticketTypes.splice(index + 1, 0, ticketToDuplicate)
            }

            // Available ticket type templates
            const ticketTemplates = [
              { name: 'Standard', description: 'Regular entry ticket for most guests', isFeatured: false },
              { name: 'Early Bird', description: 'Limited time offer at a discounted price', isFeatured: true },
              { name: 'VIP', description: 'Premium experience with exclusive benefits', isFeatured: true },
              { name: 'Table for 4', description: 'Reserved table seating for 4 guests' },
              { name: 'Table for 8', description: 'Reserved table seating for 8 guests' },
              { name: 'Table for 12', description: 'Reserved table seating for a large group of 12' },
              {
                name: 'Gold',
                description: 'Elite experience with exclusive perks and priority service',
                isFeatured: true,
              },
              { name: 'Student', description: 'Discounted ticket with valid student ID' },
              { name: 'Group (5+)', description: 'Discounted rate for groups of 5 or more' },
            ]

            // Apply template to ticket
            const applyTemplate = (index, template) => {
              form.ticketTypes[index].name = template.name
              form.ticketTypes[index].description = template.description
              if (template.isFeatured) {
                form.ticketTypes[index].isFeatured = true
              }
            }

            // Calculate total tickets
            const calculateTotalTickets = computed(() => {
              return form.ticketTypes.reduce((sum, ticket) => sum + ticket.quantity, 0)
            })

            // Update total tickets when ticket quantities change
            watch(calculateTotalTickets, (newTotal) => {
              form.totalTickets = newTotal
            })

            // Computed combined date and time
            const fullDateTime = computed(() => {
              if (!form.date || !form.time) return null
              const [year, month, day] = form.date.split('-')
              const [hours, minutes] = form.time.split(':')
              return new Date(year, month - 1, day, hours, minutes).toISOString()
            })

            // Duration options
            const durationOptions = [
              '1 hour',
              '2 hours',
              '3 hours',
              '4 hours',
              '5 hours',
              '1 day',
              '2 days',
              '3 days',
              'Multiple days',
            ]

            // Define stronger password regex if using authentication
            const sanitizeInput = (input) => {
              if (typeof input !== 'string') return input
              // Basic sanitization - replaces potentially harmful characters
              return input.replace(/[<>&"'`=/]/g, '')
            }

            // Validate form with enhanced security
            const validateForm = () => {
              let isValid = true

              // Title validation with sanitization
              const sanitizedTitle = sanitizeInput(form.title.trim())
              if (!sanitizedTitle) {
                validation.title.valid = false
                validation.title.message = 'Add a name for your event'
                isValid = false
              } else if (sanitizedTitle.length < 5) {
                validation.title.valid = false
                validation.title.message = 'Name needs at least 5 letters'
                isValid = false
              } else if (sanitizedTitle.length > 100) {
                validation.title.valid = false
                validation.title.message = 'Name is too long (100 letters max)'
                isValid = false
              } else {
                validation.title.valid = true
                // Update the form with sanitized value
                form.title = sanitizedTitle
              }

              // Description validation with sanitization
              const sanitizedDescription = sanitizeInput(form.description.trim())
              if (!sanitizedDescription) {
                validation.description.valid = false
                validation.description.message = 'Add a description'
                isValid = false
              } else if (sanitizedDescription.length < 20) {
                validation.description.valid = false
                validation.description.message = 'Write at least 20 letters'
                isValid = false
              } else if (sanitizedDescription.length > 5000) {
                validation.description.valid = false
                validation.description.message = 'Too long! Keep it under 5000 letters'
                isValid = false
              } else {
                validation.description.valid = true
                // Update the form with sanitized value
                form.description = sanitizedDescription
              }

              // Category validation
              if (!form.category) {
                validation.category.valid = false
                validation.category.message = 'Pick a category'
                isValid = false
              } else {
                // Validate category ID exists in valid categories
                const categoryExists = categories.value.some((cat) => cat.id === form.category)
                if (!categoryExists) {
                  validation.category.valid = false
                  validation.category.message = 'Pick a category from the list'
                  isValid = false
                } else {
                  validation.category.valid = true
                }
              }

              // Sub-categories validation
              const nonEmptySubCategories = form.subCategories.filter((cat) => cat !== '')
              const uniqueSubCategories = [...new Set(nonEmptySubCategories)]

              if (nonEmptySubCategories.length !== uniqueSubCategories.length) {
                validation.subCategories.valid = false
                validation.subCategories.message = 'You picked the same tag twice'
                isValid = false
              } else {
                // Validate each subcategory ID exists in valid subcategories
                const invalidSubCat = nonEmptySubCategories.some(
                  (subCat) => !availableSubCategories.value.some((validSubCat) => validSubCat.id === subCat),
                )

                if (invalidSubCat) {
                  validation.subCategories.valid = false
                  validation.subCategories.message = 'Pick tags from the list'
                  isValid = false
                } else {
                  validation.subCategories.valid = true
                }
              }

              // Date validation
              if (!form.date) {
                validation.date.valid = false
                validation.date.message = 'Pick a date'
                isValid = false
              } else {
                // Validate date format and ensure it's not in the past
                const selectedDate = new Date(form.date)
                const currentDate = new Date()
                currentDate.setHours(0, 0, 0, 0)

                if (isNaN(selectedDate.getTime())) {
                  validation.date.valid = false
                  validation.date.message = "This date won't work"
                  isValid = false
                } else if (selectedDate < currentDate) {
                  validation.date.valid = false
                  validation.date.message = 'Pick a date in the future'
                  isValid = false
                } else {
                  validation.date.valid = true
                }
              }

              // Time validation
              if (!form.time) {
                validation.time.valid = false
                validation.time.message = 'Add a start time'
                isValid = false
              } else {
                // Validate time format (HH:MM)
                const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/
                if (!timeRegex.test(form.time)) {
                  validation.time.valid = false
                  validation.time.message = 'Use hours:minutes format'
                  isValid = false
                } else {
                  validation.time.valid = true
                }
              }

              // Location validation with sanitization
              const sanitizedLocation = sanitizeInput(form.location.trim())
              if (!sanitizedLocation) {
                validation.location.valid = false
                validation.location.message = 'Add a location'
                isValid = false
              } else if (sanitizedLocation.length < 5) {
                validation.location.valid = false
                validation.location.message = 'Write a longer address'
                isValid = false
              } else {
                validation.location.valid = true
                // Update the form with sanitized value
                form.location = sanitizedLocation
              }

              // Price validation
              if (isNaN(form.price) || form.price === '') {
                validation.price.valid = false
                validation.price.message = 'Price must be a number'
                isValid = false
              } else {
                const price = parseFloat(form.price)
                if (price < 0) {
                  validation.price.valid = false
                  validation.price.message = "Price can't be negative"
                  isValid = false
                } else if (price > 100000) {
                  validation.price.valid = false
                  validation.price.message = 'Price too high (max $100,000)'
                  isValid = false
                } else {
                  validation.price.valid = true
                  // Ensure price is stored as a number with 2 decimal places
                  form.price = parseFloat(price.toFixed(2))
                }
              }

              // Tickets validation
              if (isNaN(form.totalTickets) || form.totalTickets === '') {
                validation.totalTickets.valid = false
                validation.totalTickets.message = 'How many tickets?'
                isValid = false
              } else {
                const tickets = parseInt(form.totalTickets)
                if (tickets <= 0) {
                  validation.totalTickets.valid = false
                  validation.totalTickets.message = 'You need at least 1 ticket'
                  isValid = false
                } else if (tickets > 100000) {
                  validation.totalTickets.valid = false
                  validation.totalTickets.message = 'Too many tickets (max 100,000)'
                  isValid = false
                } else {
                  validation.totalTickets.valid = true
                  // Ensure tickets is stored as an integer
                  form.totalTickets = tickets
                }
              }

              // Organizer validation with sanitization
              const sanitizedOrganizer = sanitizeInput(form.organizer.trim())
              if (!sanitizedOrganizer) {
                validation.organizer.valid = false
                validation.organizer.message = 'Add your name or group name'
                isValid = false
              } else {
                validation.organizer.valid = true
                // Update the form with sanitized value
                form.organizer = sanitizedOrganizer
              }

              // Ticket types validation
              if (form.ticketTypes.length === 0) {
                validation.ticketTypes.valid = false
                validation.ticketTypes.message = 'Add at least one ticket type'
                isValid = false
              } else {
                let ticketTypeValid = true
                form.ticketTypes.forEach((ticket, index) => {
                  const sanitizedName = sanitizeInput(ticket.name.trim())
                  if (!sanitizedName) {
                    validation.ticketTypes.valid = false
                    validation.ticketTypes.message = `Ticket #${index + 1} needs a name`
                    ticketTypeValid = false
                    isValid = false
                  }

                  if (ticket.quantity <= 0) {
                    validation.ticketTypes.valid = false
                    validation.ticketTypes.message = `Ticket #${index + 1} needs at least 1`
                    ticketTypeValid = false
                    isValid = false
                  }

                  if (ticket.salesEndDate) {
                    const endDate = new Date(ticket.salesEndDate)
                    const eventDate = new Date(form.date)

                    if (isNaN(endDate.getTime())) {
                      validation.ticketTypes.valid = false
                      validation.ticketTypes.message = `Ticket #${index + 1} has a bad date`
                      ticketTypeValid = false
                      isValid = false
                    } else if (endDate > eventDate) {
                      validation.ticketTypes.valid = false
                      validation.ticketTypes.message = `Ticket #${index + 1} must stop selling before event starts`
                      ticketTypeValid = false
                      isValid = false
                    }
                  }
                })

                if (ticketTypeValid) {
                  validation.ticketTypes.valid = true
                }
              }

              // Main image validation
              if (!form.mainImage) {
                validation.mainImage.valid = false
                validation.mainImage.message = 'Upload a main image'
                isValid = false
              }

              // Banner image validation
              if (!form.bannerImage) {
                validation.bannerImage.valid = false
                validation.bannerImage.message = 'Upload a banner image'
                isValid = false
              }

              return isValid
            }

            // Handle form submission
            const handleSubmit = async () => {
              if (!validateForm()) {
                // Scroll to first error
                const firstError = Object.keys(validation).find((key) => !validation[key].valid)
                if (firstError) {
                  const element = document.getElementById(firstError)
                  if (element) element.scrollIntoView({ behavior: 'smooth', block: 'center' })
                }
                return
              }

              isSubmitting.value = true
              error.value = null

              try {
                // Filter out empty sub-categories and combine with custom subcategories
                const validSubCategories = [
                  ...form.subCategories.filter((cat) => cat !== ''),
                  ...customSubCategories.value,
                ]

                // Process ticket types
                const processedTickets = form.ticketTypes.map((ticket) => ({
                  ...ticket,
                  price: parseFloat(ticket.price),
                  quantity: parseInt(ticket.quantity),
                  name: sanitizeInput(ticket.name.trim()),
                  description: sanitizeInput(ticket.description.trim()),
                }))

                // Process images - convert File objects to data URLs
                let mainImageUrl = mainImagePreview.value
                let bannerImageUrl = bannerImagePreview.value

                // Get the selected event options
                const selectedEventOptions = [...form.selectedEventOptions, ...form.customEventOptions].filter(
                  Boolean,
                ) // Remove any falsy values

                // Prepare the event data
                const eventData = {
                  title: form.title,
                  description: form.description,
                  category: form.category,
                  subCategories: validSubCategories,
                  date: fullDateTime.value,
                  location: form.location,
                  price: parseFloat(form.price),
                  totalTickets: parseInt(form.totalTickets),
                  organizer: form.organizer,
                  duration: form.duration,
                  featured: form.featured,
                  imageIndex: form.imageIndex,
                  mainImage: mainImageUrl,
                  bannerImage: bannerImageUrl,
                  eventOptions: selectedEventOptions, // Add event options to the event data
                  selectedEventOptions: form.selectedEventOptions, // Store the original selected options
                  customEventOptions: form.customEventOptions, // Store the custom options
                  ticketTypes: processedTickets,
                  faqs: form.faqs.filter((faq) => faq.question.trim() && faq.answer.trim()), // Only include FAQs with content
                }

                // Create the event
                const newEvent = await eventStore.createEvent(eventData)

                success.value = true

                // Redirect to the event page after a brief delay
                setTimeout(() => {
                  router.push({ path: `/event/${newEvent.id}` })
                }, 2000)
              } catch (err) {
                error.value = err.message || 'Failed to create event'
                window.scrollTo({ top: 0, behavior: 'smooth' })
              } finally {
                isSubmitting.value = false
              }
            }

            // Reset form
            const resetForm = () => {
              Object.keys(form).forEach((key) => {
                if (key === 'price') {
                  form[key] = 0
                } else if (key === 'totalTickets') {
                  form[key] = 100
                } else if (key === 'featured') {
                  form[key] = false
                } else if (key === 'imageIndex') {
                  form[key] = Math.floor(Math.random() * 4)
                } else if (key === 'time') {
                  form[key] = '19:00'
                } else if (key === 'subCategories') {
                  form[key] = []
                } else if (key === 'ticketTypes') {
                  form[key] = [
                    {
                      name: 'General Admission',
                      price: 0,
                      quantity: 100,
                      description: '',
                      salesEndDate: '',
                      salesEndTime: '23:59',
                      isFeatured: false,
                    },
                  ]
                } else {
                  form[key] = ''
                }
              })

              Object.keys(validation).forEach((key) => {
                validation[key].valid = true
                validation[key].message = ''
              })

              error.value = null
              success.value = false

              // Also reset custom subcategories
              customSubCategories.value = []

              // Reset custom event options
              form.customEventOptions = []

              // Reset event options to defaults
              form.selectedEventOptions = ['Live performance', 'Food & drinks available', 'Indoor event']

              // Reset FAQs to defaults
              form.faqs = [
                {
                  question: "What's included in the ticket price?",
                  answer:
                    'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
                },
                {
                  question: "What's the refund policy?",
                  answer:
                    'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
                },
                {
                  question: 'Is there parking available?',
                  answer:
                    'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
                },
                {
                  question: 'What should I bring with me?',
                  answer:
                    'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
                },
                {
                  question: 'Are there age restrictions for this event?',
                  answer:
                    'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
                },
              ]
            }

            // Set min date to today for date picker
            // const today = new Date().toISOString().split('T')[0]

            // Open template modal for a specific ticket
            const openTemplateModal = (index) => {
              activeTicketIndex.value = index
              showTemplateModal.value = true
              document.body.style.overflow = 'hidden' // Prevent background scrolling
            }

            // Close template modal
            const closeTemplateModal = () => {
              showTemplateModal.value = false
              document.body.style.overflow = '' // Re-enable scrolling
            }

            // Apply template from modal and close the modal
            const applyTemplateFromModal = (index, template) => {
              applyTemplate(index, template)
              closeTemplateModal()
            }

            // Add FAQ
            const addFaq = () => {
              form.faqs.push({
                question: '',
                answer: '',
              })
            }

            // Remove FAQ
            const removeFaq = (index) => {
              form.faqs.splice(index, 1)
            }

            // Handle main image upload
            const handleMainImageUpload = (event) => {
              let file

              // Check if it's a drop event
              if (event.dataTransfer) {
                file = event.dataTransfer.files[0]
              } else if (event.target.files) {
                file = event.target.files[0]
              }

              if (file) {
                form.mainImage = file
                validation.mainImage.valid = true

                // Create a preview URL
                const reader = new FileReader()
                reader.onload = (e) => {
                  mainImagePreview.value = e.target.result
                }
                reader.readAsDataURL(file)
              }
            }

            // Handle banner image upload
            const handleBannerImageUpload = (event) => {
              let file

              // Check if it's a drop event
              if (event.dataTransfer) {
                file = event.dataTransfer.files[0]
              } else if (event.target.files) {
                file = event.target.files[0]
              }

              if (file) {
                form.bannerImage = file
                validation.bannerImage.valid = true

                // Create a preview URL
                const reader = new FileReader()
                reader.onload = (e) => {
                  bannerImagePreview.value = e.target.result
                }
                reader.readAsDataURL(file)
              }
            }

            // Remove main image - could be added to the UI if needed
            const removeMainImage = () => {
              form.mainImage = null
              mainImagePreview.value = null
              validation.mainImage.valid = false
              validation.mainImage.message = 'Please upload a main image'
            }

            // Remove banner image - could be added to the UI if needed
            const removeBannerImage = () => {
              form.bannerImage = null
              bannerImagePreview.value = null
              validation.bannerImage.valid = false
              validation.bannerImage.message = 'Please upload a banner image'
            }

            // Trigger main image upload
            const triggerMainImageUpload = () => {
              const input = document.getElementById('mainImage')
              input.click()
            }

            // Trigger banner image upload
            const triggerBannerImageUpload = () => {
              const input = document.getElementById('bannerImage')
              input.click()
            }

            // Add custom subcategory
            const addCustomSubCategory = () => {
              const trimmed = newCustomSubCategory.value.trim()
              if (
                trimmed &&
                customSubCategories.value.length < 5 &&
                !customSubCategories.value.includes(trimmed)
              ) {
                customSubCategories.value.push(trimmed)
                newCustomSubCategory.value = ''
              }
            }

            // Remove custom subcategory
            const removeCustomSubCategory = (index) => {
              customSubCategories.value.splice(index, 1)
            }

            // Get all displayed subcategories (selected + custom)
            const displayedSubCategories = computed(() => {
              return [...form.subCategories, ...customSubCategories.value]
            })

            // Get subcategory name by id
            const getSubCategoryName = (subCatId) => {
              // If it's a predefined subcategory
              if (typeof subCatId === 'string' && subCatId.startsWith('sub')) {
                const subCat = availableSubCategories.value.find((sc) => sc.id === subCatId)
                return subCat ? subCat.name : subCatId
              }
              // If it's a custom subcategory
              return subCatId
            }

            // Filter subcategories based on search term
            const filteredSubCategories = computed(() => {
              if (!subCategorySearchTerm.value) return availableSubCategories.value

              const searchTerm = subCategorySearchTerm.value.toLowerCase()
              return availableSubCategories.value.filter((sc) => sc.name.toLowerCase().includes(searchTerm))
            })

            // Count selected subcategories
            const selectedSubCategoriesCount = computed(() => {
              return tempSelectedSubCategories.value.length + customSubCategories.value.length
            })

            // Remove a subcategory from the form
            const removeSubCategoryById = (subCat) => {
              if (typeof subCat === 'string' && subCat.startsWith('sub')) {
                // If it's a predefined subcategory
                form.subCategories = form.subCategories.filter((sc) => sc !== subCat)
              } else {
                // If it's a custom subcategory
                customSubCategories.value = customSubCategories.value.filter((sc) => sc !== subCat)
              }
            }

            // Toggle subcategory selection
            const toggleSubCategory = (id) => {
              if (isSubCategorySelected(id)) {
                tempSelectedSubCategories.value = tempSelectedSubCategories.value.filter(
                  (subCatId) => subCatId !== id,
                )
              } else {
                if (selectedSubCategoriesCount.value < 5) {
                  tempSelectedSubCategories.value.push(id)
                }
              }
            }

            // Check if subcategory is selected
            const isSubCategorySelected = (id) => {
              return tempSelectedSubCategories.value.includes(id)
            }

            // Open subcategory modal
            const openSubCategoryModal = () => {
              if (form.category === '') {
                validation.category.valid = false
                validation.category.message = 'Select a category first'
                // Focus category dropdown
                const categoryElement = document.getElementById('category')
                if (categoryElement) categoryElement.focus()
                return
              }

              // Initialize the temp selection with current selection
              tempSelectedSubCategories.value = [...form.subCategories]
              showSubCategoryModal.value = true
              document.body.style.overflow = 'hidden' // Prevent background scrolling
            }

            // Close subcategory modal
            const closeSubCategoryModal = () => {
              showSubCategoryModal.value = false
              document.body.style.overflow = '' // Re-enable scrolling
              subCategorySearchTerm.value = ''
              newCustomSubCategory.value = ''
            }

            // Confirm subcategory selections
            const confirmSubCategories = () => {
              form.subCategories = [...tempSelectedSubCategories.value]
              closeSubCategoryModal()
            }

            // Handle main image drop
            const handleMainImageDrop = (event) => {
              event.preventDefault()
              handleMainImageUpload(event)
            }

            // Handle banner image drop
            const handleBannerImageDrop = (event) => {
              event.preventDefault()
              handleBannerImageUpload(event)
            }

            // Add custom event option
            const addCustomEventOption = () => {
              const trimmed = newCustomEventOption.value.trim()
              if (trimmed && form.customEventOptions.length < 5 && !form.customEventOptions.includes(trimmed)) {
                form.customEventOptions.push(trimmed)
                newCustomEventOption.value = ''
              }
            }

            // Remove custom event option
            const removeCustomEventOption = (index) => {
              form.customEventOptions.splice(index, 1)
            }

            // Toggle event option
            const toggleEventOption = (option) => {
              if (form.selectedEventOptions.includes(option)) {
                form.selectedEventOptions = form.selectedEventOptions.filter((opt) => opt !== option)
              } else {
                // Allow selecting more options - remove limit
                form.selectedEventOptions.push(option)
              }
            }

            // Check if event option is selected
            const isEventOptionSelected = (option) => {
              return form.selectedEventOptions.includes(option)
            }

            // Predefined event options
            const predefinedEventOptions = [
              'Live performance',
              'Food & drinks available',
              'Indoor event',
              'Outdoor event',
              'Accessible venue',
              'Family friendly',
              'Free parking',
              'VIP access',
              'Professional networking',
              'Photo opportunities',
              'Live streaming',
              'Q&A session',
              'Merchandise available',
              'Meet & greet',
              'Seating provided',
            ]

            const showDateTip = ref(false)
            const showTimeTip = ref(false)

            // Time picker variables
            const isTimePickerOpen = ref(false)
            const selectedTime = ref('07:00')
            const selectedPeriod = ref('AM')

            const timeOptions = [
              '01:00',
              '01:30',
              '02:00',
              '02:30',
              '03:00',
              '03:30',
              '04:00',
              '04:30',
              '05:00',
              '05:30',
              '06:00',
              '06:30',
              '07:00',
              '07:30',
              '08:00',
              '08:30',
              '09:00',
              '09:30',
              '10:00',
              '10:30',
              '11:00',
              '11:30',
              '12:00',
              '12:30',
            ]

            const openTimePicker = () => {
              // If there's already a time, parse it to 12-hour format for the picker
              if (form.time) {
                const [hours, minutes] = form.time.split(':')
                const hour = parseInt(hours)

                if (hour > 12) {
                  // Convert from 24-hour to 12-hour format for PM
                  selectedTime.value = `${(hour - 12).toString().padStart(2, '0')}:${minutes}`
                  selectedPeriod.value = 'PM'
                } else if (hour === 12) {
                  // 12 PM
                  selectedTime.value = `12:${minutes}`
                  selectedPeriod.value = 'PM'
                } else if (hour === 0) {
                  // 12 AM
                  selectedTime.value = `12:${minutes}`
                  selectedPeriod.value = 'AM'
                } else {
                  // Regular AM hours
                  selectedTime.value = `${hour.toString().padStart(2, '0')}:${minutes}`
                  selectedPeriod.value = 'AM'
                }
              } else {
                // Default to 7:00 AM if no time selected
                selectedTime.value = '07:00'
                selectedPeriod.value = 'AM'
              }

              isTimePickerOpen.value = true
            }

            const closeTimePicker = () => {
              isTimePickerOpen.value = false
            }

            const selectTime = (time) => {
              selectedTime.value = time
            }

            const selectPeriod = (period) => {
              selectedPeriod.value = period
            }

            const applyTimeSelection = () => {
              // Convert to 24-hour format if PM is selected
              if (selectedPeriod.value === 'PM') {
                const [hours, minutes] = selectedTime.value.split(':')
                const hour = parseInt(hours)

                // Only adjust hours that aren't already in PM format (12 PM stays as 12)
                const adjustedHour = hour === 12 ? 12 : hour + 12
                form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
              } else {
                // For AM, make sure 12 AM becomes 00:00
                const [hours, minutes] = selectedTime.value.split(':')
                const hour = parseInt(hours)
                const adjustedHour = hour === 12 ? 0 : hour
                form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
              }

              closeTimePicker()
            }

            // Date picker variables
            const isDatePickerOpen = ref(false)
            const currentYear = ref(new Date().getFullYear())
            const currentMonth = ref(new Date().getMonth())
            const selectedDate = ref(new Date())
            const tempSelectedDate = ref(null)

            // Custom time input variables
            const customHours = ref('07')
            const customMinutes = ref('00')

            // Define weekdays and month names for the calendar
            const weekdays = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
            const monthNames = [
              'January',
              'February',
              'March',
              'April',
              'May',
              'June',
              'July',
              'August',
              'September',
              'October',
              'November',
              'December',
            ]

            // Format time inputs when focus is lost
            const formatTimeInputs = () => {
              // Validate and format hours
              let formattedHours = parseInt(customHours.value) || 1
              if (formattedHours < 1) formattedHours = 1
              if (formattedHours > 12) formattedHours = 12

              // Validate and format minutes
              let formattedMinutes = parseInt(customMinutes.value) || 0
              if (formattedMinutes < 0) formattedMinutes = 0
              if (formattedMinutes > 59) formattedMinutes = 59

              // Update the ref values with formatted strings
              customHours.value = formattedHours.toString().padStart(2, '0')
              customMinutes.value = formattedMinutes.toString().padStart(2, '0')

              // Update selectedTime with formatted values
              selectedTime.value = `${formattedHours.toString().padStart(2, '0')}:${formattedMinutes.toString().padStart(2, '0')}`
            }

            // Function to prefill the form with test data
            const prefillForm = () => {
              // Generate a random event title to avoid duplicates
              const eventTypes = [
                'Workshop',
                'Conference',
                'Meetup',
                'Concert',
                'Festival',
                'Webinar',
                'Hackathon',
              ]
            }
          

            import { ref, computed, reactive, watch, onMounted } from 'vue'
            import { useRouter } from 'vue-router'
            import { useEventStore } from '@/stores/events'

            // Initialize references
            const router = useRouter()
            const eventStore = useEventStore()
            const error = ref(null)
            const success = ref(false)
            const isSubmitting = ref(false)
            const today = ref(new Date().toISOString().split('T')[0]) // Today's date in YYYY-MM-DD format
            const showTemplateModal = ref(false)
            const activeTicketIndex = ref(0)
            const showSubCategoryModal = ref(false)
            const tempSelectedSubCategories = ref([]) // Temporary storage for selected subcategories in modal
            const subCategorySearchTerm = ref('')
            const customSubCategories = ref([])
            const newCustomSubCategory = ref('')
            const categories = ref([])
            const availableSubCategories = ref([])
            const mainImagePreview = ref(null)
            const bannerImagePreview = ref(null)
            const newCustomEventOption = ref('')

            // Also initialize form with image fields
            const form = reactive({
              title: '',
              description: '',
              category: '',
              subCategories: [],
              date: '',
              time: '19:00',
              location: '',
              price: 0,
              totalTickets: 100,
              organizer: '',
              duration: '',
              featured: false,
              imageIndex: Math.floor(Math.random() * 4), // Random image from available set
              mainImage: null,
              bannerImage: null,
              selectedEventOptions: [], // Start with no options selected
              customEventOptions: [], // For user-added custom options
              ticketTypes: [
                {
                  name: 'General Admission',
                  price: 0,
                  quantity: 100,
                  description: '',
                  salesEndDate: '',
                  salesEndTime: '23:59',
                  isFeatured: false,
                },
              ],
              // Add FAQs to the form data
              faqs: [
                {
                  question: "What's included in the ticket price?",
                  answer:
                    'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
                },
                {
                  question: "What's the refund policy?",
                  answer:
                    'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
                },
                {
                  question: 'Is there parking available?',
                  answer:
                    'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
                },
                {
                  question: 'What should I bring with me?',
                  answer:
                    'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
                },
                {
                  question: 'Are there age restrictions for this event?',
                  answer:
                    'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
                },
              ],
            })

            // Form validation
            const validation = reactive({
              title: { valid: true, message: '' },
              description: { valid: true, message: '' },
              category: { valid: true, message: '' },
              subCategories: { valid: true, message: '' },
              date: { valid: true, message: '' },
              time: { valid: true, message: '' },
              location: { valid: true, message: '' },
              price: { valid: true, message: '' },
              totalTickets: { valid: true, message: '' },
              organizer: { valid: true, message: '' },
              ticketTypes: { valid: true, message: '' },
              mainImage: { valid: true, message: '' },
              bannerImage: { valid: true, message: '' },
            })

            // Fetch categories on mount
            onMounted(async () => {
              try {
                // This will be replaced with API call later
                const eventService = (await import('@/services/eventService')).default
                categories.value = await eventService.getAllCategories()

                // Get sub-categories or initialize with mock data if the service doesn't provide them
                try {
                  availableSubCategories.value = await eventService.getAllSubCategories()
                } catch {
                  // If the service doesn't have getAllSubCategories method yet, use mock data
                  availableSubCategories.value = [
                    { id: 'sub1', name: 'Workshop' },
                    { id: 'sub2', name: 'Conference' },
                    { id: 'sub3', name: 'Meetup' },
                    { id: 'sub4', name: 'Webinar' },
                    { id: 'sub5', name: 'Party' },
                    { id: 'sub6', name: 'Exhibition' },
                    { id: 'sub7', name: 'Concert' },
                    { id: 'sub8', name: 'Sport Event' },
                  ]
                }
              } catch (err) {
                error.value = 'Failed to load categories'
                console.error('Error loading categories:', err)
              }
            })

            // Add ticket type
            const addTicketType = () => {
              form.ticketTypes.push({
                name: '',
                price: 0,
                quantity: 50,
                description: '',
                salesEndDate: '',
                salesEndTime: '23:59',
                isFeatured: false,
              })
            }

            // Remove ticket type
            const removeTicketType = (index) => {
              form.ticketTypes.splice(index, 1)
            }

            // Duplicate ticket type
            const duplicateTicketType = (index) => {
              const ticketToDuplicate = { ...form.ticketTypes[index] }
              ticketToDuplicate.name = `${ticketToDuplicate.name} (Copy)`
              form.ticketTypes.splice(index + 1, 0, ticketToDuplicate)
            }

            // Available ticket type templates
            const ticketTemplates = [
              { name: 'Standard', description: 'Regular entry ticket for most guests', isFeatured: false },
              { name: 'Early Bird', description: 'Limited time offer at a discounted price', isFeatured: true },
              { name: 'VIP', description: 'Premium experience with exclusive benefits', isFeatured: true },
              { name: 'Table for 4', description: 'Reserved table seating for 4 guests' },
              { name: 'Table for 8', description: 'Reserved table seating for 8 guests' },
              { name: 'Table for 12', description: 'Reserved table seating for a large group of 12' },
              {
                name: 'Gold',
                description: 'Elite experience with exclusive perks and priority service',
                isFeatured: true,
              },
              { name: 'Student', description: 'Discounted ticket with valid student ID' },
              { name: 'Group (5+)', description: 'Discounted rate for groups of 5 or more' },
            ]

            // Apply template to ticket
            const applyTemplate = (index, template) => {
              form.ticketTypes[index].name = template.name
              form.ticketTypes[index].description = template.description
              if (template.isFeatured) {
                form.ticketTypes[index].isFeatured = true
              }
            }

            // Calculate total tickets
            const calculateTotalTickets = computed(() => {
              return form.ticketTypes.reduce((sum, ticket) => sum + ticket.quantity, 0)
            })

            // Update total tickets when ticket quantities change
            watch(calculateTotalTickets, (newTotal) => {
              form.totalTickets = newTotal
            })

            // Computed combined date and time
            const fullDateTime = computed(() => {
              if (!form.date || !form.time) return null
              const [year, month, day] = form.date.split('-')
              const [hours, minutes] = form.time.split(':')
              return new Date(year, month - 1, day, hours, minutes).toISOString()
            })

            // Duration options
            const durationOptions = [
              '1 hour',
              '2 hours',
              '3 hours',
              '4 hours',
              '5 hours',
              '1 day',
              '2 days',
              '3 days',
              'Multiple days',
            ]

            // Define stronger password regex if using authentication
            const sanitizeInput = (input) => {
              if (typeof input !== 'string') return input
              // Basic sanitization - replaces potentially harmful characters
              return input.replace(/[<>&"'`=/]/g, '')
            }

            // Validate form with enhanced security
            const validateForm = () => {
              let isValid = true

              // Title validation with sanitization
              const sanitizedTitle = sanitizeInput(form.title.trim())
              if (!sanitizedTitle) {
                validation.title.valid = false
                validation.title.message = 'Add a name for your event'
                isValid = false
              } else if (sanitizedTitle.length < 5) {
                validation.title.valid = false
                validation.title.message = 'Name needs at least 5 letters'
                isValid = false
              } else if (sanitizedTitle.length > 100) {
                validation.title.valid = false
                validation.title.message = 'Name is too long (100 letters max)'
                isValid = false
              } else {
                validation.title.valid = true
                // Update the form with sanitized value
                form.title = sanitizedTitle
              }

              // Description validation with sanitization
              const sanitizedDescription = sanitizeInput(form.description.trim())
              if (!sanitizedDescription) {
                validation.description.valid = false
                validation.description.message = 'Add a description'
                isValid = false
              } else if (sanitizedDescription.length < 20) {
                validation.description.valid = false
                validation.description.message = 'Write at least 20 letters'
                isValid = false
              } else if (sanitizedDescription.length > 5000) {
                validation.description.valid = false
                validation.description.message = 'Too long! Keep it under 5000 letters'
                isValid = false
              } else {
                validation.description.valid = true
                // Update the form with sanitized value
                form.description = sanitizedDescription
              }

              // Category validation
              if (!form.category) {
                validation.category.valid = false
                validation.category.message = 'Pick a category'
                isValid = false
              } else {
                // Validate category ID exists in valid categories
                const categoryExists = categories.value.some((cat) => cat.id === form.category)
                if (!categoryExists) {
                  validation.category.valid = false
                  validation.category.message = 'Pick a category from the list'
                  isValid = false
                } else {
                  validation.category.valid = true
                }
              }

              // Sub-categories validation
              const nonEmptySubCategories = form.subCategories.filter((cat) => cat !== '')
              const uniqueSubCategories = [...new Set(nonEmptySubCategories)]

              if (nonEmptySubCategories.length !== uniqueSubCategories.length) {
                validation.subCategories.valid = false
                validation.subCategories.message = 'You picked the same tag twice'
                isValid = false
              } else {
                // Validate each subcategory ID exists in valid subcategories
                const invalidSubCat = nonEmptySubCategories.some(
                  (subCat) => !availableSubCategories.value.some((validSubCat) => validSubCat.id === subCat),
                )

                if (invalidSubCat) {
                  validation.subCategories.valid = false
                  validation.subCategories.message = 'Pick tags from the list'
                  isValid = false
                } else {
                  validation.subCategories.valid = true
                }
              }

              // Date validation
              if (!form.date) {
                validation.date.valid = false
                validation.date.message = 'Pick a date'
                isValid = false
              } else {
                // Validate date format and ensure it's not in the past
                const selectedDate = new Date(form.date)
                const currentDate = new Date()
                currentDate.setHours(0, 0, 0, 0)

                if (isNaN(selectedDate.getTime())) {
                  validation.date.valid = false
                  validation.date.message = "This date won't work"
                  isValid = false
                } else if (selectedDate < currentDate) {
                  validation.date.valid = false
                  validation.date.message = 'Pick a date in the future'
                  isValid = false
                } else {
                  validation.date.valid = true
                }
              }

              // Time validation
              if (!form.time) {
                validation.time.valid = false
                validation.time.message = 'Add a start time'
                isValid = false
              } else {
                // Validate time format (HH:MM)
                const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/
                if (!timeRegex.test(form.time)) {
                  validation.time.valid = false
                  validation.time.message = 'Use hours:minutes format'
                  isValid = false
                } else {
                  validation.time.valid = true
                }
              }

              // Location validation with sanitization
              const sanitizedLocation = sanitizeInput(form.location.trim())
              if (!sanitizedLocation) {
                validation.location.valid = false
                validation.location.message = 'Add a location'
                isValid = false
              } else if (sanitizedLocation.length < 5) {
                validation.location.valid = false
                validation.location.message = 'Write a longer address'
                isValid = false
              } else {
                validation.location.valid = true
                // Update the form with sanitized value
                form.location = sanitizedLocation
              }

              // Price validation
              if (isNaN(form.price) || form.price === '') {
                validation.price.valid = false
                validation.price.message = 'Price must be a number'
                isValid = false
              } else {
                const price = parseFloat(form.price)
                if (price < 0) {
                  validation.price.valid = false
                  validation.price.message = "Price can't be negative"
                  isValid = false
                } else if (price > 100000) {
                  validation.price.valid = false
                  validation.price.message = 'Price too high (max $100,000)'
                  isValid = false
                } else {
                  validation.price.valid = true
                  // Ensure price is stored as a number with 2 decimal places
                  form.price = parseFloat(price.toFixed(2))
                }
              }

              // Tickets validation
              if (isNaN(form.totalTickets) || form.totalTickets === '') {
                validation.totalTickets.valid = false
                validation.totalTickets.message = 'How many tickets?'
                isValid = false
              } else {
                const tickets = parseInt(form.totalTickets)
                if (tickets <= 0) {
                  validation.totalTickets.valid = false
                  validation.totalTickets.message = 'You need at least 1 ticket'
                  isValid = false
                } else if (tickets > 100000) {
                  validation.totalTickets.valid = false
                  validation.totalTickets.message = 'Too many tickets (max 100,000)'
                  isValid = false
                } else {
                  validation.totalTickets.valid = true
                  // Ensure tickets is stored as an integer
                  form.totalTickets = tickets
                }
              }

              // Organizer validation with sanitization
              const sanitizedOrganizer = sanitizeInput(form.organizer.trim())
              if (!sanitizedOrganizer) {
                validation.organizer.valid = false
                validation.organizer.message = 'Add your name or group name'
                isValid = false
              } else {
                validation.organizer.valid = true
                // Update the form with sanitized value
                form.organizer = sanitizedOrganizer
              }

              // Ticket types validation
              if (form.ticketTypes.length === 0) {
                validation.ticketTypes.valid = false
                validation.ticketTypes.message = 'Add at least one ticket type'
                isValid = false
              } else {
                let ticketTypeValid = true
                form.ticketTypes.forEach((ticket, index) => {
                  const sanitizedName = sanitizeInput(ticket.name.trim())
                  if (!sanitizedName) {
                    validation.ticketTypes.valid = false
                    validation.ticketTypes.message = `Ticket #${index + 1} needs a name`
                    ticketTypeValid = false
                    isValid = false
                  }

                  if (ticket.quantity <= 0) {
                    validation.ticketTypes.valid = false
                    validation.ticketTypes.message = `Ticket #${index + 1} needs at least 1`
                    ticketTypeValid = false
                    isValid = false
                  }

                  if (ticket.salesEndDate) {
                    const endDate = new Date(ticket.salesEndDate)
                    const eventDate = new Date(form.date)

                    if (isNaN(endDate.getTime())) {
                      validation.ticketTypes.valid = false
                      validation.ticketTypes.message = `Ticket #${index + 1} has a bad date`
                      ticketTypeValid = false
                      isValid = false
                    } else if (endDate > eventDate) {
                      validation.ticketTypes.valid = false
                      validation.ticketTypes.message = `Ticket #${index + 1} must stop selling before event starts`
                      ticketTypeValid = false
                      isValid = false
                    }
                  }
                })

                if (ticketTypeValid) {
                  validation.ticketTypes.valid = true
                }
              }

              // Main image validation
              if (!form.mainImage) {
                validation.mainImage.valid = false
                validation.mainImage.message = 'Upload a main image'
                isValid = false
              }

              // Banner image validation
              if (!form.bannerImage) {
                validation.bannerImage.valid = false
                validation.bannerImage.message = 'Upload a banner image'
                isValid = false
              }

              return isValid
            }

            // Handle form submission
            const handleSubmit = async () => {
              if (!validateForm()) {
                // Scroll to first error
                const firstError = Object.keys(validation).find((key) => !validation[key].valid)
                if (firstError) {
                  const element = document.getElementById(firstError)
                  if (element) element.scrollIntoView({ behavior: 'smooth', block: 'center' })
                }
                return
              }

              isSubmitting.value = true
              error.value = null

              try {
                // Filter out empty sub-categories and combine with custom subcategories
                const validSubCategories = [
                  ...form.subCategories.filter((cat) => cat !== ''),
                  ...customSubCategories.value,
                ]

                // Process ticket types
                const processedTickets = form.ticketTypes.map((ticket) => ({
                  ...ticket,
                  price: parseFloat(ticket.price),
                  quantity: parseInt(ticket.quantity),
                  name: sanitizeInput(ticket.name.trim()),
                  description: sanitizeInput(ticket.description.trim()),
                }))

                // Process images - convert File objects to data URLs
                let mainImageUrl = mainImagePreview.value
                let bannerImageUrl = bannerImagePreview.value

                // Get the selected event options
                const selectedEventOptions = [...form.selectedEventOptions, ...form.customEventOptions].filter(
                  Boolean,
                ) // Remove any falsy values

                // Prepare the event data
                const eventData = {
                  title: form.title,
                  description: form.description,
                  category: form.category,
                  subCategories: validSubCategories,
                  date: fullDateTime.value,
                  location: form.location,
                  price: parseFloat(form.price),
                  totalTickets: parseInt(form.totalTickets),
                  organizer: form.organizer,
                  duration: form.duration,
                  featured: form.featured,
                  imageIndex: form.imageIndex,
                  mainImage: mainImageUrl,
                  bannerImage: bannerImageUrl,
                  eventOptions: selectedEventOptions, // Add event options to the event data
                  selectedEventOptions: form.selectedEventOptions, // Store the original selected options
                  customEventOptions: form.customEventOptions, // Store the custom options
                  ticketTypes: processedTickets,
                  faqs: form.faqs.filter((faq) => faq.question.trim() && faq.answer.trim()), // Only include FAQs with content
                }

                // Create the event
                const newEvent = await eventStore.createEvent(eventData)

                success.value = true

                // Redirect to the event page after a brief delay
                setTimeout(() => {
                  router.push({ path: `/event/${newEvent.id}` })
                }, 2000)
              } catch (err) {
                error.value = err.message || 'Failed to create event'
                window.scrollTo({ top: 0, behavior: 'smooth' })
              } finally {
                isSubmitting.value = false
              }
            }

            // Reset form
            const resetForm = () => {
              Object.keys(form).forEach((key) => {
                if (key === 'price') {
                  form[key] = 0
                } else if (key === 'totalTickets') {
                  form[key] = 100
                } else if (key === 'featured') {
                  form[key] = false
                } else if (key === 'imageIndex') {
                  form[key] = Math.floor(Math.random() * 4)
                } else if (key === 'time') {
                  form[key] = '19:00'
                } else if (key === 'subCategories') {
                  form[key] = []
                } else if (key === 'ticketTypes') {
                  form[key] = [
                    {
                      name: 'General Admission',
                      price: 0,
                      quantity: 100,
                      description: '',
                      salesEndDate: '',
                      salesEndTime: '23:59',
                      isFeatured: false,
                    },
                  ]
                } else {
                  form[key] = ''
                }
              })

              Object.keys(validation).forEach((key) => {
                validation[key].valid = true
                validation[key].message = ''
              })

              error.value = null
              success.value = false

              // Also reset custom subcategories
              customSubCategories.value = []

              // Reset custom event options
              form.customEventOptions = []

              // Reset event options to defaults
              form.selectedEventOptions = ['Live performance', 'Food & drinks available', 'Indoor event']

              // Reset FAQs to defaults
              form.faqs = [
                {
                  question: "What's included in the ticket price?",
                  answer:
                    'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
                },
                {
                  question: "What's the refund policy?",
                  answer:
                    'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
                },
                {
                  question: 'Is there parking available?',
                  answer:
                    'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
                },
                {
                  question: 'What should I bring with me?',
                  answer:
                    'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
                },
                {
                  question: 'Are there age restrictions for this event?',
                  answer:
                    'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
                },
              ]
            }

            // Set min date to today for date picker
            // const today = new Date().toISOString().split('T')[0]

            // Open template modal for a specific ticket
            const openTemplateModal = (index) => {
              activeTicketIndex.value = index
              showTemplateModal.value = true
              document.body.style.overflow = 'hidden' // Prevent background scrolling
            }

            // Close template modal
            const closeTemplateModal = () => {
              showTemplateModal.value = false
              document.body.style.overflow = '' // Re-enable scrolling
            }

            // Apply template from modal and close the modal
            const applyTemplateFromModal = (index, template) => {
              applyTemplate(index, template)
              closeTemplateModal()
            }

            // Add FAQ
            const addFaq = () => {
              form.faqs.push({
                question: '',
                answer: '',
              })
            }

            // Remove FAQ
            const removeFaq = (index) => {
              form.faqs.splice(index, 1)
            }

            // Handle main image upload
            const handleMainImageUpload = (event) => {
              let file

              // Check if it's a drop event
              if (event.dataTransfer) {
                file = event.dataTransfer.files[0]
              } else if (event.target.files) {
                file = event.target.files[0]
              }

              if (file) {
                form.mainImage = file
                validation.mainImage.valid = true

                // Create a preview URL
                const reader = new FileReader()
                reader.onload = (e) => {
                  mainImagePreview.value = e.target.result
                }
                reader.readAsDataURL(file)
              }
            }

            // Handle banner image upload
            const handleBannerImageUpload = (event) => {
              let file

              // Check if it's a drop event
              if (event.dataTransfer) {
                file = event.dataTransfer.files[0]
              } else if (event.target.files) {
                file = event.target.files[0]
              }

              if (file) {
                form.bannerImage = file
                validation.bannerImage.valid = true

                // Create a preview URL
                const reader = new FileReader()
                reader.onload = (e) => {
                  bannerImagePreview.value = e.target.result
                }
                reader.readAsDataURL(file)
              }
            }

            // Remove main image - could be added to the UI if needed
            const removeMainImage = () => {
              form.mainImage = null
              mainImagePreview.value = null
              validation.mainImage.valid = false
              validation.mainImage.message = 'Please upload a main image'
            }

            // Remove banner image - could be added to the UI if needed
            const removeBannerImage = () => {
              form.bannerImage = null
              bannerImagePreview.value = null
              validation.bannerImage.valid = false
              validation.bannerImage.message = 'Please upload a banner image'
            }

            // Trigger main image upload
            const triggerMainImageUpload = () => {
              const input = document.getElementById('mainImage')
              input.click()
            }

            // Trigger banner image upload
            const triggerBannerImageUpload = () => {
              const input = document.getElementById('bannerImage')
              input.click()
            }

            // Add custom subcategory
            const addCustomSubCategory = () => {
              const trimmed = newCustomSubCategory.value.trim()
              if (
                trimmed &&
                customSubCategories.value.length < 5 &&
                !customSubCategories.value.includes(trimmed)
              ) {
                customSubCategories.value.push(trimmed)
                newCustomSubCategory.value = ''
              }
            }

            // Remove custom subcategory
            const removeCustomSubCategory = (index) => {
              customSubCategories.value.splice(index, 1)
            }

            // Get all displayed subcategories (selected + custom)
            const displayedSubCategories = computed(() => {
              return [...form.subCategories, ...customSubCategories.value]
            })

            // Get subcategory name by id
            const getSubCategoryName = (subCatId) => {
              // If it's a predefined subcategory
              if (typeof subCatId === 'string' && subCatId.startsWith('sub')) {
                const subCat = availableSubCategories.value.find((sc) => sc.id === subCatId)
                return subCat ? subCat.name : subCatId
              }
              // If it's a custom subcategory
              return subCatId
            }

            // Filter subcategories based on search term
            const filteredSubCategories = computed(() => {
              if (!subCategorySearchTerm.value) return availableSubCategories.value

              const searchTerm = subCategorySearchTerm.value.toLowerCase()
              return availableSubCategories.value.filter((sc) => sc.name.toLowerCase().includes(searchTerm))
            })

            // Count selected subcategories
            const selectedSubCategoriesCount = computed(() => {
              return tempSelectedSubCategories.value.length + customSubCategories.value.length
            })

            // Remove a subcategory from the form
            const removeSubCategoryById = (subCat) => {
              if (typeof subCat === 'string' && subCat.startsWith('sub')) {
                // If it's a predefined subcategory
                form.subCategories = form.subCategories.filter((sc) => sc !== subCat)
              } else {
                // If it's a custom subcategory
                customSubCategories.value = customSubCategories.value.filter((sc) => sc !== subCat)
              }
            }

            // Toggle subcategory selection
            const toggleSubCategory = (id) => {
              if (isSubCategorySelected(id)) {
                tempSelectedSubCategories.value = tempSelectedSubCategories.value.filter(
                  (subCatId) => subCatId !== id,
                )
              } else {
                if (selectedSubCategoriesCount.value < 5) {
                  tempSelectedSubCategories.value.push(id)
                }
              }
            }

            // Check if subcategory is selected
            const isSubCategorySelected = (id) => {
              return tempSelectedSubCategories.value.includes(id)
            }

            // Open subcategory modal
            const openSubCategoryModal = () => {
              if (form.category === '') {
                validation.category.valid = false
                validation.category.message = 'Select a category first'
                // Focus category dropdown
                const categoryElement = document.getElementById('category')
                if (categoryElement) categoryElement.focus()
                return
              }

              // Initialize the temp selection with current selection
              tempSelectedSubCategories.value = [...form.subCategories]
              showSubCategoryModal.value = true
              document.body.style.overflow = 'hidden' // Prevent background scrolling
            }

            // Close subcategory modal
            const closeSubCategoryModal = () => {
              showSubCategoryModal.value = false
              document.body.style.overflow = '' // Re-enable scrolling
              subCategorySearchTerm.value = ''
              newCustomSubCategory.value = ''
            }

            // Confirm subcategory selections
            const confirmSubCategories = () => {
              form.subCategories = [...tempSelectedSubCategories.value]
              closeSubCategoryModal()
            }

            // Handle main image drop
            const handleMainImageDrop = (event) => {
              event.preventDefault()
              handleMainImageUpload(event)
            }

            // Handle banner image drop
            const handleBannerImageDrop = (event) => {
              event.preventDefault()
              handleBannerImageUpload(event)
            }

            // Add custom event option
            const addCustomEventOption = () => {
              const trimmed = newCustomEventOption.value.trim()
              if (trimmed && form.customEventOptions.length < 5 && !form.customEventOptions.includes(trimmed)) {
                form.customEventOptions.push(trimmed)
                newCustomEventOption.value = ''
              }
            }

            // Remove custom event option
            const removeCustomEventOption = (index) => {
              form.customEventOptions.splice(index, 1)
            }

            // Toggle event option
            const toggleEventOption = (option) => {
              if (form.selectedEventOptions.includes(option)) {
                form.selectedEventOptions = form.selectedEventOptions.filter((opt) => opt !== option)
              } else {
                // Allow selecting more options - remove limit
                form.selectedEventOptions.push(option)
              }
            }

            // Check if event option is selected
            const isEventOptionSelected = (option) => {
              return form.selectedEventOptions.includes(option)
            }

            // Predefined event options
            const predefinedEventOptions = [
              'Live performance',
              'Food & drinks available',
              'Indoor event',
              'Outdoor event',
              'Accessible venue',
              'Family friendly',
              'Free parking',
              'VIP access',
              'Professional networking',
              'Photo opportunities',
              'Live streaming',
              'Q&A session',
              'Merchandise available',
              'Meet & greet',
              'Seating provided',
            ]

            const showDateTip = ref(false)
            const showTimeTip = ref(false)

            // Time picker variables
            const isTimePickerOpen = ref(false)
            const selectedTime = ref('07:00')
            const selectedPeriod = ref('AM')

            const timeOptions = [
              '01:00',
              '01:30',
              '02:00',
              '02:30',
              '03:00',
              '03:30',
              '04:00',
              '04:30',
              '05:00',
              '05:30',
              '06:00',
              '06:30',
              '07:00',
              '07:30',
              '08:00',
              '08:30',
              '09:00',
              '09:30',
              '10:00',
              '10:30',
              '11:00',
              '11:30',
              '12:00',
              '12:30',
            ]

            const openTimePicker = () => {
              // If there's already a time, parse it to 12-hour format for the picker
              if (form.time) {
                const [hours, minutes] = form.time.split(':')
                const hour = parseInt(hours)

                if (hour > 12) {
                  // Convert from 24-hour to 12-hour format for PM
                  selectedTime.value = `${(hour - 12).toString().padStart(2, '0')}:${minutes}`
                  selectedPeriod.value = 'PM'
                } else if (hour === 12) {
                  // 12 PM
                  selectedTime.value = `12:${minutes}`
                  selectedPeriod.value = 'PM'
                } else if (hour === 0) {
                  // 12 AM
                  selectedTime.value = `12:${minutes}`
                  selectedPeriod.value = 'AM'
                } else {
                  // Regular AM hours
                  selectedTime.value = `${hour.toString().padStart(2, '0')}:${minutes}`
                  selectedPeriod.value = 'AM'
                }
              } else {
                // Default to 7:00 AM if no time selected
                selectedTime.value = '07:00'
                selectedPeriod.value = 'AM'
              }

              isTimePickerOpen.value = true
            }

            const closeTimePicker = () => {
              isTimePickerOpen.value = false
            }

            const selectTime = (time) => {
              selectedTime.value = time
            }

            const selectPeriod = (period) => {
              selectedPeriod.value = period
            }

            const applyTimeSelection = () => {
              // Convert to 24-hour format if PM is selected
              if (selectedPeriod.value === 'PM') {
                const [hours, minutes] = selectedTime.value.split(':')
                const hour = parseInt(hours)

                // Only adjust hours that aren't already in PM format (12 PM stays as 12)
                const adjustedHour = hour === 12 ? 12 : hour + 12
                form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
              } else {
                // For AM, make sure 12 AM becomes 00:00
                const [hours, minutes] = selectedTime.value.split(':')
                const hour = parseInt(hours)
                const adjustedHour = hour === 12 ? 0 : hour
                form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
              }

              closeTimePicker()
            }

            // Date picker variables
            const isDatePickerOpen = ref(false)
            const currentYear = ref(new Date().getFullYear())
            const currentMonth = ref(new Date().getMonth())
            const selectedDate = ref(new Date())
            const tempSelectedDate = ref(null)

            // Custom time input variables
            const customHours = ref('07')
            const customMinutes = ref('00')

            // Define weekdays and month names for the calendar
            const weekdays = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
            const monthNames = [
              'January',
              'February',
              'March',
              'April',
              'May',
              'June',
              'July',
              'August',
              'September',
              'October',
              'November',
              'December',
            ]

            // Format time inputs when focus is lost
            const formatTimeInputs = () => {
              // Validate and format hours
              let formattedHours = parseInt(customHours.value) || 1
              if (formattedHours < 1) formattedHours = 1
              if (formattedHours > 12) formattedHours = 12

              // Validate and format minutes
              let formattedMinutes = parseInt(customMinutes.value) || 0
              if (formattedMinutes < 0) formattedMinutes = 0
              if (formattedMinutes > 59) formattedMinutes = 59

              // Update the ref values with formatted strings
              customHours.value = formattedHours.toString().padStart(2, '0')
              customMinutes.value = formattedMinutes.toString().padStart(2, '0')

              // Update selectedTime with formatted values
              selectedTime.value = `${formattedHours.toString().padStart(2, '0')}:${formattedMinutes.toString().padStart(2, '0')}`
            }

            // Function to prefill the form with test data
            const prefillForm = () => {
              // Generate a random event title to avoid duplicates
              const eventTypes = ['Workshop', 'Conference', 'Meetup', 'Concert', 'Festival', 'Webinar', 'Hackathon']
              const eventAdjectives = ['Amazing', 'Incredible', 'Ultimate', 'Exclusive', 'Premier', 'Annual', 'Interactive']
              const eventSubjects = ['Tech', 'Music', 'Art', 'Food', 'Business', 'Science', 'Wellness', 'Development']

              const randomTitle = `${eventAdjectives[Math.floor(Math.random() * eventAdjectives.length)]} ${
                eventSubjects[Math.floor(Math.random() * eventSubjects.length)]
              } ${eventTypes[Math.floor(Math.random() * eventTypes.length)]}`

              // Random location
              const cities = ['New York', 'San Francisco', 'Chicago', 'Los Angeles', 'Miami', 'Seattle', 'Austin', 'Boston']
              const venues = ['Convention Center', 'Concert Hall', 'Community Space', 'Hotel Ballroom', 'Outdoor Park', 'Art Gallery']
              const randomLocation = `${venues[Math.floor(Math.random() * venues.length)]}, ${
                cities[Math.floor(Math.random() * cities.length)]
              }`

              // Select a random category
              const randomCategory = categories.value[Math.floor(Math.random() * categories.value.length)].id

              // Generate random date and time (between 1-3 months in the future)
              const futureDate = new Date()
              futureDate.setDate(futureDate.getDate() + 30 + Math.floor(Math.random() * 60)) // 30-90 days in future

              const year = futureDate.getFullYear()
              const month = (futureDate.getMonth() + 1).toString().padStart(2, '0')
              const day = futureDate.getDate().toString().padStart(2, '0')
              const formattedDate = `${year}-${month}-${day}`

              // Random time (morning, afternoon, or evening)
              const hours = [9, 10, 13, 14, 18, 19]
              const randomHour = hours[Math.floor(Math.random() * hours.length)]
              const randomMinutes = ['00', '15', '30', '45'][Math.floor(Math.random() * 4)]
              const formattedTime = `${randomHour.toString().padStart(2, '0')}:${randomMinutes}`

              // Random price (free or $10-$150)
              const randomPrice = Math.random() > 0.2 ? (Math.floor(Math.random() * 14) + 1) * 10 + 0.99 : 0

              // Random ticket count
              const randomTickets = (Math.floor(Math.random() * 10) + 1) * 50

              // Random duration
              const durations = ['2 hours', '3 hours', '4 hours', 'All day', '2 days', 'Weekend']
              const randomDuration = durations[Math.floor(Math.random() * durations.length)]

              // Fill the form with the random data
              form.title = randomTitle
              form.organizer = 'Test Organizer LLC'
              form.description = `Join us for this amazing event where you'll experience the best of ${eventSubjects[Math.floor(Math.random() * eventSubjects.length)]}.

            This is a great opportunity to network with like-minded individuals and learn from industry experts. Don't miss out on this incredible experience!

            • Professional speakers
            • Networking opportunities
            • Hands-on activities
            • Refreshments provided
            • Take-home materials`

              form.location = randomLocation
              form.category = randomCategory
              form.date = formattedDate
              form.time = formattedTime
              form.price = randomPrice.toString()
              form.totalTickets = randomTickets.toString()
              form.duration = randomDuration
              form.featured = Math.random() > 0.5 // 50% chance to be featured

              // Select 3-5 random event options
              form.selectedEventOptions = []
              const shuffledOptions = [...predefinedEventOptions].sort(() => 0.5 - Math.random())
              const optionsCount = Math.floor(Math.random() * 3) + 3 // 3-5 options
              form.selectedEventOptions = shuffledOptions.slice(0, optionsCount)

              // Add 1-2 custom options
              form.customEventOptions = []
              const customOptionIdeas = [
                'Free merchandise',
                'After-party included',
                'Video recording available',
                'Certificate provided',
                'Professional photos',
                'Translation services',
                'VIP meet & greet'
              ]

              if (Math.random() > 0.5) {
                const shuffledCustomOptions = [...customOptionIdeas].sort(() => 0.5 - Math.random())
                const customCount = Math.floor(Math.random() * 2) + 1 // 1-2 custom options
                form.customEventOptions = shuffledCustomOptions.slice(0, customCount)
              }

              // Add ticket types
              form.ticketTypes = [
                {
                  name: 'General Admission',
                  price: randomPrice,
                  quantity: Math.floor(randomTickets * 0.7), // 70% of tickets
                  description: 'Standard entry ticket with access to all areas.',
                  salesEndDate: '',
                  salesEndTime: '23:59',
                  isFeatured: false
                }
              ]

              if (Math.random() > 0.3) { // 70% chance to have VIP tickets
                form.ticketTypes.push({
                  name: 'VIP Experience',
                  price: randomPrice * 2.5,
            <template>
              <div class="create-event">
                <div class="container">
                  <router-link to="/" class="back-link">
                    <svg
                      width="20"
                      height="20"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M19 12H5"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                      <path
                        d="M12 19L5 12L12 5"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                    <span>BACK</span>
                  </router-link>

                  <div class="create-event__header">
                    <h1 class="create-event__title">Make Your Event dYZ%</h1>
                    <p class="create-event__subtitle">Fill out this form to create your event - it's easy!</p>
                    <button type="button" @click="prefillForm" class="prefill-button">
                      Prefill with Test Data
                    </button>
                  </div>

                  <div v-if="error" class="create-event__alert create-event__alert--error">
                    {{ error }}
                  </div>

                  <div v-if="success" class="create-event__alert create-event__alert--success">
                    Event created successfully! Redirecting to event page...
                  </div>

                  <form @submit.prevent="handleSubmit" class="create-event__form">
                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Event Information
                      </h2>

                      <div class="form-group">
                        <label for="title" class="form-label">Event Name</label>
                        <input
                          id="title"
                          v-model="form.title"
                          type="text"
                          class="form-input"
                          :class="{ 'form-input--error': !validation.title.valid }"
                          placeholder="What's your event called?"
                        />
                        <p v-if="!validation.title.valid" class="form-error">{{ validation.title.message }}</p>
                        <p v-else class="form-helper">Name it something people will understand right away</p>
                      </div>

                      <div class="form-group">
                        <label for="organizer" class="form-label">Organizer Name</label>
                        <input
                          id="organizer"
                          v-model="form.organizer"
                          type="text"
                          class="form-input"
                          :class="{ 'form-input--error': !validation.organizer.valid }"
                          placeholder="Who's hosting this?"
                        />
                        <p v-if="!validation.organizer.valid" class="form-error">
                          {{ validation.organizer.message }}
                        </p>
                      </div>

                      <div class="form-group">
                        <label for="category" class="form-label">Event Category</label>
                        <select
                          id="category"
                          v-model="form.category"
                          class="form-select"
                          :class="{ 'form-input--error': !validation.category.valid }"
                        >
                          <option value="" disabled>Select a category</option>
                          <option v-for="category in categories" :key="category.id" :value="category.id">
                            {{ category.name }}
                          </option>
                        </select>
                        <p v-if="!validation.category.valid" class="form-error">
                          {{ validation.category.message }}
                        </p>
                        <p v-else class="form-helper">The right category helps people find your event</p>
                      </div>

                      <div class="form-group">
                        <label class="form-label">Sub Categories</label>
                        <div class="subcategories-display">
                          <div class="selected-subcategories">
                            <div v-if="displayedSubCategories.length === 0" class="no-subcategories">
                              No subcategories selected
                            </div>
                            <div
                              v-for="(subCat, index) in displayedSubCategories"
                              :key="index"
                              class="selected-subcategory"
                            >
                              <span>{{ getSubCategoryName(subCat) }}</span>
                              <button
                                type="button"
                                @click="removeSubCategoryById(subCat)"
                                class="remove-subcategory-btn"
                                aria-label="Remove subcategory"
                              >
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>
                          <button
                            type="button"
                            @click="openSubCategoryModal"
                            class="manage-subcategories-btn"
                            :disabled="form.category === ''"
                          >
                            <svg
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M12 5V19"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                              />
                              <path
                                d="M5 12H19"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                              />
                            </svg>
                            <span>{{ displayedSubCategories.length ? 'Edit' : 'Add' }} Subcategories</span>
                          </button>
                        </div>
                        <p v-if="!validation.subCategories.valid" class="form-error">
                          {{ validation.subCategories.message }}
                        </p>
                        <p v-else class="form-helper">
                          Add up to 5 subcategories to describe your event better
                        </p>
                      </div>

                      <div class="form-group">
                        <label for="description" class="form-label">Event Description</label>
                        <textarea
                          id="description"
                          v-model="form.description"
                          class="form-textarea"
                          :class="{ 'form-input--error': !validation.description.valid }"
                          placeholder="Tell people what makes your event special..."
                          rows="5"
                        ></textarea>
                        <p v-if="!validation.description.valid" class="form-error">
                          {{ validation.description.message }}
                        </p>
                        <p v-else class="form-helper">Tell people what will happen at your event</p>
                      </div>

                      <div class="form-group">
                        <label class="form-label">Event Images</label>
                        <div class="image-upload-container">
                          <div class="image-upload-row">
                            <div
                              class="image-upload-dropzone"
                              :class="{ 'has-image': mainImagePreview }"
                              @click="triggerMainImageUpload"
                              @dragover.prevent
                              @drop.prevent="handleMainImageDrop"
                            >
                              <img
                                v-if="mainImagePreview"
                                :src="mainImagePreview"
                                alt="Main image preview"
                                class="preview-image"
                              />
                              <div v-if="mainImagePreview" class="image-overlay">
                                <button type="button" class="remove-image-btn" @click.stop="removeMainImage">
                                  <svg
                                    width="20"
                                    height="20"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M18 6L6 18"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                    <path
                                      d="M6 6L18 18"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                  </svg>
                                  <span>Remove</span>
                                </button>
                              </div>
                              <div v-else class="upload-placeholder">
                                <div class="upload-icon">
                                  <svg
                                    width="32"
                                    height="32"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <rect
                                      x="3"
                                      y="3"
                                      width="18"
                                      height="18"
                                      rx="2"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                    />
                                    <path
                                      d="M3 16L7 12C7.94 11.06 9.44 11.06 10.38 12L16.5 18"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                    />
                                    <path
                                      d="M14 16L16 14C16.94 13.06 18.44 13.06 19.38 14L21 15.5"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                    />
                                    <circle cx="9" cy="8" r="2" stroke="currentColor" stroke-width="1.5" />
                                  </svg>
                                </div>
                                <div class="upload-text">
                                  <span class="primary-text">Main Event Image</span>
                                  <span class="secondary-text">Drag & drop or click to upload</span>
                                </div>
                              </div>
                            </div>

                            <div
                              class="image-upload-dropzone banner-dropzone"
                              :class="{ 'has-image': bannerImagePreview }"
                              @click="triggerBannerImageUpload"
                              @dragover.prevent
                              @drop.prevent="handleBannerImageDrop"
                            >
                              <img
                                v-if="bannerImagePreview"
                                :src="bannerImagePreview"
                                alt="Banner image preview"
                                class="preview-image"
                              />
                              <div v-if="bannerImagePreview" class="image-overlay">
                                <button type="button" class="remove-image-btn" @click.stop="removeBannerImage">
                                  <svg
                                    width="20"
                                    height="20"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M18 6L6 18"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                    <path
                                      d="M6 6L18 18"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                  </svg>
                                  <span>Remove</span>
                                </button>
                              </div>
                              <div v-else class="upload-placeholder">
                                <div class="upload-icon">
                                  <svg
                                    width="32"
                                    height="32"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <rect
                                      x="2"
                                      y="4"
                                      width="20"
                                      height="13"
                                      rx="2"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                    />
                                    <path
                                      d="M2 13L6 9C6.94 8.06 8.44 8.06 9.38 9L15.5 15"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                    />
                                    <path
                                      d="M14 13L16 11C16.94 10.06 18.44 10.06 19.38 11L22 13.5"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                    />
                                    <circle cx="8" cy="7" r="1.5" stroke="currentColor" stroke-width="1.5" />
                                  </svg>
                                </div>
                                <div class="upload-text">
                                  <span class="primary-text">Banner Image</span>
                                  <span class="secondary-text">Drag & drop or click to upload</span>
                                </div>
                              </div>
                            </div>
                          </div>

                          <div class="image-inputs">
                            <input
                              id="mainImage"
                              ref="mainImageInput"
                              type="file"
                              class="image-input"
                              accept="image/*"
                              @change="handleMainImageUpload"
                            />
                            <input
                              id="bannerImage"
                              ref="bannerImageInput"
                              type="file"
                              class="image-input"
                              accept="image/*"
                              @change="handleBannerImageUpload"
                            />
                          </div>
                        </div>
                        <p
                          v-if="!validation.mainImage.valid || !validation.bannerImage.valid"
                          class="form-error"
                        >
                          {{
                            !validation.mainImage.valid
                              ? validation.mainImage.message
                              : validation.bannerImage.message
                          }}
                        </p>
                        <p v-else class="form-helper">
                          Upload images for your event. The main image will appear on cards throughout the site,
                          while the banner will be displayed on your event's detail page.
                        </p>
                      </div>
                    </div>

                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Date & Time
                      </h2>

                      <div class="form-row">
                        <div class="form-group">
                          <label for="date" class="form-label">Event Date</label>
                          <div class="date-picker-wrapper">
                            <input
                              id="date"
                              v-model="form.date"
                              type="text"
                              readonly
                              class="form-input date-input"
                              :class="{ 'form-input--error': !validation.date.valid }"
                              :min="today"
                              @click="openDatePicker"
                            />
                            <div v-if="showDateTip" class="picker-tip">
                              <div class="tip-arrow"></div>
                              <div class="tip-content">
                                <p>Click to open calendar</p>
                                <span>Select a date for your event</span>
                              </div>
                            </div>
                          </div>
                          <p v-if="!validation.date.valid" class="form-error">{{ validation.date.message }}</p>
                          <p v-else class="form-helper">Click to open the calendar</p>
                        </div>

                        <div class="form-group">
                          <label for="time" class="form-label">Start Time</label>
                          <div class="time-picker-wrapper">
                            <input
                              id="time"
                              v-model="form.time"
                              type="text"
                              readonly
                              class="form-input time-input"
                              :class="{ 'form-input--error': !validation.time.valid }"
                              @click="openTimePicker"
                              placeholder="Select a time"
                            />
                            <div v-if="showTimeTip" class="picker-tip">
                              <div class="tip-arrow"></div>
                              <div class="tip-content">
                                <p>Click to select time</p>
                                <span>Use our easy time selector</span>
                              </div>
                            </div>
                          </div>
                          <p v-if="!validation.time.valid" class="form-error">{{ validation.time.message }}</p>
                          <p v-else class="form-helper">Click to open time selector</p>
                        </div>
                      </div>

                      <div class="form-group">
                        <label for="duration" class="form-label">Event Duration</label>
                        <select id="duration" v-model="form.duration" class="form-select">
                          <option value="" disabled>Select duration</option>
                          <option v-for="option in durationOptions" :key="option" :value="option">
                            {{ option }}
                          </option>
                        </select>
                        <p class="form-helper">Tell people how long your event will last</p>
                      </div>
                    </div>

                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Location Details
                      </h2>

                      <div class="form-group">
                        <label for="location" class="form-label">Venue Name & Address</label>
                        <input
                          id="location"
                          v-model="form.location"
                          type="text"
                          class="form-input"
                          :class="{ 'form-input--error': !validation.location.valid }"
                          placeholder="Where is your event happening?"
                        />
                        <p v-if="!validation.location.valid" class="form-error">
                          {{ validation.location.message }}
                        </p>
                        <p v-else class="form-helper">Add the full address so people can find your event</p>
                      </div>

                      <div class="location-map-placeholder">
                        <div class="location-map-content">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          >
                            <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                            <circle cx="12" cy="10" r="3"></circle>
                          </svg>
                          <p>Maps coming soon</p>
                        </div>
                      </div>
                    </div>

                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Ticket Information
                      </h2>

                      <div v-if="!validation.ticketTypes.valid" class="form-error ticket-types-error">
                        {{ validation.ticketTypes.message }}
                      </div>

                      <div class="ticket-types-container">
                        <div v-for="(ticket, index) in form.ticketTypes" :key="index" class="ticket-type-card">
                          <div class="ticket-type-header">
                            <h3 class="ticket-type-title">Ticket #{{ index + 1 }}</h3>
                            <div class="ticket-type-actions">
                              <button
                                type="button"
                                @click="duplicateTicketType(index)"
                                class="ticket-action-btn ticket-action-duplicate"
                                title="Duplicate ticket"
                              >
                                <svg
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <rect
                                    x="9"
                                    y="9"
                                    width="13"
                                    height="13"
                                    rx="2"
                                    stroke="currentColor"
                                    stroke-width="2"
                                  />
                                  <path
                                    d="M5 15H4C2.89543 15 2 14.1046 2 13V4C2 2.89543 2.89543 2 4 2H13C14.1046 2 15 2.89543 15 4V5"
                                    stroke="currentColor"
                                    stroke-width="2"
                                  />
                                </svg>
                              </button>
                              <button
                                type="button"
                                @click="removeTicketType(index)"
                                class="ticket-action-btn ticket-action-remove"
                                title="Remove ticket"
                                :disabled="form.ticketTypes.length <= 1"
                              >
                                <svg
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>

                          <div class="form-group">
                            <label :for="'ticket-name-' + index" class="form-label">Ticket Name</label>
                            <div class="ticket-name-input-wrapper">
                              <input
                                :id="'ticket-name-' + index"
                                v-model="ticket.name"
                                type="text"
                                class="form-input"
                                placeholder="e.g. Early Bird, VIP, General Admission"
                              />
                              <div class="ticket-template-dropdown">
                                <button
                                  type="button"
                                  class="ticket-template-btn"
                                  @click="openTemplateModal(index)"
                                >
                                  <span>Templates</span>
                                  <svg
                                    width="14"
                                    height="14"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M6 9L12 15L18 9"
                                      stroke="currentColor"
                                      stroke-width="2"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"
                                    />
                                  </svg>
                                </button>
                                <div class="ticket-template-options">
                                  <button
                                    v-for="template in ticketTemplates"
                                    :key="template.name"
                                    type="button"
                                    class="ticket-template-option"
                                    @click="applyTemplate(index, template)"
                                  >
                                    {{ template.name }}
                                  </button>
                                </div>
                              </div>
                            </div>
                          </div>

                          <div class="form-row">
                            <div class="form-group">
                              <label :for="'ticket-price-' + index" class="form-label">Price ($)</label>
                              <input
                                :id="'ticket-price-' + index"
                                v-model.number="ticket.price"
                                type="number"
                                min="0"
                                step="0.01"
                                class="form-input"
                                placeholder="0.00"
                              />
                            </div>

                            <div class="form-group">
                              <label :for="'ticket-quantity-' + index" class="form-label">Quantity</label>
                              <input
                                :id="'ticket-quantity-' + index"
                                v-model.number="ticket.quantity"
                                type="number"
                                min="1"
                                class="form-input"
                                placeholder="10"
                              />
                            </div>
                          </div>

                          <div class="form-group">
                            <label :for="'ticket-description-' + index" class="form-label"
                              >Description (Optional)</label
                            >
                            <textarea
                              :id="'ticket-description-' + index"
                              v-model="ticket.description"
                              class="form-textarea ticket-description"
                              rows="2"
                              placeholder="Describe what's included with this ticket"
                            ></textarea>
                          </div>

                          <div class="ticket-sales-period">
                            <h4 class="ticket-section-subtitle">Sales End Date</h4>
                            <p class="ticket-section-helper">
                              Should this ticket type have a deadline? If yes, tell us when sales should stop.
                              This is optional.
                            </p>

                            <div class="form-row">
                              <div class="form-group">
                                <label :for="'ticket-end-date-' + index" class="form-label">Date</label>
                                <input
                                  :id="'ticket-end-date-' + index"
                                  v-model="ticket.salesEndDate"
                                  type="date"
                                  class="form-input"
                                  :min="today"
                                  :max="form.date"
                                />
                              </div>

                              <div class="form-group">
                                <label :for="'ticket-end-time-' + index" class="form-label">Time</label>
                                <input
                                  :id="'ticket-end-time-' + index"
                                  v-model="ticket.salesEndTime"
                                  type="time"
                                  class="form-input"
                                />
                              </div>
                            </div>
                          </div>

                          <div class="form-checkbox-wrapper">
                            <input
                              :id="'ticket-featured-' + index"
                              v-model="ticket.isFeatured"
                              type="checkbox"
                              class="form-checkbox"
                            />
                            <label :for="'ticket-featured-' + index" class="form-checkbox-label">
                              Feature this ticket (highlighted in the ticket selection)
                            </label>
                          </div>
                        </div>

                        <button type="button" @click="addTicketType" class="add-ticket-type-btn">
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 5V19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                            <path
                              d="M5 12H19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                          <span>Add Another Ticket Type</span>
                        </button>
                      </div>
                    </div>

                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Event Options
                      </h2>

                      <p class="section-intro">
                        Select features and amenities that your event offers to help attendees know what to
                        expect.
                      </p>

                      <div class="event-options-container">
                        <div class="event-options-grid">
                          <!-- Predefined event options -->
                          <div
                            v-for="option in predefinedEventOptions"
                            :key="'predefined-' + option"
                            class="event-option-item"
                            @click="toggleEventOption(option)"
                          >
                            <div
                              class="event-option-checkbox"
                              :class="{ 'event-option-checkbox--selected': isEventOptionSelected(option) }"
                            >
                              <div class="event-option-label">{{ option }}</div>
                              <svg
                                v-if="isEventOptionSelected(option)"
                                width="16"
                                height="16"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                                class="event-option-checkmark"
                              >
                                <path
                                  d="M20 6L9 17L4 12"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </div>
                          </div>

                          <!-- Custom event options -->
                          <div
                            v-for="(option, index) in form.customEventOptions"
                            :key="'custom-' + index"
                            class="event-option-item"
                          >
                            <div class="event-option-checkbox event-option-checkbox--selected">
                              <div class="event-option-label">{{ option }}</div>
                              <button
                                type="button"
                                @click="removeCustomEventOption(index)"
                                class="remove-option-btn"
                                aria-label="Remove option"
                              >
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>
                        </div>

                        <div class="add-event-option">
                          <div class="custom-event-option-input">
                            <input
                              type="text"
                              v-model="newCustomEventOption"
                              placeholder="Add your own event option..."
                              class="form-input custom-option-input"
                              @keyup.enter="addCustomEventOption"
                            />
                            <button
                              type="button"
                              class="add-custom-option-btn"
                              @click="addCustomEventOption"
                              :disabled="!newCustomEventOption.trim()"
                            >
                              Add
                            </button>
                          </div>
                        </div>
                      </div>

                      <div class="form-checkbox-wrapper mt-4">
                        <input id="featured" v-model="form.featured" type="checkbox" class="form-checkbox" />
                        <label for="featured" class="form-checkbox-label">
                          Feature this event (additional promotion fee may apply)
                        </label>
                      </div>
                      <p class="form-helper">Featured events show up on the homepage</p>
                    </div>

                    <!-- Add new FAQ section -->
                    <div class="form-section">
                      <h2 class="section-title">
                        <span class="diamond"></span>
                        Frequently Asked Questions
                        <span class="section-optional">(Optional)</span>
                      </h2>

                      <p class="section-intro">
                        Help attendees by answering common questions about your event. You can edit these
                        defaults or add your own.
                      </p>

                      <div class="faq-container">
                        <div v-for="(faq, index) in form.faqs" :key="index" class="faq-item">
                          <div class="faq-header">
                            <h3 class="faq-number">Q{{ index + 1 }}</h3>
                            <div class="faq-actions">
                              <button
                                type="button"
                                @click="removeFaq(index)"
                                class="faq-action-btn faq-action-remove"
                                title="Remove question"
                              >
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>

                          <div class="faq-content">
                            <div class="form-group">
                              <label :for="'faq-question-' + index" class="form-label">Question</label>
                              <input
                                :id="'faq-question-' + index"
                                v-model="faq.question"
                                type="text"
                                class="form-input"
                                placeholder="Enter a question guests might ask"
                              />
                            </div>

                            <div class="form-group">
                              <label :for="'faq-answer-' + index" class="form-label">Answer</label>
                              <textarea
                                :id="'faq-answer-' + index"
                                v-model="faq.answer"
                                class="form-textarea faq-answer"
                                rows="3"
                                placeholder="Provide a clear answer to the question"
                              ></textarea>
                            </div>
                          </div>
                        </div>

                        <button type="button" @click="addFaq" class="add-faq-btn">
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 5V19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                            <path
                              d="M5 12H19"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                          <span>Add Another Question</span>
                        </button>
                      </div>
                    </div>

                    <div class="form-actions">
                      <button type="button" @click="resetForm" class="btn-secondary" :disabled="isSubmitting">
                        Reset Form
                      </button>
                      <button type="submit" class="btn-primary" :disabled="isSubmitting">
                        <span v-if="isSubmitting">
                          <svg class="spinner" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="12" cy="12" r="10" fill="none" stroke-width="3" />
                          </svg>
                          Creating Event...
                        </span>
                        <span v-else>Create Event</span>
                      </button>
                    </div>
                  </form>

                  <div class="create-event__note">
                    <p>
                      <strong>Note:</strong> Your event data is saved locally for now. Online saving coming
                      soon.
                    </p>
                  </div>
                </div>

                <div
                  v-if="showTemplateModal"
                  class="ticket-template-modal-overlay"
                  @click.self="closeTemplateModal"
                >
                  <div class="ticket-template-modal">
                    <div class="ticket-template-modal-header">
                      <h3>Choose a Ticket Template</h3>
                      <button @click="closeTemplateModal" class="modal-close-btn" aria-label="Close">
                        <svg
                          width="20"
                          height="20"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M18 6L6 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M6 6L18 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>
                    <div class="ticket-template-modal-body">
                      <div
                        v-for="template in ticketTemplates"
                        :key="template.name"
                        class="template-card"
                        @click="applyTemplateFromModal(activeTicketIndex, template)"
                      >
                        <div class="template-card-content">
                          <h4 class="template-name">{{ template.name }}</h4>
                          <p class="template-description">{{ template.description }}</p>
                        </div>
                        <div class="template-card-icon">
                          <svg
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M20 6L9 17L4 12"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Add subcategory modal -->
                <div
                  v-if="showSubCategoryModal"
                  class="subcategory-modal-overlay"
                  @click.self="closeSubCategoryModal"
                >
                  <div class="subcategory-modal">
                    <div class="subcategory-modal-header">
                      <h3>Select or Add Subcategories</h3>
                      <button @click="closeSubCategoryModal" class="modal-close-btn" aria-label="Close">
                        <svg
                          width="20"
                          height="20"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M18 6L6 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M6 6L18 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>
                    <div class="subcategory-modal-body">
                      <p class="subcategory-modal-info">Select up to 5 subcategories or add your own</p>

                      <div class="subcategory-search">
                        <input
                          type="text"
                          v-model="subcategorySearchTerm"
                          placeholder="Search subcategories..."
                          class="subcategory-search-input"
                        />
                      </div>

                      <div class="subcategory-options">
                        <div class="subcategory-section">
                          <h4 class="subcategory-section-title">Available Subcategories</h4>
                          <div class="subcategory-chips">
                            <div
                              v-for="subCategory in filteredSubCategories"
                              :key="subCategory.id"
                              class="subcategory-chip"
                              :class="{ 'subcategory-chip--selected': isSubCategorySelected(subCategory.id) }"
                              @click="toggleSubCategory(subCategory.id)"
                            >
                              <span>{{ subCategory.name }}</span>
                              <svg
                                v-if="isSubCategorySelected(subCategory.id)"
                                width="16"
                                height="16"
                                viewBox="0 0 24 24"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  d="M20 6L9 17L4 12"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                />
                              </svg>
                            </div>
                          </div>
                        </div>

                        <div class="subcategory-section">
                          <h4 class="subcategory-section-title">Custom Subcategories</h4>
                          <div class="custom-subcategory-input">
                            <input
                              type="text"
                              v-model="newCustomSubCategory"
                              placeholder="Enter your own subcategory..."
                              class="form-input custom-input"
                              @keyup.enter="addCustomSubCategory"
                            />
                            <button
                              type="button"
                              class="add-custom-btn"
                              @click="addCustomSubCategory"
                              :disabled="!newCustomSubCategory.trim()"
                            >
                              Add
                            </button>
                          </div>

                          <div class="subcategory-chips custom-chips">
                            <div
                              v-for="(custom, index) in customSubCategories"
                              :key="'custom-' + index"
                              class="subcategory-chip subcategory-chip--custom"
                            >
                              <span>{{ custom }}</span>
                              <button
                                class="remove-custom-btn"
                                @click="removeCustomSubCategory(index)"
                                aria-label="Remove"
                              >
                                <svg
                                  width="14"
                                  height="14"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M18 6L6 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                  <path
                                    d="M6 6L18 18"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                  />
                                </svg>
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>

                      <div class="subcategory-modal-footer">
                        <div class="subcategory-summary">
                          <span class="subcategory-count">{{ selectedSubCategoriesCount }}/5 selected</span>
                        </div>
                        <div class="subcategory-actions">
                          <button type="button" class="btn-secondary" @click="closeSubCategoryModal">
                            Cancel
                          </button>
                          <button type="button" class="btn-primary" @click="confirmSubCategories">Apply</button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Custom Time Picker Modal -->
                <div v-if="isTimePickerOpen" class="time-picker-overlay" @click.self="closeTimePicker">
                  <div class="time-picker-modal">
                    <div class="time-picker-header">
                      <h3>Select Time</h3>
                      <button type="button" class="time-picker-close" @click="closeTimePicker">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M18 6L6 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M6 6L18 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>
                    <div class="time-picker-body">
                      <!-- Custom time input -->
                      <div class="custom-time-input">
                        <div class="time-input-group">
                          <input
                            type="text"
                            v-model="customHours"
                            class="time-input-field"
                            maxlength="2"
                            @focus="$event.target.select()"
                            @blur="formatTimeInputs"
                            @keydown="handleTimeInput"
                            placeholder="HH"
                          />
                          <span class="time-divider">:</span>
                          <input
                            type="text"
                            v-model="customMinutes"
                            class="time-input-field"
                            maxlength="2"
                            @focus="$event.target.select()"
                            @blur="formatTimeInputs"
                            @keydown="handleTimeInput"
                            placeholder="MM"
                          />
                        </div>
                      </div>

                      <div class="time-picker-grid">
                        <div
                          v-for="time in timeOptions"
                          :key="time"
                          class="time-option"
                          :class="{ selected: selectedTime === time }"
                          @click="selectTime(time)"
                        >
                          {{ time }}
                        </div>
                      </div>
                      <div class="time-period-selector">
                        <button
                          type="button"
                          class="time-period-btn"
                          :class="{ selected: selectedPeriod === 'AM' }"
                          @click="selectPeriod('AM')"
                        >
                          AM
                        </button>
                        <button
                          type="button"
                          class="time-period-btn"
                          :class="{ selected: selectedPeriod === 'PM' }"
                          @click="selectPeriod('PM')"
                        >
                          PM
                        </button>
                      </div>
                    </div>
                    <div class="time-picker-actions">
                      <button type="button" class="time-picker-btn time-picker-cancel" @click="closeTimePicker">
                        Cancel
                      </button>
                      <button
                        type="button"
                        class="time-picker-btn time-picker-apply"
                        @click="applyTimeSelection"
                      >
                        Apply
                      </button>
                    </div>
                  </div>
                </div>

                <!-- Custom Date Picker Modal -->
                <div v-if="isDatePickerOpen" class="date-picker-overlay" @click.self="closeDatePicker">
                  <div class="date-picker-modal">
                    <div class="date-picker-header">
                      <h3>Select Date</h3>
                      <button type="button" class="date-picker-close" @click="closeDatePicker">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M18 6L6 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M6 6L18 18"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </svg>
                      </button>
                    </div>
                    <div class="date-picker-body">
                      <div class="date-picker-month-nav">
                        <button class="month-nav-btn" @click="previousMonth">
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M15 18L9 12L15 6"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                        </button>
                        <div class="month-display">{{ monthNames[currentMonth] }} {{ currentYear }}</div>
                        <button class="month-nav-btn" @click="nextMonth">
                          <svg
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M9 18L15 12L9 6"
                              stroke="currentColor"
                              stroke-width="2"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            />
                          </svg>
                        </button>
                      </div>

                      <div class="date-picker-weekdays">
                        <div class="weekday" v-for="day in weekdays" :key="day">{{ day }}</div>
                      </div>

                      <div class="date-picker-days">
                        <div
                          v-for="(day, index) in calendarDays"
                          :key="index"
                          class="calendar-day"
                          :class="{
                            'other-month': !day.inCurrentMonth,
                            today: day.isToday,
                            selected: day.isSelected,
                            disabled: day.isDisabled,
                          }"
                          @click="!day.isDisabled && selectDate(day.date)"
                        >
                          {{ day.day }}
                        </div>
                      </div>
                    </div>
                    <div class="date-picker-actions">
                      <button type="button" class="date-picker-btn date-picker-cancel" @click="closeDatePicker">
                        Cancel
                      </button>
                      <button
                        type="button"
                        class="date-picker-btn date-picker-apply"
                        @click="applyDateSelection"
                      >
                        Apply
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </template>

            <script setup>
            import { ref, computed, reactive, watch, onMounted } from 'vue'
            import { useRouter } from 'vue-router'
            import { useEventStore } from '@/stores/events'

            // Initialize references
            const router = useRouter()
            const eventStore = useEventStore()
            const error = ref(null)
            const success = ref(false)
            const isSubmitting = ref(false)
            const today = ref(new Date().toISOString().split('T')[0]) // Today's date in YYYY-MM-DD format
            const showTemplateModal = ref(false)
            const activeTicketIndex = ref(0)
            const showSubCategoryModal = ref(false)
            const tempSelectedSubCategories = ref([]) // Temporary storage for selected subcategories in modal
            const subCategorySearchTerm = ref('')
            const customSubCategories = ref([])
            const newCustomSubCategory = ref('')
            const categories = ref([])
            const availableSubCategories = ref([])
            const mainImagePreview = ref(null)
            const bannerImagePreview = ref(null)
            const newCustomEventOption = ref('')

            // Also initialize form with image fields
            const form = reactive({
              title: '',
              description: '',
              category: '',
              subCategories: [],
              date: '',
              time: '19:00',
              location: '',
              price: 0,
              totalTickets: 100,
              organizer: '',
              duration: '',
              featured: false,
              imageIndex: Math.floor(Math.random() * 4), // Random image from available set
              mainImage: null,
              bannerImage: null,
              selectedEventOptions: [], // Start with no options selected
              customEventOptions: [], // For user-added custom options
              ticketTypes: [
                {
                  name: 'General Admission',
                  price: 0,
                  quantity: 100,
                  description: '',
                  salesEndDate: '',
                  salesEndTime: '23:59',
                  isFeatured: false,
                },
              ],
              // Add FAQs to the form data
              faqs: [
                {
                  question: "What's included in the ticket price?",
                  answer:
                    'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
                },
                {
                  question: "What's the refund policy?",
                  answer:
                    'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
                },
                {
                  question: 'Is there parking available?',
                  answer:
                    'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
                },
                {
                  question: 'What should I bring with me?',
                  answer:
                    'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
                },
                {
                  question: 'Are there age restrictions for this event?',
                  answer:
                    'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
                },
              ],
            })

            // Form validation
            const validation = reactive({
              title: { valid: true, message: '' },
              description: { valid: true, message: '' },
              category: { valid: true, message: '' },
              subCategories: { valid: true, message: '' },
              date: { valid: true, message: '' },
              time: { valid: true, message: '' },
              location: { valid: true, message: '' },
              price: { valid: true, message: '' },
              totalTickets: { valid: true, message: '' },
              organizer: { valid: true, message: '' },
              ticketTypes: { valid: true, message: '' },
              mainImage: { valid: true, message: '' },
              bannerImage: { valid: true, message: '' },
            })

            // Fetch categories on mount
            onMounted(async () => {
              try {
                // This will be replaced with API call later
                const eventService = (await import('@/services/eventService')).default
                categories.value = await eventService.getAllCategories()

                // Get sub-categories or initialize with mock data if the service doesn't provide them
                try {
                  availableSubCategories.value = await eventService.getAllSubCategories()
                } catch {
                  // If the service doesn't have getAllSubCategories method yet, use mock data
                  availableSubCategories.value = [
                    { id: 'sub1', name: 'Workshop' },
                    { id: 'sub2', name: 'Conference' },
                    { id: 'sub3', name: 'Meetup' },
                    { id: 'sub4', name: 'Webinar' },
                    { id: 'sub5', name: 'Party' },
                    { id: 'sub6', name: 'Exhibition' },
                    { id: 'sub7', name: 'Concert' },
                    { id: 'sub8', name: 'Sport Event' },
                  ]
                }
              } catch (err) {
                error.value = 'Failed to load categories'
                console.error('Error loading categories:', err)
              }
            })

            // Add ticket type
            const addTicketType = () => {
              form.ticketTypes.push({
                name: '',
                price: 0,
                quantity: 50,
                description: '',
                salesEndDate: '',
                salesEndTime: '23:59',
                isFeatured: false,
              })
            }

            // Remove ticket type
            const removeTicketType = (index) => {
              form.ticketTypes.splice(index, 1)
            }

            // Duplicate ticket type
            const duplicateTicketType = (index) => {
              const ticketToDuplicate = { ...form.ticketTypes[index] }
              ticketToDuplicate.name = `${ticketToDuplicate.name} (Copy)`
              form.ticketTypes.splice(index + 1, 0, ticketToDuplicate)
            }

            // Available ticket type templates
            const ticketTemplates = [
              { name: 'Standard', description: 'Regular entry ticket for most guests', isFeatured: false },
              { name: 'Early Bird', description: 'Limited time offer at a discounted price', isFeatured: true },
              { name: 'VIP', description: 'Premium experience with exclusive benefits', isFeatured: true },
              { name: 'Table for 4', description: 'Reserved table seating for 4 guests' },
              { name: 'Table for 8', description: 'Reserved table seating for 8 guests' },
              { name: 'Table for 12', description: 'Reserved table seating for a large group of 12' },
              {
                name: 'Gold',
                description: 'Elite experience with exclusive perks and priority service',
                isFeatured: true,
              },
              { name: 'Student', description: 'Discounted ticket with valid student ID' },
              { name: 'Group (5+)', description: 'Discounted rate for groups of 5 or more' },
            ]

            // Apply template to ticket
            const applyTemplate = (index, template) => {
              form.ticketTypes[index].name = template.name
              form.ticketTypes[index].description = template.description
              if (template.isFeatured) {
                form.ticketTypes[index].isFeatured = true
              }
            }

            // Calculate total tickets
            const calculateTotalTickets = computed(() => {
              return form.ticketTypes.reduce((sum, ticket) => sum + ticket.quantity, 0)
            })

            // Update total tickets when ticket quantities change
            watch(calculateTotalTickets, (newTotal) => {
              form.totalTickets = newTotal
            })

            // Computed combined date and time
            const fullDateTime = computed(() => {
              if (!form.date || !form.time) return null
              const [year, month, day] = form.date.split('-')
              const [hours, minutes] = form.time.split(':')
              return new Date(year, month - 1, day, hours, minutes).toISOString()
            })

            // Duration options
            const durationOptions = [
              '1 hour',
              '2 hours',
              '3 hours',
              '4 hours',
              '5 hours',
              '1 day',
              '2 days',
              '3 days',
              'Multiple days',
            ]

            // Define stronger password regex if using authentication
            const sanitizeInput = (input) => {
              if (typeof input !== 'string') return input
              // Basic sanitization - replaces potentially harmful characters
              return input.replace(/[<>&"'`=/]/g, '')
            }

            // Validate form with enhanced security
            const validateForm = () => {
              let isValid = true

              // Title validation with sanitization
              const sanitizedTitle = sanitizeInput(form.title.trim())
              if (!sanitizedTitle) {
                validation.title.valid = false
                validation.title.message = 'Add a name for your event'
                isValid = false
              } else if (sanitizedTitle.length < 5) {
                validation.title.valid = false
                validation.title.message = 'Name needs at least 5 letters'
                isValid = false
              } else if (sanitizedTitle.length > 100) {
                validation.title.valid = false
                validation.title.message = 'Name is too long (100 letters max)'
                isValid = false
              } else {
                validation.title.valid = true
                // Update the form with sanitized value
                form.title = sanitizedTitle
              }

              // Description validation with sanitization
              const sanitizedDescription = sanitizeInput(form.description.trim())
              if (!sanitizedDescription) {
                validation.description.valid = false
                validation.description.message = 'Add a description'
                isValid = false
              } else if (sanitizedDescription.length < 20) {
                validation.description.valid = false
                validation.description.message = 'Write at least 20 letters'
                isValid = false
              } else if (sanitizedDescription.length > 5000) {
                validation.description.valid = false
                validation.description.message = 'Too long! Keep it under 5000 letters'
                isValid = false
              } else {
                validation.description.valid = true
                // Update the form with sanitized value
                form.description = sanitizedDescription
              }

              // Category validation
              if (!form.category) {
                validation.category.valid = false
                validation.category.message = 'Pick a category'
                isValid = false
              } else {
                // Validate category ID exists in valid categories
                const categoryExists = categories.value.some((cat) => cat.id === form.category)
                if (!categoryExists) {
                  validation.category.valid = false
                  validation.category.message = 'Pick a category from the list'
                  isValid = false
                } else {
                  validation.category.valid = true
                }
              }

              // Sub-categories validation
              const nonEmptySubCategories = form.subCategories.filter((cat) => cat !== '')
              const uniqueSubCategories = [...new Set(nonEmptySubCategories)]

              if (nonEmptySubCategories.length !== uniqueSubCategories.length) {
                validation.subCategories.valid = false
                validation.subCategories.message = 'You picked the same tag twice'
                isValid = false
              } else {
                // Validate each subcategory ID exists in valid subcategories
                const invalidSubCat = nonEmptySubCategories.some(
                  (subCat) => !availableSubCategories.value.some((validSubCat) => validSubCat.id === subCat),
                )

                if (invalidSubCat) {
                  validation.subCategories.valid = false
                  validation.subCategories.message = 'Pick tags from the list'
                  isValid = false
                } else {
                  validation.subCategories.valid = true
                }
              }

              // Date validation
              if (!form.date) {
                validation.date.valid = false
                validation.date.message = 'Pick a date'
                isValid = false
              } else {
                // Validate date format and ensure it's not in the past
                const selectedDate = new Date(form.date)
                const currentDate = new Date()
                currentDate.setHours(0, 0, 0, 0)

                if (isNaN(selectedDate.getTime())) {
                  validation.date.valid = false
                  validation.date.message = "This date won't work"
                  isValid = false
                } else if (selectedDate < currentDate) {
                  validation.date.valid = false
                  validation.date.message = 'Pick a date in the future'
                  isValid = false
                } else {
                  validation.date.valid = true
                }
              }

              // Time validation
              if (!form.time) {
                validation.time.valid = false
                validation.time.message = 'Add a start time'
                isValid = false
              } else {
                // Validate time format (HH:MM)
                const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/
                if (!timeRegex.test(form.time)) {
                  validation.time.valid = false
                  validation.time.message = 'Use hours:minutes format'
                  isValid = false
                } else {
                  validation.time.valid = true
                }
              }

              // Location validation with sanitization
              const sanitizedLocation = sanitizeInput(form.location.trim())
              if (!sanitizedLocation) {
                validation.location.valid = false
                validation.location.message = 'Add a location'
                isValid = false
              } else if (sanitizedLocation.length < 5) {
                validation.location.valid = false
                validation.location.message = 'Write a longer address'
                isValid = false
              } else {
                validation.location.valid = true
                // Update the form with sanitized value
                form.location = sanitizedLocation
              }

              // Price validation
              if (isNaN(form.price) || form.price === '') {
                validation.price.valid = false
                validation.price.message = 'Price must be a number'
                isValid = false
              } else {
                const price = parseFloat(form.price)
                if (price < 0) {
                  validation.price.valid = false
                  validation.price.message = "Price can't be negative"
                  isValid = false
                } else if (price > 100000) {
                  validation.price.valid = false
                  validation.price.message = 'Price too high (max $100,000)'
                  isValid = false
                } else {
                  validation.price.valid = true
                  // Ensure price is stored as a number with 2 decimal places
                  form.price = parseFloat(price.toFixed(2))
                }
              }

              // Tickets validation
              if (isNaN(form.totalTickets) || form.totalTickets === '') {
                validation.totalTickets.valid = false
                validation.totalTickets.message = 'How many tickets?'
                isValid = false
              } else {
                const tickets = parseInt(form.totalTickets)
                if (tickets <= 0) {
                  validation.totalTickets.valid = false
                  validation.totalTickets.message = 'You need at least 1 ticket'
                  isValid = false
                } else if (tickets > 100000) {
                  validation.totalTickets.valid = false
                  validation.totalTickets.message = 'Too many tickets (max 100,000)'
                  isValid = false
                } else {
                  validation.totalTickets.valid = true
                  // Ensure tickets is stored as an integer
                  form.totalTickets = tickets
                }
              }

              // Organizer validation with sanitization
              const sanitizedOrganizer = sanitizeInput(form.organizer.trim())
              if (!sanitizedOrganizer) {
                validation.organizer.valid = false
                validation.organizer.message = 'Add your name or group name'
                isValid = false
              } else {
                validation.organizer.valid = true
                // Update the form with sanitized value
                form.organizer = sanitizedOrganizer
              }

              // Ticket types validation
              if (form.ticketTypes.length === 0) {
                validation.ticketTypes.valid = false
                validation.ticketTypes.message = 'Add at least one ticket type'
                isValid = false
              } else {
                let ticketTypeValid = true
                form.ticketTypes.forEach((ticket, index) => {
                  const sanitizedName = sanitizeInput(ticket.name.trim())
                  if (!sanitizedName) {
                    validation.ticketTypes.valid = false
                    validation.ticketTypes.message = `Ticket #${index + 1} needs a name`
                    ticketTypeValid = false
                    isValid = false
                  }

                  if (ticket.quantity <= 0) {
                    validation.ticketTypes.valid = false
                    validation.ticketTypes.message = `Ticket #${index + 1} needs at least 1`
                    ticketTypeValid = false
                    isValid = false
                  }

                  if (ticket.salesEndDate) {
                    const endDate = new Date(ticket.salesEndDate)
                    const eventDate = new Date(form.date)

                    if (isNaN(endDate.getTime())) {
                      validation.ticketTypes.valid = false
                      validation.ticketTypes.message = `Ticket #${index + 1} has a bad date`
                      ticketTypeValid = false
                      isValid = false
                    } else if (endDate > eventDate) {
                      validation.ticketTypes.valid = false
                      validation.ticketTypes.message = `Ticket #${index + 1} must stop selling before event starts`
                      ticketTypeValid = false
                      isValid = false
                    }
                  }
                })

                if (ticketTypeValid) {
                  validation.ticketTypes.valid = true
                }
              }

              // Main image validation
              if (!form.mainImage) {
                validation.mainImage.valid = false
                validation.mainImage.message = 'Upload a main image'
                isValid = false
              }

              // Banner image validation
              if (!form.bannerImage) {
                validation.bannerImage.valid = false
                validation.bannerImage.message = 'Upload a banner image'
                isValid = false
              }

              return isValid
            }

            // Handle form submission
            const handleSubmit = async () => {
              if (!validateForm()) {
                // Scroll to first error
                const firstError = Object.keys(validation).find((key) => !validation[key].valid)
                if (firstError) {
                  const element = document.getElementById(firstError)
                  if (element) element.scrollIntoView({ behavior: 'smooth', block: 'center' })
                }
                return
              }

              isSubmitting.value = true
              error.value = null

              try {
                // Filter out empty sub-categories and combine with custom subcategories
                const validSubCategories = [
                  ...form.subCategories.filter((cat) => cat !== ''),
                  ...customSubCategories.value,
                ]

                // Process ticket types
                const processedTickets = form.ticketTypes.map((ticket) => ({
                  ...ticket,
                  price: parseFloat(ticket.price),
                  quantity: parseInt(ticket.quantity),
                  name: sanitizeInput(ticket.name.trim()),
                  description: sanitizeInput(ticket.description.trim()),
                }))

                // Process images - convert File objects to data URLs
                let mainImageUrl = mainImagePreview.value
                let bannerImageUrl = bannerImagePreview.value

                // Get the selected event options
                const selectedEventOptions = [...form.selectedEventOptions, ...form.customEventOptions].filter(
                  Boolean,
                ) // Remove any falsy values

                // Prepare the event data
                const eventData = {
                  title: form.title,
                  description: form.description,
                  category: form.category,
                  subCategories: validSubCategories,
                  date: fullDateTime.value,
                  location: form.location,
                  price: parseFloat(form.price),
                  totalTickets: parseInt(form.totalTickets),
                  organizer: form.organizer,
                  duration: form.duration,
                  featured: form.featured,
                  imageIndex: form.imageIndex,
                  mainImage: mainImageUrl,
                  bannerImage: bannerImageUrl,
                  eventOptions: selectedEventOptions, // Add event options to the event data
                  selectedEventOptions: form.selectedEventOptions, // Store the original selected options
                  customEventOptions: form.customEventOptions, // Store the custom options
                  ticketTypes: processedTickets,
                  faqs: form.faqs.filter((faq) => faq.question.trim() && faq.answer.trim()), // Only include FAQs with content
                }

                // Create the event
                const newEvent = await eventStore.createEvent(eventData)

                success.value = true

                // Redirect to the event page after a brief delay
                setTimeout(() => {
                  router.push({ path: `/event/${newEvent.id}` })
                }, 2000)
              } catch (err) {
                error.value = err.message || 'Failed to create event'
                window.scrollTo({ top: 0, behavior: 'smooth' })
              } finally {
                isSubmitting.value = false
              }
            }

            // Reset form
            const resetForm = () => {
              Object.keys(form).forEach((key) => {
                if (key === 'price') {
                  form[key] = 0
                } else if (key === 'totalTickets') {
                  form[key] = 100
                } else if (key === 'featured') {
                  form[key] = false
                } else if (key === 'imageIndex') {
                  form[key] = Math.floor(Math.random() * 4)
                } else if (key === 'time') {
                  form[key] = '19:00'
                } else if (key === 'subCategories') {
                  form[key] = []
                } else if (key === 'ticketTypes') {
                  form[key] = [
                    {
                      name: 'General Admission',
                      price: 0,
                      quantity: 100,
                      description: '',
                      salesEndDate: '',
                      salesEndTime: '23:59',
                      isFeatured: false,
                    },
                  ]
                } else {
                  form[key] = ''
                }
              })

              Object.keys(validation).forEach((key) => {
                validation[key].valid = true
                validation[key].message = ''
              })

              error.value = null
              success.value = false

              // Also reset custom subcategories
              customSubCategories.value = []

              // Reset custom event options
              form.customEventOptions = []

              // Reset event options to defaults
              form.selectedEventOptions = ['Live performance', 'Food & drinks available', 'Indoor event']

              // Reset FAQs to defaults
              form.faqs = [
                {
                  question: "What's included in the ticket price?",
                  answer:
                    'Your ticket includes entry to the event, access to all scheduled activities, and any materials needed for workshops. Food and drinks may be available for purchase separately.',
                },
                {
                  question: "What's the refund policy?",
                  answer:
                    'Tickets can be refunded up to 7 days before the event. After that, no refunds will be issued, but tickets are transferable to another person.',
                },
                {
                  question: 'Is there parking available?',
                  answer:
                    'Limited parking is available at the venue. We recommend using public transportation or rideshare services if possible.',
                },
                {
                  question: 'What should I bring with me?',
                  answer:
                    'Please bring your ticket (digital or printed), a valid ID, and any personal items you might need. Comfortable attire is recommended.',
                },
                {
                  question: 'Are there age restrictions for this event?',
                  answer:
                    'This event is open to attendees of all ages. Children under 12 must be accompanied by an adult.',
                },
              ]
            }

            // Set min date to today for date picker
            // const today = new Date().toISOString().split('T')[0]

            // Open template modal for a specific ticket
            const openTemplateModal = (index) => {
              activeTicketIndex.value = index
              showTemplateModal.value = true
              document.body.style.overflow = 'hidden' // Prevent background scrolling
            }

            // Close template modal
            const closeTemplateModal = () => {
              showTemplateModal.value = false
              document.body.style.overflow = '' // Re-enable scrolling
            }

            // Apply template from modal and close the modal
            const applyTemplateFromModal = (index, template) => {
              applyTemplate(index, template)
              closeTemplateModal()
            }

            // Add FAQ
            const addFaq = () => {
              form.faqs.push({
                question: '',
                answer: '',
              })
            }

            // Remove FAQ
            const removeFaq = (index) => {
              form.faqs.splice(index, 1)
            }

            // Handle main image upload
            const handleMainImageUpload = (event) => {
              let file

              // Check if it's a drop event
              if (event.dataTransfer) {
                file = event.dataTransfer.files[0]
              } else if (event.target.files) {
                file = event.target.files[0]
              }

              if (file) {
                form.mainImage = file
                validation.mainImage.valid = true

                // Create a preview URL
                const reader = new FileReader()
                reader.onload = (e) => {
                  mainImagePreview.value = e.target.result
                }
                reader.readAsDataURL(file)
              }
            }

            // Handle banner image upload
            const handleBannerImageUpload = (event) => {
              let file

              // Check if it's a drop event
              if (event.dataTransfer) {
                file = event.dataTransfer.files[0]
              } else if (event.target.files) {
                file = event.target.files[0]
              }

              if (file) {
                form.bannerImage = file
                validation.bannerImage.valid = true

                // Create a preview URL
                const reader = new FileReader()
                reader.onload = (e) => {
                  bannerImagePreview.value = e.target.result
                }
                reader.readAsDataURL(file)
              }
            }

            // Remove main image - could be added to the UI if needed
            const removeMainImage = () => {
              form.mainImage = null
              mainImagePreview.value = null
              validation.mainImage.valid = false
              validation.mainImage.message = 'Please upload a main image'
            }

            // Remove banner image - could be added to the UI if needed
            const removeBannerImage = () => {
              form.bannerImage = null
              bannerImagePreview.value = null
              validation.bannerImage.valid = false
              validation.bannerImage.message = 'Please upload a banner image'
            }

            // Trigger main image upload
            const triggerMainImageUpload = () => {
              const input = document.getElementById('mainImage')
              input.click()
            }

            // Trigger banner image upload
            const triggerBannerImageUpload = () => {
              const input = document.getElementById('bannerImage')
              input.click()
            }

            // Add custom subcategory
            const addCustomSubCategory = () => {
              const trimmed = newCustomSubCategory.value.trim()
              if (
                trimmed &&
                customSubCategories.value.length < 5 &&
                !customSubCategories.value.includes(trimmed)
              ) {
                customSubCategories.value.push(trimmed)
                newCustomSubCategory.value = ''
              }
            }

            // Remove custom subcategory
            const removeCustomSubCategory = (index) => {
              customSubCategories.value.splice(index, 1)
            }

            // Get all displayed subcategories (selected + custom)
            const displayedSubCategories = computed(() => {
              return [...form.subCategories, ...customSubCategories.value]
            })

            // Get subcategory name by id
            const getSubCategoryName = (subCatId) => {
              // If it's a predefined subcategory
              if (typeof subCatId === 'string' && subCatId.startsWith('sub')) {
                const subCat = availableSubCategories.value.find((sc) => sc.id === subCatId)
                return subCat ? subCat.name : subCatId
              }
              // If it's a custom subcategory
              return subCatId
            }

            // Filter subcategories based on search term
            const filteredSubCategories = computed(() => {
              if (!subCategorySearchTerm.value) return availableSubCategories.value

              const searchTerm = subCategorySearchTerm.value.toLowerCase()
              return availableSubCategories.value.filter((sc) => sc.name.toLowerCase().includes(searchTerm))
            })

            // Count selected subcategories
            const selectedSubCategoriesCount = computed(() => {
              return tempSelectedSubCategories.value.length + customSubCategories.value.length
            })

            // Remove a subcategory from the form
            const removeSubCategoryById = (subCat) => {
              if (typeof subCat === 'string' && subCat.startsWith('sub')) {
                // If it's a predefined subcategory
                form.subCategories = form.subCategories.filter((sc) => sc !== subCat)
              } else {
                // If it's a custom subcategory
                customSubCategories.value = customSubCategories.value.filter((sc) => sc !== subCat)
              }
            }

            // Toggle subcategory selection
            const toggleSubCategory = (id) => {
              if (isSubCategorySelected(id)) {
                tempSelectedSubCategories.value = tempSelectedSubCategories.value.filter(
                  (subCatId) => subCatId !== id,
                )
              } else {
                if (selectedSubCategoriesCount.value < 5) {
                  tempSelectedSubCategories.value.push(id)
                }
              }
            }

            // Check if subcategory is selected
            const isSubCategorySelected = (id) => {
              return tempSelectedSubCategories.value.includes(id)
            }

            // Open subcategory modal
            const openSubCategoryModal = () => {
              if (form.category === '') {
                validation.category.valid = false
                validation.category.message = 'Select a category first'
                // Focus category dropdown
                const categoryElement = document.getElementById('category')
                if (categoryElement) categoryElement.focus()
                return
              }

              // Initialize the temp selection with current selection
              tempSelectedSubCategories.value = [...form.subCategories]
              showSubCategoryModal.value = true
              document.body.style.overflow = 'hidden' // Prevent background scrolling
            }

            // Close subcategory modal
            const closeSubCategoryModal = () => {
              showSubCategoryModal.value = false
              document.body.style.overflow = '' // Re-enable scrolling
              subCategorySearchTerm.value = ''
              newCustomSubCategory.value = ''
            }

            // Confirm subcategory selections
            const confirmSubCategories = () => {
              form.subCategories = [...tempSelectedSubCategories.value]
              closeSubCategoryModal()
            }

            // Handle main image drop
            const handleMainImageDrop = (event) => {
              event.preventDefault()
              handleMainImageUpload(event)
            }

            // Handle banner image drop
            const handleBannerImageDrop = (event) => {
              event.preventDefault()
              handleBannerImageUpload(event)
            }

            // Add custom event option
            const addCustomEventOption = () => {
              const trimmed = newCustomEventOption.value.trim()
              if (trimmed && form.customEventOptions.length < 5 && !form.customEventOptions.includes(trimmed)) {
                form.customEventOptions.push(trimmed)
                newCustomEventOption.value = ''
              }
            }

            // Remove custom event option
            const removeCustomEventOption = (index) => {
              form.customEventOptions.splice(index, 1)
            }

            // Toggle event option
            const toggleEventOption = (option) => {
              if (form.selectedEventOptions.includes(option)) {
                form.selectedEventOptions = form.selectedEventOptions.filter((opt) => opt !== option)
              } else {
                // Allow selecting more options - remove limit
                form.selectedEventOptions.push(option)
              }
            }

            // Check if event option is selected
            const isEventOptionSelected = (option) => {
              return form.selectedEventOptions.includes(option)
            }

            // Predefined event options
            const predefinedEventOptions = [
              'Live performance',
              'Food & drinks available',
              'Indoor event',
              'Outdoor event',
              'Accessible venue',
              'Family friendly',
              'Free parking',
              'VIP access',
              'Professional networking',
              'Photo opportunities',
              'Live streaming',
              'Q&A session',
              'Merchandise available',
              'Meet & greet',
              'Seating provided',
            ]

            const showDateTip = ref(false)
            const showTimeTip = ref(false)

            // Time picker variables
            const isTimePickerOpen = ref(false)
            const selectedTime = ref('07:00')
            const selectedPeriod = ref('AM')

            const timeOptions = [
              '01:00',
              '01:30',
              '02:00',
              '02:30',
              '03:00',
              '03:30',
              '04:00',
              '04:30',
              '05:00',
              '05:30',
              '06:00',
              '06:30',
              '07:00',
              '07:30',
              '08:00',
              '08:30',
              '09:00',
              '09:30',
              '10:00',
              '10:30',
              '11:00',
              '11:30',
              '12:00',
              '12:30',
            ]

            const openTimePicker = () => {
              // If there's already a time, parse it to 12-hour format for the picker
              if (form.time) {
                const [hours, minutes] = form.time.split(':')
                const hour = parseInt(hours)

                if (hour > 12) {
                  // Convert from 24-hour to 12-hour format for PM
                  selectedTime.value = `${(hour - 12).toString().padStart(2, '0')}:${minutes}`
                  selectedPeriod.value = 'PM'
                } else if (hour === 12) {
                  // 12 PM
                  selectedTime.value = `12:${minutes}`
                  selectedPeriod.value = 'PM'
                } else if (hour === 0) {
                  // 12 AM
                  selectedTime.value = `12:${minutes}`
                  selectedPeriod.value = 'AM'
                } else {
                  // Regular AM hours
                  selectedTime.value = `${hour.toString().padStart(2, '0')}:${minutes}`
                  selectedPeriod.value = 'AM'
                }
              } else {
                // Default to 7:00 AM if no time selected
                selectedTime.value = '07:00'
                selectedPeriod.value = 'AM'
              }

              isTimePickerOpen.value = true
            }

            const closeTimePicker = () => {
              isTimePickerOpen.value = false
            }

            const selectTime = (time) => {
              selectedTime.value = time
            }

            const selectPeriod = (period) => {
              selectedPeriod.value = period
            }

            const applyTimeSelection = () => {
              // Convert to 24-hour format if PM is selected
              if (selectedPeriod.value === 'PM') {
                const [hours, minutes] = selectedTime.value.split(':')
                const hour = parseInt(hours)

                // Only adjust hours that aren't already in PM format (12 PM stays as 12)
                const adjustedHour = hour === 12 ? 12 : hour + 12
                form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
              } else {
                // For AM, make sure 12 AM becomes 00:00
                const [hours, minutes] = selectedTime.value.split(':')
                const hour = parseInt(hours)
                const adjustedHour = hour === 12 ? 0 : hour
                form.time = `${adjustedHour.toString().padStart(2, '0')}:${minutes}`
              }

              closeTimePicker()
            }

            // Date picker variables
            const isDatePickerOpen = ref(false)
            const currentYear = ref(new Date().getFullYear())
            const currentMonth = ref(new Date().getMonth())
            const selectedDate = ref(new Date())
            const tempSelectedDate = ref(null)

            // Custom time input variables
            const customHours = ref('07')
            const customMinutes = ref('00')

            // Define weekdays and month names for the calendar
            const weekdays = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
            const monthNames = [
              'January',
              'February',
              'March',
              'April',
              'May',
              'June',
              'July',
              'August',
              'September',
              'October',
              'November',
              'December',
            ]

            // Format time inputs when focus is lost
            const formatTimeInputs = () => {
              // Validate and format hours
              let formattedHours = parseInt(customHours.value) || 1
              if (formattedHours < 1) formattedHours = 1
              if (formattedHours > 12) formattedHours = 12

              // Validate and format minutes
              let formattedMinutes = parseInt(customMinutes.value) || 0
              if (formattedMinutes < 0) formattedMinutes = 0
              if (formattedMinutes > 59) formattedMinutes = 59

              // Update the ref values with formatted strings
              customHours.value = formattedHours.toString().padStart(2, '0')
              customMinutes.value = formattedMinutes.toString().padStart(2, '0')

              // Update selectedTime with formatted values
              selectedTime.value = `${formattedHours.toString().padStart(2, '0')}:${formattedMinutes.toString().padStart(2, '0')}`
            }

            // Function to prefill the form with test data
            const prefillForm = () => {
              // Generate a random event title to avoid duplicates
              const eventTypes = [
                'Workshop',
                'Conference',
                'Meetup',
                'Concert',
                'Festival',
                'Webinar',
                'Hackathon',
              ]
              const eventAdjectives = [
                'Amazing',
                'Incredible',
                'Ultimate',
                'Exclusive',
                'Premier',
                'Annual',
                'Interactive',
              ]
              const eventSubjects = [
                'Tech',
                'Music',
                'Art',
                'Food',
                'Business',
                'Science',
                'Wellness',
                'Development',
              ]

              const randomTitle = `${eventAdjectives[Math.floor(Math.random() * eventAdjectives.length)]} ${
                eventSubjects[Math.floor(Math.random() * eventSubjects.length)]
              } ${eventTypes[Math.floor(Math.random() * eventTypes.length)]}`

              // Random location
              const cities = [
                'New York',
                'San Francisco',
                'Chicago',
                'Los Angeles',
                'Miami',
                'Seattle',
                'Austin',
                'Boston',
              ]
              const venues = [
                'Convention Center',
                'Concert Hall',
                'Community Space',
                'Hotel Ballroom',
                'Outdoor Park',
                'Art Gallery',
              ]
              const randomLocation = `${venues[Math.floor(Math.random() * venues.length)]}, ${
                cities[Math.floor(Math.random() * cities.length)]
              }`

              // Select a random category
              const randomCategory = categories.value[Math.floor(Math.random() * categories.value.length)].id

              // Generate random date and time (between 1-3 months in the future)
              const futureDate = new Date()
              futureDate.setDate(futureDate.getDate() + 30 + Math.floor(Math.random() * 60)) // 30-90 days in future

              const year = futureDate.getFullYear()
              const month = (futureDate.getMonth() + 1).toString().padStart(2, '0')
              const day = futureDate.getDate().toString().padStart(2, '0')
              const formattedDate = `${year}-${month}-${day}`

              // Random time (morning, afternoon, or evening)
              const hours = [9, 10, 13, 14, 18, 19]
              const randomHour = hours[Math.floor(Math.random() * hours.length)]
              const randomMinutes = ['00', '15', '30', '45'][Math.floor(Math.random() * 4)]
              const formattedTime = `${randomHour.toString().padStart(2, '0')}:${randomMinutes}`

              // Random price (free or $10-$150)
              const randomPrice = Math.random() > 0.2 ? (Math.floor(Math.random() * 14) + 1) * 10 + 0.99 : 0

              // Random ticket count
              const randomTickets = (Math.floor(Math.random() * 10) + 1) * 50

              // Random duration
              const durations = ['2 hours', '3 hours', '4 hours', 'All day', '2 days', 'Weekend']
              const randomDuration = durations[Math.floor(Math.random() * durations.length)]

              // Fill the form with the random data
              form.title = randomTitle
              form.organizer = 'Test Organizer LLC'
              form.description = `Join us for this amazing event where you'll experience the best of ${eventSubjects[Math.floor(Math.random() * eventSubjects.length)]}.

            This is a great opportunity to network with like-minded individuals and learn from industry experts. Don't miss out on this incredible experience!

            • Professional speakers
            • Networking opportunities
            • Hands-on activities
            • Refreshments provided
            • Take-home materials`

              form.location = randomLocation
              form.category = randomCategory
              form.date = formattedDate
              form.time = formattedTime
              form.price = randomPrice.toString()
              form.totalTickets = randomTickets.toString()
              form.duration = randomDuration
              form.featured = Math.random() > 0.5 // 50% chance to be featured

              // Select 3-5 random event options
              form.selectedEventOptions = []
              const shuffledOptions = [...predefinedEventOptions].sort(() => 0.5 - Math.random())
              const optionsCount = Math.floor(Math.random() * 3) + 3 // 3-5 options
              form.selectedEventOptions = shuffledOptions.slice(0, optionsCount)

              // Add 1-2 custom options
              form.customEventOptions = []
              const customOptionIdeas = [
                'Free merchandise',
                'After-party included',
                'Video recording available',
                'Certificate provided',
                'Professional photos',
                'Translation services',
                'VIP meet & greet',
              ]

              if (Math.random() > 0.5) {
                const shuffledCustomOptions = [...customOptionIdeas].sort(() => 0.5 - Math.random())
                const customCount = Math.floor(Math.random() * 2) + 1 // 1-2 custom options
                form.customEventOptions = shuffledCustomOptions.slice(0, customCount)
              }

              // Add ticket types
              form.ticketTypes = [
                {
                  name: 'General Admission',
                  price: randomPrice,
                  quantity: randomTickets * 0.7, // 70% of tickets
                  description: 'Standard entry ticket with access to all areas.',
                  salesEndDate: '',
                  salesEndTime: '23:59',
                  isFeatured: false,
                },
              ]

              if (Math.random() > 0.3) {
                // 70% chance to have VIP tickets
                form.ticketTypes.push({
                  name: 'VIP Experience',
                  price: randomPrice * 2.5,
                  quantity: randomTickets * 0.3, // 30% of tickets
                  description: 'Premium experience with exclusive benefits and priority access.',
                  salesEndDate: '',
                  salesEndTime: '23:59',
                  isFeatured: true,
                })
              }

              // Add 1-2 FAQs
              form.faqs = [
                {
                  question: 'Is there parking available at the venue?',
                  answer: 'Yes, there is paid parking available on-site and free street parking nearby.',
                },
              ]

              if (Math.random() > 0.5) {
                form.faqs.push({
                  question: 'What is the refund policy?',
                  answer:
                    'Full refunds are available up to 7 days before the event. Partial refunds are available up to 48 hours before.',
                })
              }

              // Scroll to top of form
              window.scrollTo({
                top: 0,
                behavior: 'smooth',
              })

              // Show success message
              setTimeout(() => {
                alert('Form has been prefilled with test data! Just add images and submit.')
              }, 500)
            }

            // Handle keydown in time inputs
            const handleTimeInput = (event) => {
              // Allow normal typing, backspace, arrows, etc
              const allowedKeys = ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Tab']
              if (allowedKeys.includes(event.key)) return

              // If Enter key is pressed, format the inputs
              if (event.key === 'Enter') {
                event.preventDefault()
                formatTimeInputs()
                return
              }

              // Check if the user is typing a colon (:) to move to the minutes field
              if (event.key === ':' && event.target === document.querySelector('.time-input-field')) {
                event.preventDefault()
                // Focus the minutes input
                document.querySelectorAll('.time-input-field')[1].focus()
                return
              }
            }

            // Update custom time input fields when selectedTime changes
            watch(selectedTime, (newTime) => {
              const [hours, minutes] = newTime.split(':')
              // Only update if the input field is not currently focused
              if (document.activeElement !== document.querySelector('.time-input-field')) {
                customHours.value = hours
                customMinutes.value = minutes
              }
            })

            // Open date picker
            const openDatePicker = () => {
              // If there's already a date, use it as the selected date
              if (form.date) {
                const [year, month, day] = form.date.split('-').map(Number)
                selectedDate.value = new Date(year, month - 1, day)
                currentYear.value = year
                currentMonth.value = month - 1
              } else {
                // Default to today
                selectedDate.value = new Date()
                currentYear.value = selectedDate.value.getFullYear()
                currentMonth.value = selectedDate.value.getMonth()
              }

              tempSelectedDate.value = new Date(selectedDate.value)
              isDatePickerOpen.value = true
            }

            // Close date picker
            const closeDatePicker = () => {
              isDatePickerOpen.value = false
            }

            // Navigate to previous month
            const previousMonth = () => {
              if (currentMonth.value === 0) {
                currentYear.value--
                currentMonth.value = 11
              } else {
                currentMonth.value--
              }
            }

            // Navigate to next month
            const nextMonth = () => {
              if (currentMonth.value === 11) {
                currentYear.value++
                currentMonth.value = 0
              } else {
                currentMonth.value++
              }
            }

            // Select a date from the calendar
            const selectDate = (date) => {
              tempSelectedDate.value = new Date(date)
            }

            // Apply the selected date
            const applyDateSelection = () => {
              selectedDate.value = new Date(tempSelectedDate.value)

              // Format date as YYYY-MM-DD
              const year = selectedDate.value.getFullYear()
              const month = (selectedDate.value.getMonth() + 1).toString().padStart(2, '0')
              const day = selectedDate.value.getDate().toString().padStart(2, '0')

              form.date = `${year}-${month}-${day}`

              closeDatePicker()
            }

            // Generate calendar days for the current month view
            const calendarDays = computed(() => {
              const days = []
              const firstDayOfMonth = new Date(currentYear.value, currentMonth.value, 1)
              const lastDayOfMonth = new Date(currentYear.value, currentMonth.value + 1, 0)

              // Get the day of the week of the first day (0-6, where 0 is Sunday)
              const firstDayWeekday = firstDayOfMonth.getDay()

              // Add days from previous month to fill the first row
              const prevMonthLastDay = new Date(currentYear.value, currentMonth.value, 0).getDate()
              for (let i = firstDayWeekday - 1; i >= 0; i--) {
                const prevMonthDay = prevMonthLastDay - i
                const date = new Date(currentYear.value, currentMonth.value - 1, prevMonthDay)
                days.push({
                  day: prevMonthDay,
                  date: date,
                  inCurrentMonth: false,
                  isToday: isSameDay(date, new Date()),
                  isSelected: tempSelectedDate.value && isSameDay(date, tempSelectedDate.value),
                  isDisabled: date < new Date(today.value),
                })
              }

              // Add days of current month
              for (let day = 1; day <= lastDayOfMonth.getDate(); day++) {
                const date = new Date(currentYear.value, currentMonth.value, day)
                days.push({
                  day,
                  date,
                  inCurrentMonth: true,
                  isToday: isSameDay(date, new Date()),
                  isSelected: tempSelectedDate.value && isSameDay(date, tempSelectedDate.value),
                  isDisabled: date < new Date(today.value),
                })
              }

              // Add days from next month to complete the calendar grid (up to 6 rows x 7 columns = 42 cells)
              const remainingDays = 42 - days.length
              for (let day = 1; day <= remainingDays; day++) {
                const date = new Date(currentYear.value, currentMonth.value + 1, day)
                days.push({
                  day,
                  date,
                  inCurrentMonth: false,
                  isToday: isSameDay(date, new Date()),
                  isSelected: tempSelectedDate.value && isSameDay(date, tempSelectedDate.value),
                  isDisabled: date < new Date(today.value),
                })
              }

              return days
            })

            // Helper function to check if two dates are the same day
            const isSameDay = (date1, date2) => {
              return (
                date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate()
              )
            }
</script>

<style scoped>
.event-options-container {
              margin-bottom: 2rem;
            }

            .event-options-grid {
              display: grid;
              grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
              gap: 12px;
              margin-bottom: 2rem;
            }

            .event-option-item {
              flex: 0 0 auto;
            }

            .add-event-option {
              margin-top: 1.5rem;
            }

            .custom-event-option-input {
              display: flex;
              gap: 10px;
              margin-top: 2rem;
              margin-bottom: 1.5rem;
            }

            .custom-option-input {
              height: 46px;
              font-size: 14px;
            }

            .add-custom-option-btn {
              padding: 0 20px;
              background-color: rgba(233, 75, 159, 0.15);
              border: 1px solid rgba(233, 75, 159, 0.3);
              border-radius: 8px;
              color: rgba(255, 255, 255, 0.9);
              font-size: 14px;
              font-weight: 500;
              cursor: pointer;
              transition: all 0.2s ease;
              white-space: nowrap;
              height: 46px;
            }

            .add-custom-option-btn:hover:not(:disabled) {
              background-color: rgba(233, 75, 159, 0.25);
              transform: translateY(-1px);
            }

            .add-custom-option-btn:disabled {
              opacity: 0.5;
              cursor: not-allowed;
            }

            .remove-option-btn {
              display: flex;
              align-items: center;
              justify-content: center;
              width: 20px;
              height: 20px;
              background: none;
              border: none;
              padding: 0;
              color: rgba(255, 255, 255, 0.7);
              cursor: pointer;
              transition: all 0.2s ease;
            }

            .remove-option-btn:hover {
              color: white;
              transform: scale(1.1);
            }

            .event-option-checkbox {
              display: flex;
              align-items: center;
              justify-content: space-between;
              cursor: pointer;
              padding: 10px 15px;
              border-radius: 8px;
              transition: all 0.25s ease;
              background-color: rgba(25, 24, 30, 0.5);
              border: 1px solid rgba(67, 67, 70, 0.25);
              margin-bottom: 0.5rem;
            }

            .event-option-checkbox:hover {
              background-color: rgba(37, 36, 42, 0.7);
              border-color: rgba(255, 255, 255, 0.2);
            }

            .event-option-checkbox--selected {
              background-color: rgba(233, 75, 159, 0.15);
              border-color: rgba(233, 75, 159, 0.3);
              color: white;
            }

            .event-option-label {
              font-size: 14px;
              color: rgba(255, 255, 255, 0.9);
              user-select: none;
              cursor: pointer;
              line-height: 1.5;
              font-weight: 400;
            }

            .event-option-checkmark {
              color: rgba(233, 75, 159, 1);
            }

            .mt-4 {
              margin-top: 1.5rem;
            }

            .create-event {
              min-height: 100vh;
              background-color: #111014;
              background-image: none;
              padding: 0 0 8rem;
              color: #fff;
              position: relative;
              overflow: hidden;
            }

            .create-event::before {
              display: none;
            }

            .create-event::after {
              display: none;
            }

            .container {
              max-width: 1200px;
              margin: 0 auto;
              padding: 0 3rem;
              position: relative;
              z-index: 1;
            }

            .back-link {
              display: inline-flex;
              align-items: center;
              gap: 0.5rem;
              color: rgba(255, 255, 255, 0.7);
              text-decoration: none;
              font-size: 15px;
              font-weight: 600;
              margin: 2.5rem 0;
              transition: all 0.3s ease;
              letter-spacing: 0.5px;
              position: relative;
              padding-bottom: 2px;
            }

            .back-link::after {
              content: '';
              position: absolute;
              width: 0;
              height: 1px;
              bottom: 0;
              left: 0;
              background-color: white;
              transition: width 0.3s ease;
            }

            .back-link:hover {
              color: white;
              transform: translateX(-3px);
            }

            .back-link:hover svg {
              transform: translateX(-3px);
            }

            .back-link:hover::after {
              width: 100%;
            }

            .back-link svg {
              width: 20px;
              height: 20px;
              transition: transform 0.3s ease;
            }

            .create-event__header {
              margin-bottom: 5rem;
              text-align: center;
              position: relative;
            }

            .create-event__header::after {
              content: '';
              position: absolute;
              width: 80px;
              height: 2px;
              background: linear-gradient(
                90deg,
                rgba(170, 170, 170, 0.3),
                rgba(170, 170, 170, 0.1)
              );
              bottom: -20px;
              left: 50%;
              transform: translateX(-50%);
              border-radius: 2px;
            }

            .create-event__title {
              font-size: 32px;
              font-weight: 500;
              color: white;
              margin: 0;
              display: inline-block;
              background: linear-gradient(90deg, #fff, rgba(255, 255, 255, 0.7));
              -webkit-background-clip: text;
              background-clip: text;
              -webkit-text-fill-color: transparent;
              letter-spacing: 0.6px;
            }

            .create-event__subtitle {
              font-size: 16px;
              color: rgba(255, 255, 255, 0.6);
              margin: 1rem 0 0;
              font-weight: 400;
              max-width: 600px;
              margin-left: auto;
              margin-right: auto;
              letter-spacing: 0.2px;
              line-height: 1.5;
            }

            .create-event__form {
              max-width: 1200px;
              margin: 0 auto;
            }

            .form-section {
              margin-bottom: 4.5rem;
              position: relative;
              opacity: 0;
              transform: translateY(10px);
              animation: fadeIn 0.5s forwards;
              background-color: rgba(25, 24, 30, 0.2);
              border-radius: 16px;
              padding: 2.5rem;
              border: 1px solid rgba(67, 67, 70, 0.15);
              box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
              transition: all 0.3s ease;
              width: 94%;
              margin-left: auto;
              margin-right: auto;
              backdrop-filter: blur(10px);
            }

            .form-section:hover {
              background-color: rgba(25, 24, 30, 0.25);
              box-shadow: 0 12px 40px rgba(0, 0, 0, 0.12);
              border-color: rgba(67, 67, 70, 0.2);
              transform: translateY(-1px);
            }

            .form-section:nth-child(1) {
              animation-delay: 0.15s;
            }
            .form-section:nth-child(2) {
              animation-delay: 0.3s;
            }
            .form-section:nth-child(3) {
              animation-delay: 0.45s;
            }
            .form-section:nth-child(4) {
              animation-delay: 0.6s;
            }

            @keyframes fadeIn {
              from {
                opacity: 0;
                transform: translateY(20px);
              }
              to {
                opacity: 1;
                transform: translateY(0);
              }
            }

            .form-section .section-title {
              opacity: 0;
              transform: translateY(10px);
              animation: fadeInUp 0.5s forwards;
              animation-delay: 0.2s;
            }

            @keyframes fadeInUp {
              from {
                opacity: 0;
                transform: translateY(10px);
              }
              to {
                opacity: 1;
                transform: translateY(0);
              }
            }

            .section-title {
              display: flex;
              align-items: center;
              font-size: 18px;
              font-weight: 400;
              color: rgba(255, 255, 255, 0.85);
              margin-bottom: 2.25rem;
              letter-spacing: 0.3px;
              position: relative;
            }

            .section-title::before {
              content: '';
              position: absolute;
              width: 30px;
              height: 1px;
              background-color: rgba(170, 170, 170, 0.5);
              bottom: -8px;
              left: 0;
              border-radius: 1px;
            }

            .diamond {
              display: inline-block;
              width: 8px;
              height: 8px;
              margin-right: 12px;
              background-color: rgba(170, 170, 170, 0.7);
              transform: rotate(45deg);
              box-shadow: 0 0 8px rgba(170, 170, 170, 0.4);
            }

            .form-group {
              margin-bottom: 2.5rem;
              position: relative;
              transition: transform 0.2s ease;
            }

            .form-group:last-child {
              margin-bottom: 0;
            }

            .form-group:focus-within {
              transform: translateX(5px);
            }

            .form-label {
              display: block;
              font-size: 14px;
              font-weight: 400;
              color: rgba(255, 255, 255, 0.7);
              margin-bottom: 0.75rem;
              transition: color 0.15s ease;
              letter-spacing: 0.3px;
            }

            .form-group:focus-within .form-label {
              color: #aaaaaa;
              font-weight: 600;
              transform: translateX(2px);
            }

            .form-input {
              width: 100%;
              height: 52px;
              background-color: rgba(25, 24, 30, 0.5);
              border: 1px solid rgba(67, 67, 70, 0.25);
              border-radius: 10px;
              color: white;
              font-size: 15px;
              padding: 0 18px;
              transition: all 0.25s ease;
              font-weight: 400;
              letter-spacing: 0.2px;
              box-shadow: 0 2px 6px rgba(0, 0, 0, 0.03);
            }

            .form-input::placeholder {
              color: rgba(111, 110, 123, 0.7);
              font-weight: 300;
            }

            .form-input:hover {
              border-color: rgba(255, 255, 255, 0.3);
              box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            }

            .form-input:focus {
              outline: none;
              border-color: #aaaaaa;
              background-color: #19181e;
              box-shadow:
                0 0 0 4px rgba(170, 170, 170, 0.2),
                0 4px 12px rgba(0, 0, 0, 0.1);
            }

            .form-input--error {
              border-color: #ef4444;
            }

            .form-input--error:focus {
              box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.15);
              border-color: #ef4444;
            }

            .form-select {
              width: 100%;
              height: 52px;
              background-color: rgba(25, 24, 30, 0.5);
              border: 1px solid rgba(67, 67, 70, 0.25);
              border-radius: 10px;
              color: white;
              font-size: 15px;
              padding: 0 18px;
              transition: all 0.25s ease;
              appearance: none;
              background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%236F6E7B' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
              background-repeat: no-repeat;
              background-position: right 16px center;
              background-size: 14px;
              padding-right: 45px;
              font-weight: 400;
              letter-spacing: 0.2px;
            }

            .form-select:hover {
              border-color: rgba(255, 255, 255, 0.3);
              box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            }

            .form-select:focus {
              outline: none;
              border-color: #aaaaaa;
              background-color: #19181e;
              box-shadow:
                0 0 0 4px rgba(170, 170, 170, 0.2),
                0 4px 12px rgba(0, 0, 0, 0.1);
            }

            .form-textarea {
              width: 100%;
              min-height: 120px;
              background-color: rgba(25, 24, 30, 0.5);
              border: 1px solid rgba(67, 67, 70, 0.25);
              border-radius: 10px;
              color: white;
              font-size: 15px;
              padding: 14px 18px;
              transition: all 0.25s ease;
              resize: vertical;
              font-weight: 400;
              line-height: 1.6;
              letter-spacing: 0.2px;
            }

            .form-textarea::placeholder {
              color: rgba(111, 110, 123, 0.7);
              font-weight: 300;
            }

            .form-textarea:hover {
              border-color: rgba(255, 255, 255, 0.3);
              box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            }

            .form-textarea:focus {
              outline: none;
              border-color: #aaaaaa;
              background-color: #19181e;
              box-shadow:
                0 0 0 4px rgba(170, 170, 170, 0.2),
                0 4px 12px rgba(0, 0, 0, 0.1);
            }

            .form-row {
              display: flex;
              gap: 32px;
              margin-bottom: 2.5rem;
            }

            .form-row:last-child {
              margin-bottom: 0;
            }

            .form-row .form-group {
              flex: 1;
              margin-bottom: 0;
            }

            .form-helper {
              font-size: 13px;
              color: rgba(138, 137, 150, 0.7);
              margin-top: 0.75rem;
              line-height: 1.5;
              transition: opacity 0.2s ease;
            }

            .form-group:focus-within .form-helper {
              color: #a3a1b1;
            }

            .form-error {
              color: #ef4444;
              font-size: 14px;
              margin-top: 0.75rem;
              display: flex;
              align-items: center;
              font-weight: 400;
              animation: errorShake 0.5s forwards;
            }

            @keyframes errorShake {
              0%,
              100% {
                transform: translateX(0);
              }
              20%,
              60% {
                transform: translateX(-4px);
              }
              40%,
              80% {
                transform: translateX(4px);
              }
            }

            .form-error::before {
              content: '!';
              display: inline-flex;
              align-items: center;
              justify-content: center;
              width: 18px;
              height: 18px;
              background-color: #ef4444;
              border-radius: 50%;
              margin-right: 10px;
              font-size: 12px;
              font-weight: 700;
            }

            .form-checkbox-wrapper {
              display: flex;
              align-items: flex-start;
              gap: 14px;
              cursor: pointer;
              padding: 8px 10px;
              border-radius: 8px;
              transition: background-color 0.25s ease;
              margin-left: -10px;
            }

            .form-checkbox-wrapper:hover {
              background-color: rgba(255, 255, 255, 0.05);
            }

            .form-checkbox {
              appearance: none;
              width: 24px;
              height: 24px;
              background-color: #19181e;
              border: 1px solid #434346;
              border-radius: 6px;
              cursor: pointer;
              position: relative;
              transition: all 0.25s ease;
              flex-shrink: 0;
              margin-top: 1px;
              box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            }

            .form-checkbox:checked {
              background-color: #aaaaaa;
              border-color: #aaaaaa;
              box-shadow: 0 0 12px rgba(170, 170, 170, 0.3);
            }

            .form-checkbox:checked::after {
              content: '';
              position: absolute;
              left: 8px;
              top: 4px;
              width: 6px;
              height: 12px;
              border: solid white;
              border-width: 0 2px 2px 0;
              transform: rotate(45deg);
              animation: checkmark 0.2s ease-in-out forwards;
            }

            @keyframes checkmark {
              0% {
                opacity: 0;
                transform: rotate(45deg) scale(0.5);
              }
              100% {
                opacity: 1;
                transform: rotate(45deg) scale(1);
              }
            }

            .form-checkbox:focus {
              outline: none;
              box-shadow:
                0 0 0 3px rgba(170, 170, 170, 0.2),
                0 2px 5px rgba(0, 0, 0, 0.1);
            }

            .form-checkbox:hover {
              border-color: rgba(255, 255, 255, 0.4);
              transform: scale(1.05);
            }

            .form-checkbox-label {
              font-size: 14px;
              color: rgba(255, 255, 255, 0.8);
              user-select: none;
              cursor: pointer;
              line-height: 1.5;
              padding-top: 1px;
              font-weight: 400;
            }

            .location-map-placeholder {
              background-color: rgba(25, 24, 30, 0.5);
              border: 1px dashed #434346;
              border-radius: 12px;
              height: 160px;
              display: flex;
              align-items: center;
              justify-content: center;
              margin-top: 1.25rem;
              transition: all 0.25s ease;
              overflow: hidden;
              position: relative;
            }

            .location-map-placeholder::before {
              content: '';
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: linear-gradient(135deg, rgba(25, 24, 30, 0.8), rgba(25, 24, 30, 0.5));
              opacity: 0;
              transition: opacity 0.3s ease;
            }

            .location-map-placeholder:hover {
              border-color: rgba(255, 255, 255, 0.4);
              transform: translateY(-3px);
              box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
            }

            .location-map-placeholder:hover::before {
              opacity: 1;
            }

            .location-map-content {
              display: flex;
              flex-direction: column;
              align-items: center;
              color: #8a8996;
              z-index: 1;
            }

            .location-map-content svg {
              margin-bottom: 1rem;
              opacity: 0.7;
              transition: all 0.25s ease;
              filter: drop-shadow(0 2px 5px rgba(0, 0, 0, 0.2));
            }

            .location-map-placeholder:hover .location-map-content svg {
              opacity: 1;
              transform: scale(1.2);
              filter: drop-shadow(0 4px 10px rgba(0, 0, 0, 0.3));
            }

            .form-actions {
              display: flex;
              justify-content: flex-end;
              gap: 24px;
              margin-top: 4rem;
            }

            .btn-primary {
              height: 50px;
              padding: 0 32px;
              background-color: rgba(170, 170, 170, 0.9);
              color: white;
              border: none;
              border-radius: 10px;
              font-size: 15px;
              font-weight: 400;
              cursor: pointer;
              transition: all 0.25s ease;
              display: inline-flex;
              align-items: center;
              justify-content: center;
              min-width: 160px;
              letter-spacing: 0.4px;
            }

            .btn-primary::before {
              content: '';
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: linear-gradient(135deg, #cccccc, #999999);
              transition: opacity 0.3s ease;
              opacity: 0;
              z-index: -1;
            }

            .btn-primary:hover {
              transform: translateY(-2px);
              box-shadow: 0 12px 20px rgba(170, 170, 170, 0.3);
            }

            .btn-primary:hover::before {
              opacity: 1;
            }

            .btn-primary:active {
              transform: translateY(0);
              box-shadow: 0 4px 12px rgba(170, 170, 170, 0.25);
            }

            .btn-secondary {
              height: 50px;
              padding: 0 32px;
              background-color: rgba(255, 255, 255, 0.05);
              color: white;
              border: 1px solid rgba(255, 255, 255, 0.12);
              border-radius: 10px;
              font-size: 15px;
              font-weight: 400;
              cursor: pointer;
              transition: all 0.25s ease;
              display: inline-flex;
              align-items: center;
              justify-content: center;
              min-width: 140px;
              letter-spacing: 0.3px;
              backdrop-filter: blur(4px);
            }

            .btn-secondary:hover {
              background-color: rgba(255, 255, 255, 0.1);
              border-color: rgba(255, 255, 255, 0.3);
              transform: translateY(-2px);
            }

            .btn-secondary:active {
              background-color: rgba(255, 255, 255, 0.08);
              transform: translateY(0);
            }

            .create-event__alert {
              padding: 18px;
              border-radius: 12px;
              margin-bottom: 2.5rem;
              font-size: 16px;
              display: flex;
              align-items: center;
              background-color: #19181e;
              box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
              border: 1px solid #434346;
              animation: alertSlideIn 0.5s forwards;
              opacity: 0;
              transform: translateY(-20px);
            }

            @keyframes alertSlideIn {
              to {
                opacity: 1;
                transform: translateY(0);
              }
            }

            .create-event__alert::before {
              content: '';
              width: 24px;
              height: 24px;
              margin-right: 16px;
              background-position: center;
              background-repeat: no-repeat;
              background-size: contain;
              flex-shrink: 0;
            }

            .create-event__alert--error {
              background-color: rgba(239, 68, 68, 0.1);
              color: #ef4444;
              border: 1px solid rgba(239, 68, 68, 0.2);
            }

            .create-event__alert--error::before {
              background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23ef4444' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Ccircle cx='12' cy='12' r='10'%3E%3C/circle%3E%3Cline x1='12' y1='8' x2='12' y2='12'%3E%3C/line%3E%3Cline x1='12' y1='16' x2='12.01' y2='16'%3E%3C/line%3E%3C/svg%3E");
            }

            .create-event__alert--success {
              background-color: rgba(34, 197, 94, 0.1);
              color: #22c55e;
              border: 1px solid rgba(34, 197, 94, 0.2);
            }

            .create-event__alert--success::before {
              background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%2322c55e' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M22 11.08V12a10 10 0 1 1-5.93-9.14'%3E%3C/path%3E%3Cpolyline points='22 4 12 14.01 9 11.01'%3E%3C/polyline%3E%3C/svg%3E");
            }

            .spinner {
              animation: rotate 1.2s linear infinite;
              margin-right: 12px;
              width: 20px;
              height: 20px;
            }

            .spinner circle {
              stroke: currentColor;
              stroke-linecap: round;
              animation: dash 1.5s ease-in-out infinite;
            }

            @keyframes rotate {
              100% {
                transform: rotate(360deg);
              }
            }

            @keyframes dash {
              0% {
                stroke-dasharray: 1, 150;
                stroke-dashoffset: 0;
              }
              50% {
                stroke-dasharray: 90, 150;
                stroke-dashoffset: -35;
              }
              100% {
                stroke-dasharray: 90, 150;
                stroke-dashoffset: -124;
              }
            }

            @media (max-width: 768px) {
              .container {
                padding: 0 1.5rem;
              }

              .form-section {
                padding: 2rem 1.5rem;
                width: 100%;
              }

              .form-row {
                flex-direction: column;
                gap: 1.75rem;
              }

              .form-actions {
                flex-direction: column-reverse;
                gap: 16px;
              }

              .btn-primary,
              .btn-secondary {
                width: 100%;
              }

              .create-event__title {
                font-size: 32px;
              }
            }

            @media (max-width: 480px) {
              .create-event__title {
                font-size: 28px;
              }

              .create-event__subtitle {
                font-size: 16px;
              }

              .section-title {
                font-size: 20px;
              }

              .form-label {
                font-size: 15px;
              }
            }

            .sub-categories-container {
              display: flex;
              flex-direction: column;
              gap: 16px;
              margin-top: 0.5rem;
            }

            .sub-category-item {
              display: flex;
              align-items: center;
              gap: 16px;
              background-color: rgba(25, 24, 30, 0.5);
              border-radius: 10px;
              padding: 12px;
              border: 1px solid rgba(67, 67, 70, 0.2);
              transition: all 0.25s ease;
              position: relative;
              animation: slideIn 0.3s forwards;
            }

            @keyframes slideIn {
              from {
                opacity: 0;
                transform: translateX(-10px);
              }
              to {
                opacity: 1;
                transform: translateX(0);
              }
            }

            .sub-category-item:hover {
              background-color: rgba(25, 24, 30, 0.7);
              border-color: rgba(67, 67, 70, 0.3);
              transform: translateX(3px);
            }

            .sub-category-select {
              flex: 1;
            }

            .sub-category-remove {
              display: flex;
              align-items: center;
              justify-content: center;
              width: 36px;
              height: 36px;
              background-color: rgba(239, 68, 68, 0.1);
              border: 1px solid rgba(239, 68, 68, 0.2);
              border-radius: 8px;
              color: #ef4444;
              cursor: pointer;
              transition: all 0.25s ease;
              flex-shrink: 0;
            }

            .sub-category-remove:hover {
              background-color: rgba(239, 68, 68, 0.2);
              border-color: rgba(239, 68, 68, 0.3);
              transform: scale(1.1);
            }

            .sub-category-remove:active {
              transform: scale(0.95);
            }

            .add-sub-category-btn {
              display: flex;
              align-items: center;
              gap: 10px;
              padding: 12px 20px;
              background-color: rgba(170, 170, 170, 0.1);
              border: 1px solid rgba(170, 170, 170, 0.2);
              border-radius: 10px;
              color: #cccccc;
              font-size: 15px;
              font-weight: 500;
              cursor: pointer;
              transition: all 0.25s ease;
              margin-top: 12px;
              width: fit-content;
              position: relative;
              overflow: hidden;
            }

            .add-sub-category-btn::before {
              content: '';
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: linear-gradient(
                135deg,
                rgba(170, 170, 170, 0.15),
                rgba(170, 170, 170, 0.05)
              );
              opacity: 0;
              transition: opacity 0.3s ease;
              z-index: -1;
            }

            .add-sub-category-btn:hover {
              background-color: rgba(170, 170, 170, 0.15);
              border-color: rgba(170, 170, 170, 0.3);
              transform: translateY(-2px);
              box-shadow: 0 4px 12px rgba(170, 170, 170, 0.1);
            }

            .add-sub-category-btn:active {
              transform: translateY(0);
            }

            .add-sub-category-btn:disabled {
              opacity: 0.5;
              cursor: not-allowed;
              transform: none;
              box-shadow: none;
            }

            .add-sub-category-btn svg {
              transition: transform 0.3s ease;
            }

            .add-sub-category-btn:hover svg {
              transform: rotate(90deg);
            }

            .create-event__note {
              margin-top: 4rem;
              padding: 20px;
              background-color: rgba(25, 24, 30, 0.3);
              border-radius: 12px;
              border: 1px solid rgba(67, 67, 70, 0.2);
              backdrop-filter: blur(10px);
              width: 90%;
              margin-left: auto;
              margin-right: auto;
            }

            .create-event__note p {
              font-size: 14px;
              color: rgba(255, 255, 255, 0.7);
              margin: 0;
            }

            .create-event__note strong {
              color: rgba(255, 255, 255, 0.9);
            }

            .ticket-types-container {
              display: flex;
              flex-direction: column;
              gap: 24px;
            }

            .ticket-type-card {
              background-color: rgba(25, 24, 30, 0.4);
              border-radius: 12px;
              padding: 24px;
              border: 1px solid rgba(67, 67, 70, 0.3);
              transition: all 0.25s ease;
              position: relative;
              animation: fadeIn 0.4s ease-out;
            }

            .ticket-type-card:hover {
              background-color: rgba(25, 24, 30, 0.5);
              border-color: rgba(67, 67, 70, 0.4);
              transform: translateY(-2px);
              box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
            }

            .ticket-type-header {
              display: flex;
              justify-content: space-between;
              align-items: center;
              margin-bottom: 20px;
            }

            .ticket-type-title {
              font-size: 16px;
              font-weight: 400;
              color: rgba(255, 255, 255, 0.9);
              margin: 0;
              display: flex;
              align-items: center;
            }

            .ticket-type-actions {
              display: flex;
              gap: 8px;
            }

            .ticket-action-btn {
              display: flex;
              align-items: center;
              justify-content: center;
              width: 32px;
              height: 32px;
              border-radius: 6px;
              border: 1px solid rgba(67, 67, 70, 0.3);
              background-color: rgba(25, 24, 30, 0.7);
              color: #cccccc;
              cursor: pointer;
              transition: all 0.2s ease;
            }

            .ticket-action-duplicate:hover {
              background-color: rgba(170, 170, 170, 0.15);
              border-color: rgba(170, 170, 170, 0.3);
              color: #ffffff;
              transform: scale(1.05);
            }

            .ticket-action-remove:hover {
              background-color: rgba(239, 68, 68, 0.15);
              border-color: rgba(239, 68, 68, 0.3);
              color: #ef4444;
              transform: scale(1.05);
            }

            .ticket-action-btn:disabled {
              opacity: 0.4;
              cursor: not-allowed;
              transform: none;
            }

            .ticket-name-input-wrapper {
              display: flex;
              gap: 10px;
            }

            .ticket-template-dropdown {
              position: relative;
            }

            .ticket-template-btn {
              height: 58px;
              padding: 0 16px;
              background-color: rgba(25, 24, 30, 0.7);
              border: 1px solid rgba(67, 67, 70, 0.3);
              border-radius: 12px;
              color: #cccccc;
              font-size: 15px;
              font-weight: 500;
              cursor: pointer;
              transition: all 0.25s ease;
              display: flex;
              align-items: center;
              gap: 6px;
              white-space: nowrap;
            }

            .ticket-template-btn:hover {
              background-color: rgba(25, 24, 30, 0.9);
              border-color: rgba(67, 67, 70, 0.5);
              color: #ffffff;
              transform: translateY(-2px);
              box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            }

            .ticket-template-options {
              position: absolute;
              top: calc(100% + 5px);
              right: 0;
              background-color: #19181e;
              border: 1px solid rgba(67, 67, 70, 0.3);
              border-radius: 10px;
              padding: 8px;
              z-index: 10;
              width: 180px;
              display: none;
              flex-direction: column;
              gap: 2px;
              box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
            }

            /* Remove this hover effect that shows dropdown */
            .ticket-template-dropdown:hover .ticket-template-options {
              display: none; /* Changed from flex to none to prevent display on hover */
            }

            .ticket-template-option {
              padding: 10px 14px;
              border-radius: 6px;
              background-color: transparent;
              border: none;
              color: #ffffff;
              font-size: 14px;
              text-align: left;
              cursor: pointer;
              transition: background-color 0.15s ease;
            }

            .ticket-template-option:hover {
              background-color: rgba(170, 170, 170, 0.1);
            }

            .ticket-description {
              min-height: 80px;
            }

            .ticket-sales-period {
              margin-top: 10px;
              margin-bottom: 20px;
            }

            .ticket-section-subtitle {
              font-size: 15px;
              font-weight: 400;
              color: rgba(255, 255, 255, 0.8);
              margin: 0 0 4px 0;
            }

            .ticket-section-helper {
              font-size: 13px;
              color: rgba(138, 137, 150, 0.7);
              margin: 0 0 14px 0;
              line-height: 1.5;
            }

            .add-ticket-type-btn {
              display: flex;
              align-items: center;
              justify-content: center;
              gap: 10px;
              padding: 16px;
              background-color: rgba(25, 24, 30, 0.4);
              border: 1px dashed rgba(67, 67, 70, 0.4);
              border-radius: 12px;
              color: #cccccc;
              font-size: 16px;
              font-weight: 500;
              cursor: pointer;
              transition: all 0.25s ease;
              width: 100%;
              margin-top: 12px;
            }

            .add-ticket-type-btn:hover {
              background-color: rgba(25, 24, 30, 0.6);
              border-color: rgba(170, 170, 170, 0.4);
              color: #ffffff;
              transform: translateY(-2px);
            }

            .add-ticket-type-btn svg {
              transition: transform 0.3s ease;
            }

            .add-ticket-type-btn:hover svg {
              transform: rotate(90deg);
            }

            .ticket-types-error {
              margin-bottom: 20px;
            }

            /* Modal styles */
            .ticket-template-modal-overlay {
              position: fixed;
              top: 0;
              left: 0;
              right: 0;
              bottom: 0;
              background-color: rgba(0, 0, 0, 0.75);
              display: flex;
              align-items: center;
              justify-content: center;
              z-index: 100;
              backdrop-filter: blur(5px);
              animation: fadeIn 0.3s ease-out forwards;
            }

            .ticket-template-modal {
              width: 90%;
              max-width: 600px;
              background-color: #19181e;
              border-radius: 16px;
              border: 1px solid rgba(255, 255, 255, 0.1);
              box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
              animation: modalSlideIn 0.4s cubic-bezier(0.16, 1, 0.3, 1) forwards;
              overflow: hidden;
              transform: translateY(20px);
              opacity: 0;
            }

            @keyframes fadeIn {
              from {
                opacity: 0;
              }
              to {
                opacity: 1;
              }
            }

            @keyframes modalSlideIn {
              from {
                transform: translateY(40px);
                opacity: 0;
              }
              to {
                transform: translateY(0);
                opacity: 1;
              }
            }

            .ticket-template-modal-header {
              display: flex;
              justify-content: space-between;
              align-items: center;
              padding: 20px 24px;
              border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            }

            .ticket-template-modal-header h3 {
              font-size: 18px;
              font-weight: 400;
              color: #ffffff;
              margin: 0;
              letter-spacing: 0.3px;
            }

            .modal-close-btn {
              display: flex;
              align-items: center;
              justify-content: center;
              width: 36px;
              height: 36px;
              border-radius: 50%;
              border: none;
              background-color: rgba(255, 255, 255, 0.1);
              color: #ffffff;
              cursor: pointer;
              transition: all 0.2s ease;
            }

            .modal-close-btn:hover {
              background-color: rgba(255, 255, 255, 0.2);
              transform: scale(1.1);
            }

            .ticket-template-modal-body {
              padding: 16px;
              max-height: 70vh;
              overflow-y: auto;
              display: grid;
              grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
              gap: 16px;
            }

            .template-card {
              background-color: rgba(255, 255, 255, 0.05);
              border-radius: 12px;
              border: 1px solid rgba(255, 255, 255, 0.1);
              padding: 20px;
              cursor: pointer;
              transition: all 0.25s ease;
              display: flex;
              justify-content: space-between;
              align-items: flex-start;
              position: relative;
              overflow: hidden;
            }

            .template-card::before {
              content: '';
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: linear-gradient(135deg, rgba(170, 170, 170, 0.1), transparent);
              opacity: 0;
              transition: opacity 0.3s ease;
            }

            .template-card:hover {
              transform: translateY(-4px);
              box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
              background-color: rgba(255, 255, 255, 0.1);
              border-color: rgba(255, 255, 255, 0.2);
            }

            .template-card:hover::before {
              opacity: 1;
            }

            .template-card-content {
              flex: 1;
            }

            .template-name {
              font-size: 16px;
              font-weight: 400;
              color: #ffffff;
              margin: 0 0 6px 0;
            }

            .template-description {
              font-size: 14px;
              color: rgba(255, 255, 255, 0.7);
              margin: 0;
              line-height: 1.4;
            }

            .template-card-icon {
              width: 36px;
              height: 36px;
              border-radius: 50%;
              background-color: #aaaaaa;
              color: #19181e;
              display: flex;
              align-items: center;
              justify-content: center;
              opacity: 0;
              transform: scale(0.8);
              transition: all 0.2s ease;
            }

            .template-card:hover .template-card-icon {
              opacity: 1;
              transform: scale(1);
            }

            /* Update existing template dropdown */
            .ticket-template-options {
              display: none; /* Hide dropdown since we're using modal now */
            }

            @media (max-width: 768px) {
              .ticket-template-modal {
                width: 95%;
                max-height: 80vh;
              }

              .ticket-template-modal-body {
                grid-template-columns: 1fr;
              }
            }

            /* Subcategory modal styles */
            .subcategory-modal-overlay {
              position: fixed;
              top: 0;
              left: 0;
              right: 0;
              bottom: 0;
              background-color: rgba(0, 0, 0, 0.75);
              display: flex;
              align-items: center;
              justify-content: center;
              z-index: 100;
              backdrop-filter: blur(5px);
              animation: fadeIn 0.3s ease-out forwards;
            }

            .subcategory-modal {
              width: 90%;
              max-width: 600px;
              background-color: #19181e;
              border-radius: 16px;
              border: 1px solid rgba(255, 255, 255, 0.1);
              box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
              animation: modalSlideIn 0.4s cubic-bezier(0.16, 1, 0.3, 1) forwards;
              overflow: hidden;
              transform: translateY(20px);
              opacity: 0;
              max-height: 90vh;
              display: flex;
              flex-direction: column;
            }

            .subcategory-modal-header {
              display: flex;
              justify-content: space-between;
              align-items: center;
              padding: 20px 24px;
              border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            }

            .subcategory-modal-header h3 {
              font-size: 18px;
              font-weight: 400;
              color: #ffffff;
              margin: 0;
              letter-spacing: 0.3px;
            }

            .subcategory-modal-body {
              padding: 20px 24px;
              overflow-y: auto;
              flex: 1;
              display: flex;
              flex-direction: column;
              gap: 20px;
            }

            .subcategory-modal-info {
              font-size: 14px;
              color: rgba(255, 255, 255, 0.6);
              margin: 0;
            }

            .subcategory-search {
              margin-bottom: 16px;
            }

            .subcategory-search-input {
              width: 100%;
              height: 46px;
              background-color: rgba(25, 24, 30, 0.5);
              border: 1px solid rgba(67, 67, 70, 0.25);
              border-radius: 10px;
              color: white;
              font-size: 15px;
              padding: 0 18px;
              transition: all 0.25s ease;
            }

            .subcategory-search-input:focus {
              outline: none;
              border-color: rgba(170, 170, 170, 0.5);
              box-shadow: 0 0 0 3px rgba(170, 170, 170, 0.15);
            }

            .subcategory-options {
              display: flex;
              flex-direction: column;
              gap: 24px;
            }

            .subcategory-section {
              display: flex;
              flex-direction: column;
              gap: 12px;
            }

            .subcategory-section-title {
              font-size: 15px;
              font-weight: 400;
              color: rgba(255, 255, 255, 0.7);
              margin: 0;
              letter-spacing: 0.2px;
            }

            .subcategory-chips {
              display: flex;
              flex-wrap: wrap;
              gap: 10px;
            }

            .subcategory-chip {
              display: inline-flex;
              align-items: center;
              gap: 6px;
              padding: 6px 12px;
              background-color: rgba(255, 255, 255, 0.08);
              border-radius: 6px;
              color: rgba(255, 255, 255, 0.8);
              font-size: 14px;
              cursor: pointer;
              transition: all 0.2s ease;
              user-select: none;
              border: 1px solid transparent;
            }

            /* Modified hover style to use the pink color */
            .subcategory-chip:hover {
              background-color: rgba(233, 75, 159, 0.05);
              transform: translateY(-1px);
            }

            .subcategory-chip--selected {
              background-color: rgba(233, 75, 159, 0.08);
              border-color: rgba(233, 75, 159, 0.2);
              color: white;
            }

            .subcategory-chip--custom {
              background-color: rgba(119, 81, 200, 0.15);
              border-color: rgba(119, 81, 200, 0.3);
            }

            .custom-subcategory-input {
              display: flex;
              gap: 10px;
              margin-bottom: 10px;
            }

            .custom-input {
              height: 46px;
            }

            .add-custom-btn {
              padding: 0 16px;
              background-color: rgba(170, 170, 170, 0.2);
              border: 1px solid rgba(170, 170, 170, 0.3);
              border-radius: 8px;
              color: rgba(255, 255, 255, 0.9);
              font-size: 14px;
              cursor: pointer;
              transition: all 0.2s ease;
              white-space: nowrap;
            }

            .add-custom-btn:hover:not(:disabled) {
              background-color: rgba(233, 75, 159, 0.15);
              transform: translateY(-1px);
            }

            .add-custom-btn:disabled {
              opacity: 0.5;
              cursor: not-allowed;
            }

            .remove-custom-btn {
              display: flex;
              align-items: center;
              justify-content: center;
              width: 20px;
              height: 20px;
              background: none;
              border: none;
              padding: 0;
              color: rgba(255, 255, 255, 0.7);
              cursor: pointer;
              transition: all 0.2s ease;
            }

            .remove-custom-btn:hover {
              color: white;
              transform: scale(1.1);
            }

            .subcategory-modal-footer {
              display: flex;
              justify-content: space-between;
              align-items: center;
              padding-top: 20px;
              border-top: 1px solid rgba(255, 255, 255, 0.08);
              margin-top: 10px;
            }

            .subcategory-count {
              font-size: 14px;
              color: rgba(255, 255, 255, 0.7);
            }

            .subcategory-actions {
              display: flex;
              gap: 12px;
            }

            .subcategory-actions .btn-primary,
            .subcategory-actions .btn-secondary {
              height: 42px;
              min-width: auto;
              padding: 0 20px;
              font-size: 14px;
            }

            /* Selected subcategories display in the form */
            .subcategories-display {
              display: flex;
              flex-direction: column;
              gap: 12px;
            }

            .selected-subcategories {
              display: flex;
              flex-wrap: wrap;
              gap: 10px;
              min-height: 46px;
              padding: 5px;
              background-color: rgba(25, 24, 30, 0.3);
              border: 1px solid rgba(67, 67, 70, 0.25);
              border-radius: 10px;
            }

            .no-subcategories {
              color: rgba(111, 110, 123, 0.7);
              font-size: 14px;
              padding: 8px 12px;
              font-style: italic;
            }

            .selected-subcategory {
              display: inline-flex;
              align-items: center;
              gap: 8px;
              padding: 5px 10px;
              background-color: rgba(233, 75, 159, 0.07);
              border: 1px solid rgba(233, 75, 159, 0.15);
              border-radius: 6px;
              color: rgba(255, 255, 255, 0.9);
              font-size: 14px;
            }

            .remove-subcategory-btn {
              display: flex;
              align-items: center;
              justify-content: center;
              width: 20px;
              height: 20px;
              background: none;
              border: none;
              padding: 0;
              color: rgba(255, 255, 255, 0.7);
              cursor: pointer;
              transition: all 0.2s ease;
            }

            .remove-subcategory-btn:hover {
              color: white;
              transform: scale(1.1);
            }

            .manage-subcategories-btn {
              display: flex;
              align-items: center;
              gap: 8px;
              padding: 10px 16px;
              background-color: rgba(25, 24, 30, 0.5);
              border: 1px solid rgba(67, 67, 70, 0.25);
              border-radius: 8px;
              color: rgba(255, 255, 255, 0.8);
              font-size: 14px;
              cursor: pointer;
              transition: all 0.2s ease;
              align-self: flex-start;
            }

            .manage-subcategories-btn:hover:not(:disabled) {
              background-color: rgba(25, 24, 30, 0.7);
              border-color: rgba(170, 170, 170, 0.3);
              transform: translateY(-1px);
            }

            .manage-subcategories-btn:disabled {
              opacity: 0.5;
              cursor: not-allowed;
            }

            .manage-subcategories-btn svg {
              transition: transform 0.2s ease;
            }

            .manage-subcategories-btn:hover:not(:disabled) svg {
              transform: rotate(90deg);
            }

            @media (max-width: 768px) {
              .subcategory-modal {
                width: 95%;
                max-height: 80vh;
              }

              .subcategory-modal-footer {
                flex-direction: column;
                gap: 16px;
                align-items: stretch;
              }

              .subcategory-actions {
                flex-direction: column;
              }
            }

            /* Add focus styling for inputs */
            .form-input:focus,
            .form-select:focus,
            .form-textarea:focus,
            .subcategory-search-input:focus {
              outline: none;
              border-color: rgba(233, 75, 159, 0.3);
              box-shadow: 0 0 0 1px rgba(233, 75, 159, 0.15);
              background-color: rgba(25, 24, 30, 0.5);
            }

            /* Update form group focus style */
            .form-group:focus-within .form-label {
              color: rgba(233, 75, 159, 0.7);
              font-weight: 400;
              transform: translateX(1px);
            }

            /* FAQ section styles */
            .section-optional {
              font-size: 14px;
              color: rgba(255, 255, 255, 0.5);
              font-weight: 300;
              margin-left: 8px;
            }

            .section-intro {
              font-size: 14px;
              color: rgba(255, 255, 255, 0.6);
              margin: 0 0 24px 0;
              line-height: 1.5;
            }

            .faq-container {
              display: flex;
              flex-direction: column;
              gap: 24px;
            }

            .faq-item {
              background-color: rgba(25, 24, 30, 0.3);
              border-radius: 10px;
              border: 1px solid rgba(67, 67, 70, 0.2);
              overflow: hidden;
              transition: all 0.25s ease;
            }

            .faq-item:hover {
              background-color: rgba(25, 24, 30, 0.4);
              border-color: rgba(67, 67, 70, 0.3);
              transform: translateY(-1px);
            }

            .faq-header {
              display: flex;
              justify-content: space-between;
              align-items: center;
              padding: 12px 16px;
              border-bottom: 1px solid rgba(67, 67, 70, 0.15);
            }

            .faq-number {
              font-size: 14px;
              font-weight: 400;
              color: rgba(233, 75, 159, 0.7);
              margin: 0;
              letter-spacing: 0.5px;
            }

            .faq-actions {
              display: flex;
              gap: 8px;
            }

            .faq-action-btn {
              display: flex;
              align-items: center;
              justify-content: center;
              width: 28px;
              height: 28px;
              border-radius: 4px;
              background-color: rgba(25, 24, 30, 0.5);
              border: 1px solid rgba(67, 67, 70, 0.25);
              color: rgba(255, 255, 255, 0.7);
              cursor: pointer;
              transition: all 0.2s ease;
            }

            .faq-action-remove:hover {
              background-color: rgba(239, 68, 68, 0.15);
              border-color: rgba(239, 68, 68, 0.3);
              color: #ef4444;
              transform: scale(1.05);
            }

            .faq-content {
              padding: 16px;
            }

            .faq-answer {
              min-height: 80px;
            }

            .add-faq-btn {
              display: flex;
              align-items: center;
              justify-content: center;
              gap: 10px;
              padding: 14px;
              background-color: rgba(25, 24, 30, 0.4);
              border: 1px dashed rgba(67, 67, 70, 0.4);
              border-radius: 10px;
              color: rgba(255, 255, 255, 0.8);
              font-size: 15px;
              font-weight: 400;
              cursor: pointer;
              transition: all 0.25s ease;
            }

            .add-faq-btn:hover {
              background-color: rgba(25, 24, 30, 0.6);
              border-color: rgba(233, 75, 159, 0.25);
              color: white;
              transform: translateY(-2px);
            }

            .add-faq-btn svg {
              transition: transform 0.3s ease;
            }

            .add-faq-btn:hover svg {
              transform: rotate(90deg);
            }

            @media (max-width: 768px) {
              .faq-content {
                padding: 12px;
              }
            }

            .image-upload-container {
              width: 100%;
              margin-bottom: 10px;
            }

            .image-upload-row {
              display: flex;
              gap: 20px;
              width: 100%;
            }

            .image-upload-dropzone {
              position: relative;
              flex: 1;
              background-color: rgba(25, 24, 30, 0.4);
              border: 2px dashed rgba(67, 67, 70, 0.4);
              border-radius: 10px;
              height: 160px;
              cursor: pointer;
              overflow: hidden;
              transition: all 0.25s ease;
            }

            .image-upload-dropzone:hover {
              background-color: rgba(25, 24, 30, 0.6);
              border-color: rgba(170, 170, 170, 0.5);
              transform: translateY(-2px);
            }

            .banner-dropzone {
              flex: 2;
            }

            .has-image {
              border-style: solid;
              border-color: rgba(170, 170, 170, 0.3);
            }

            .preview-image {
              width: 100%;
              height: 100%;
              object-fit: cover;
            }

            .upload-placeholder {
              display: flex;
              flex-direction: column;
              align-items: center;
              justify-content: center;
              height: 100%;
              gap: 10px;
              padding: 15px;
            }

            .upload-icon {
              color: rgba(170, 170, 170, 0.6);
              transition: all 0.25s ease;
            }

            .image-upload-dropzone:hover .upload-icon {
              color: rgba(170, 170, 170, 0.9);
              transform: scale(1.1);
            }

            .upload-text {
              display: flex;
              flex-direction: column;
              align-items: center;
              text-align: center;
            }

            .primary-text {
              color: rgba(255, 255, 255, 0.9);
              font-weight: 500;
              font-size: 15px;
              margin-bottom: 3px;
            }

            .secondary-text {
              color: rgba(255, 255, 255, 0.5);
              font-size: 13px;
            }

            .image-inputs {
              display: none;
            }

            .image-input {
              display: none;
            }

            .banner-preview {
              width: 200px;
              height: 100px;
              border-radius: 10px;
              background-color: #333;
              background-size: cover;
              background-position: center;
              cursor: pointer;
              position: relative;
            }

            .image-overlay {
              position: absolute;
              top: 0;
              left: 0;
              right: 0;
              bottom: 0;
              background-color: rgba(0, 0, 0, 0.7);
              display: flex;
              align-items: center;
              justify-content: center;
              opacity: 0;
              transition: opacity 0.25s ease;
            }

            .image-upload-dropzone:hover .image-overlay {
              opacity: 1;
            }

            .remove-image-btn {
              display: flex;
              align-items: center;
              gap: 8px;
              background-color: rgba(239, 68, 68, 0.2);
              color: white;
              border: 1px solid rgba(239, 68, 68, 0.3);
              padding: 8px 16px;
              border-radius: 6px;
              font-size: 14px;
              cursor: pointer;
              transition: all 0.2s ease;
            }

            .remove-image-btn:hover {
              background-color: rgba(239, 68, 68, 0.4);
              transform: scale(1.05);
            }

            .remove-image-btn svg {
              width: 16px;
              height: 16px;
            }

            .event-options-container {
              margin-bottom: 2rem;
            }

            .event-options-grid {
              display: grid;
              grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
              gap: 12px;
              margin-bottom: 2rem;
            }

            .event-option-item {
              flex: 0 0 auto;
            }

            .add-event-option {
              margin-top: 1.5rem;
            }

            .custom-event-option-input {
              display: flex;
              gap: 10px;
              margin-top: 2rem;
              margin-bottom: 1.5rem;
            }

            .date-picker-wrapper {
              position: relative;
            }

            .date-input {
              padding-right: 30px;
            }

            .date-picker-wrapper::after {
              content: '\25BC';
              position: absolute;
              top: 50%;
              right: 10px;
              transform: translateY(-50%);
              pointer-events: none;
              color: rgba(255, 255, 255, 0.5);
            }

            .time-picker-wrapper {
              position: relative;
            }

            .time-input {
              padding-right: 30px;
              cursor: pointer;
            }

            .time-picker-wrapper::after {
              content: '\25BC';
              position: absolute;
              top: 50%;
              right: 10px;
              transform: translateY(-50%);
              pointer-events: none;
              color: rgba(255, 255, 255, 0.5);
            }

            .picker-tip {
              position: absolute;
              top: -54px;
              left: 50%;
              transform: translateX(-50%);
              background-color: rgba(25, 24, 30, 0.95);
              border: 1px solid rgba(170, 170, 170, 0.2);
              border-radius: 8px;
              padding: 8px 12px;
              z-index: 10;
              width: 180px;
              box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
              animation: tipFadeIn 0.3s ease;
            }

            @keyframes tipFadeIn {
              from {
                opacity: 0;
                transform: translate(-50%, 10px);
              }
              to {
                opacity: 1;
                transform: translate(-50%, 0);
              }
            }

            .picker-tip::after {
              content: '';
              position: absolute;
              top: 100%;
              left: 50%;
              transform: translateX(-50%);
              border-width: 8px;
              border-style: solid;
              border-color: rgba(25, 24, 30, 0.95) transparent transparent transparent;
            }

            .tip-content p {
              margin: 0 0 4px;
              font-size: 14px;
              font-weight: 500;
              color: rgba(255, 255, 255, 0.9);
            }

            .tip-content span {
              font-size: 12px;
              color: rgba(255, 255, 255, 0.6);
            }

            /* Time Picker Modal */
            .time-picker-overlay {
              position: fixed;
              top: 0;
              left: 0;
              right: 0;
              bottom: 0;
              background-color: rgba(0, 0, 0, 0.75);
              display: flex;
              align-items: center;
              justify-content: center;
              z-index: 100;
              backdrop-filter: blur(5px);
              animation: fadeIn 0.3s ease-out forwards;
            }

            .time-picker-modal {
              width: 320px;
              background-color: #19181e;
              border-radius: 16px;
              border: 1px solid rgba(255, 255, 255, 0.1);
              box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
              animation: modalSlideIn 0.4s cubic-bezier(0.16, 1, 0.3, 1) forwards;
              overflow: hidden;
            }

            .time-picker-header {
              display: flex;
              justify-content: space-between;
              align-items: center;
              padding: 16px 20px;
              border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            }

            .time-picker-header h3 {
              font-size: 18px;
              font-weight: 500;
              color: #ffffff;
              margin: 0;
              letter-spacing: 0.3px;
            }

            .time-picker-close {
              background: none;
              border: none;
              color: rgba(255, 255, 255, 0.6);
              cursor: pointer;
              padding: 5px;
              display: flex;
              align-items: center;
              justify-content: center;
              border-radius: 4px;
              transition: all 0.2s ease;
            }

            .time-picker-close:hover {
              color: white;
              background-color: rgba(255, 255, 255, 0.1);
            }

            .time-picker-body {
              padding: 20px;
            }

            .time-picker-grid {
              display: grid;
              grid-template-columns: repeat(4, 1fr);
              gap: 8px;
              max-height: 240px;
              overflow-y: auto;
              padding-right: 5px;
              scrollbar-width: thin;
              scrollbar-color: rgba(170, 170, 170, 0.3) transparent;
              position: relative;
            }

            .time-picker-grid::-webkit-scrollbar {
              width: 4px;
            }

            .time-picker-grid::-webkit-scrollbar-track {
              background: rgba(25, 24, 30, 0.3);
              border-radius: 2px;
            }

            .time-picker-grid::-webkit-scrollbar-thumb {
              background-color: rgba(233, 75, 159, 0.3);
              border-radius: 2px;
            }

            .time-picker-grid::after {
              content: 'Scroll for more options';
              position: absolute;
              bottom: 0;
              left: 0;
              width: 100%;
              text-align: center;
              padding: 30px 0 5px;
              background: linear-gradient(to bottom, transparent, #19181e);
              font-size: 12px;
              color: rgba(255, 255, 255, 0.5);
              pointer-events: none;
              opacity: 0;
              transition: opacity 0.3s ease;
            }

            .time-picker-grid:hover::after {
              opacity: 1;
            }

            .time-option {
              padding: 10px 0;
              text-align: center;
              background-color: rgba(255, 255, 255, 0.05);
              border-radius: 8px;
              cursor: pointer;
              transition: all 0.2s ease;
              font-size: 14px;
              color: rgba(255, 255, 255, 0.8);
              border: 1px solid transparent;
            }

            .time-option:hover {
              background-color: rgba(255, 255, 255, 0.1);
              transform: translateY(-2px);
            }

            .time-option.selected {
              background-color: rgba(233, 75, 159, 0.15);
              border-color: rgba(233, 75, 159, 0.3);
              color: white;
              font-weight: 500;
            }

            .time-period-selector {
              display: flex;
              justify-content: center;
              gap: 10px;
              margin-top: 16px;
            }

            .time-period-btn {
              padding: 8px 20px;
              background-color: rgba(255, 255, 255, 0.05);
              border: 1px solid rgba(255, 255, 255, 0.1);
              border-radius: 8px;
              color: rgba(255, 255, 255, 0.7);
              cursor: pointer;
              transition: all 0.2s ease;
              font-size: 14px;
            }

            .time-period-btn:hover {
              background-color: rgba(255, 255, 255, 0.1);
            }

            .time-period-btn.selected {
              background-color: rgba(233, 75, 159, 0.15);
              border-color: rgba(233, 75, 159, 0.3);
              color: white;
            }

            .time-picker-actions {
              display: flex;
              justify-content: flex-end;
              gap: 10px;
              padding: 16px 20px;
              border-top: 1px solid rgba(255, 255, 255, 0.1);
            }

            .time-picker-btn {
              padding: 8px 16px;
              border-radius: 8px;
              font-size: 14px;
              cursor: pointer;
              transition: all 0.2s ease;
            }

            .time-picker-cancel {
              background-color: transparent;
              border: 1px solid rgba(255, 255, 255, 0.1);
              color: rgba(255, 255, 255, 0.7);
            }

            .time-picker-cancel:hover {
              background-color: rgba(255, 255, 255, 0.05);
              color: white;
            }

            .time-picker-apply {
              background-color: rgba(233, 75, 159, 0.15);
              border: 1px solid rgba(233, 75, 159, 0.3);
              color: white;
            }

            .time-picker-apply:hover {
              background-color: rgba(233, 75, 159, 0.25);
              transform: translateY(-2px);
            }

            @keyframes modalSlideIn {
              0% {
                opacity: 0;
                transform: translateY(20px);
              }
              100% {
                opacity: 1;
                transform: translateY(0);
              }
            }

            @keyframes fadeIn {
              0% {
                opacity: 0;
              }
              100% {
                opacity: 1;
              }
            }

            /* Custom Time Input */
            .custom-time-input {
              margin-bottom: 20px;
              display: flex;
              flex-direction: column;
              align-items: center;
            }

            .time-input-group {
              display: flex;
              align-items: center;
              background-color: rgba(233, 75, 159, 0.08);
              border: 1px solid rgba(233, 75, 159, 0.2);
              border-radius: 10px;
              padding: 12px 16px;
              margin-bottom: 24px;
              position: relative;
            }

            .full-time-input {
              width: 100%;
              background-color: rgba(233, 75, 159, 0.08);
              border: 1px solid rgba(233, 75, 159, 0.2);
              border-radius: 10px;
              padding: 12px 16px;
              margin-bottom: 16px;
              color: white;
              font-size: 16px;
              text-align: center;
              outline: none;
            }

            .full-time-input:focus {
              background-color: rgba(233, 75, 159, 0.15);
              border-color: rgba(233, 75, 159, 0.4);
            }

            .full-time-input::placeholder {
              color: rgba(255, 255, 255, 0.4);
            }

            .time-input-group::after {
              content: 'Type your custom time';
              position: absolute;
              bottom: -20px;
              left: 0;
              width: 100%;
              text-align: center;
              font-size: 11px;
              color: rgba(255, 255, 255, 0.5);
            }

            .time-input-field {
              width: 40px;
              background: transparent;
              border: none;
              color: white;
              font-size: 20px;
              font-weight: 500;
              text-align: center;
              -moz-appearance: textfield;
              border-radius: 5px;
              padding: 5px 0;
              transition: all 0.2s ease;
            }

            .time-input-field::-webkit-outer-spin-button,
            .time-input-field::-webkit-inner-spin-button {
              -webkit-appearance: none;
              margin: 0;
            }

            .time-input-field:focus {
              outline: none;
              background-color: rgba(255, 255, 255, 0.1);
            }

            .time-input-field::placeholder {
              color: rgba(255, 255, 255, 0.4);
              font-size: 16px;
            }

            .time-divider {
              color: white;
              font-size: 20px;
              margin: 0 5px;
            }

            .time-input-note {
              font-size: 11px;
              color: rgba(255, 255, 255, 0.5);
              margin-top: 4px;
            }

            /* Date Picker Styles */
            .date-picker-overlay {
              position: fixed;
              top: 0;
              left: 0;
              right: 0;
              bottom: 0;
              background-color: rgba(0, 0, 0, 0.75);
              display: flex;
              align-items: center;
              justify-content: center;
              z-index: 100;
              backdrop-filter: blur(5px);
              animation: fadeIn 0.3s ease-out forwards;
            }

            .date-picker-modal {
              width: 320px;
              background-color: #19181e;
              border-radius: 16px;
              border: 1px solid rgba(255, 255, 255, 0.1);
              box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
              animation: modalSlideIn 0.4s cubic-bezier(0.16, 1, 0.3, 1) forwards;
              overflow: hidden;
            }

            .date-picker-header {
              display: flex;
              justify-content: space-between;
              align-items: center;
              padding: 16px 20px;
              border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            }

            .date-picker-header h3 {
              font-size: 18px;
              font-weight: 500;
              color: #ffffff;
              margin: 0;
              letter-spacing: 0.3px;
            }

            .date-picker-close {
              background: none;
              border: none;
              color: rgba(255, 255, 255, 0.6);
              cursor: pointer;
              padding: 5px;
              display: flex;
              align-items: center;
              justify-content: center;
              border-radius: 4px;
              transition: all 0.2s ease;
            }

            .date-picker-close:hover {
              color: white;
              background-color: rgba(255, 255, 255, 0.1);
            }

            .date-picker-body {
              padding: 20px;
            }

            .date-picker-month-nav {
              display: flex;
              justify-content: space-between;
              align-items: center;
              margin-bottom: 16px;
            }

            .month-display {
              font-size: 16px;
              font-weight: 500;
              color: white;
            }

            .month-nav-btn {
              background: none;
              border: none;
              color: rgba(255, 255, 255, 0.6);
              cursor: pointer;
              padding: 6px;
              border-radius: 6px;
              display: flex;
              align-items: center;
              justify-content: center;
              transition: all 0.2s ease;
            }

            .month-nav-btn:hover {
              background-color: rgba(255, 255, 255, 0.1);
              color: white;
            }

            .date-picker-weekdays {
              display: grid;
              grid-template-columns: repeat(7, 1fr);
              text-align: center;
              margin-bottom: 8px;
            }

            .weekday {
              font-size: 12px;
              color: rgba(255, 255, 255, 0.5);
              padding: 8px 0;
              font-weight: 500;
            }

            .date-picker-days {
              display: grid;
              grid-template-columns: repeat(7, 1fr);
              gap: 4px;
            }

            .calendar-day {
              height: 36px;
              display: flex;
              align-items: center;
              justify-content: center;
              font-size: 14px;
              color: white;
              border-radius: 6px;
              cursor: pointer;
              transition: all 0.2s ease;
            }

            .calendar-day:hover:not(.disabled):not(.selected) {
              background-color: rgba(255, 255, 255, 0.1);
            }

            .calendar-day.other-month {
              color: rgba(255, 255, 255, 0.3);
            }

            .calendar-day.today {
              border: 1px dashed rgba(233, 75, 159, 0.5);
            }

            .calendar-day.selected {
              background-color: rgba(233, 75, 159, 0.15);
              border: 1px solid rgba(233, 75, 159, 0.3);
              font-weight: 500;
            }

            .calendar-day.disabled {
              color: rgba(255, 255, 255, 0.2);
              cursor: not-allowed;
            }

            .date-picker-actions {
              display: flex;
              justify-content: flex-end;
              gap: 10px;
              padding: 16px 20px;
              border-top: 1px solid rgba(255, 255, 255, 0.1);
            }

            .date-picker-btn {
              padding: 8px 16px;
              border-radius: 8px;
              font-size: 14px;
              cursor: pointer;
              transition: all 0.2s ease;
            }

            .date-picker-cancel {
              background-color: transparent;
              border: 1px solid rgba(255, 255, 255, 0.1);
              color: rgba(255, 255, 255, 0.7);
            }

            .date-picker-cancel:hover {
              background-color: rgba(255, 255, 255, 0.05);
              color: white;
            }

            .date-picker-apply {
              background-color: rgba(233, 75, 159, 0.15);
              border: 1px solid rgba(233, 75, 159, 0.3);
              color: white;
            }

            .date-picker-apply:hover {
              background-color: rgba(233, 75, 159, 0.25);
              transform: translateY(-2px);
            }

            .prefill-button {
              background-color: rgba(255, 255, 255, 0.1);
              border: 1px solid rgba(255, 255, 255, 0.3);
              border-radius: 10px;
              color: white;
              padding: 10px 20px;
              cursor: pointer;
              transition: all 0.2s ease;
              margin-top: 20px;
            }

            .prefill-button:hover {
              background-color: rgba(255, 255, 255, 0.2);
              transform: translateY(-2px);
            }
</style>
